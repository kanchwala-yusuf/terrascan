From c64cc0c7d05a0fff5c2dc112ba7104f01788f87d Mon Sep 17 00:00:00 2001
From: Shay Ya'ari <shaysey@gmail.com>
Date: Tue, 2 Mar 2021 11:01:05 +0200
Subject: [PATCH] K8S Support Admission Controller Webhooks

Use K8s Admission Review Objects

Comments
---
 .gitignore                                    |    5 +-
 build/Dockerfile                              |    7 +-
 deploy/docker-compose.yml                     |    1 +
 .../admission-controller-webhooks-usage.md    |  108 +
 go.mod                                        |    3 +
 go.sum                                        |    8 +-
 pkg/cli/server.go                             |   12 +-
 pkg/config/config-reader.go                   |    5 +
 pkg/config/types.go                           |    9 +-
 pkg/http-server/assets/icons.svg              |    1 +
 pkg/http-server/assets/jsonTree.css           |  107 +
 pkg/http-server/assets/jsonTree.js            |  819 +++
 pkg/http-server/assets/moment.js              | 5670 +++++++++++++++++
 pkg/http-server/assets/webhook-scan-logs.css  |   33 +
 pkg/http-server/assets/webhook-scan-logs.js   |   44 +
 pkg/http-server/constants.go                  |    3 +
 pkg/http-server/handler.go                    |    7 +-
 pkg/http-server/handler_test.go               |    6 +-
 pkg/http-server/health_test.go                |    2 +-
 .../k8s_testdata/config-deny-category.toml    |    5 +
 .../k8s_testdata/config-deny-high.toml        |    5 +
 .../config-deny-non-existing-category.toml    |    8 +
 .../k8s_testdata/config-medium-severity.toml  |    2 +
 .../k8s_testdata/config-specific-rule.toml    |    5 +
 pkg/http-server/k8s_testdata/empty.json       |    0
 .../k8s_testdata/empty_object.json            |    7 +
 pkg/http-server/k8s_testdata/invalid.json     |    1 +
 .../k8s_testdata/risky_testconfig.json        |   27 +
 pkg/http-server/k8s_testdata/testconfig.json  |   27 +
 .../kubernetes_pod/AC-K8-CA-PO-H-0165.json    |   21 +
 .../kubernetes_pod/AC-K8-DS-PO-M-0176.json    |   14 +
 .../kubernetes_pod/AC-K8-DS-PO-M-0177.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-H-0106.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-H-0137.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-H-0138.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-H-0168.json    |   21 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0105.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0135.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0139.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0140.json    |   21 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0141.json    |   14 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0143.json    |   22 +
 .../kubernetes_pod/AC-K8-IA-PO-M-0162.json    |   16 +
 .../kubernetes_pod/AC-K8-IA-PS-M-0112.json    |   15 +
 .../kubernetes_pod/AC-K8-NS-PO-H-0117.json    |   14 +
 .../kubernetes_pod/AC-K8-NS-PO-H-0170.json    |   14 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0122.json    |   14 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0133.json    |   14 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0163.json    |   16 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0164.json    |   16 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0171.json    |   17 +
 .../kubernetes_pod/AC-K8-NS-PO-M-0182.json    |   14 +
 .../kubernetes_pod/AC-K8-OE-PK-M-0034.json    |   19 +
 .../kubernetes_pod/AC-K8-OE-PK-M-0155.json    |   21 +
 .../kubernetes_pod/AC-K8-OE-PK-M-0156.json    |   21 +
 .../kubernetes_pod/AC-K8-OE-PK-M-0157.json    |   21 +
 .../kubernetes_pod/AC-K8-OE-PK-M-0158.json    |   21 +
 .../kubernetes_pod/AC-K8-OE-PO-L-0129.json    |   16 +
 .../kubernetes_pod/AC-K8-OE-PO-L-0130.json    |   16 +
 .../kubernetes_pod/AC-K8-OE-PO-L-0134.json    |   14 +
 .../kubernetes_pod/AC-K8-OE-PO-M-0166.json    |   14 +
 .../kubernetes_pod/allowedHostPath.rego       |  107 +
 .../kubernetes_pod/allowedProcMount.rego      |  126 +
 .../kubernetes_pod/allowedVolumes.rego        |   58 +
 .../accurics.kubernetes.IAM.73.json           |   16 +
 .../accurics.kubernetes.IAM.74.json           |   16 +
 .../accurics.kubernetes.IAM.75.json           |   16 +
 .../accurics.kubernetes.IAM.76.json           |   16 +
 .../accurics.kubernetes.IAM.77.json           |   16 +
 .../accurics.kubernetes.IAM.78.json           |   16 +
 .../accurics.kubernetes.IAM.79.json           |   16 +
 .../accurics.kubernetes.IAM.80.json           |   16 +
 .../accurics.kubernetes.IAM.81.json           |   16 +
 .../accurics.kubernetes.IAM.82.json           |   16 +
 .../accurics.kubernetes.IAM.83.json           |   16 +
 .../accurics.kubernetes.IAM.84.json           |   16 +
 .../accurics.kubernetes.IAM.85.json           |   16 +
 .../accurics.kubernetes.IAM.86.json           |   16 +
 .../accurics.kubernetes.IAM.87.json           |   16 +
 .../accurics.kubernetes.IAM.88.json           |   16 +
 .../containerHasAllowedCapabilities.rego      |  119 +
 .../kubernetes_pod/appArmorProfile.rego       |  108 +
 .../kubernetes_pod/autoMountTokenEnabled.rego |   33 +
 .../kubernetes_pod/capSysAdminUsed.rego       |   69 +
 .../kubernetes_pod/capabilityUsed.rego        |   74 +
 .../kubernetes_pod/commandCheck.rego          |   19 +
 .../accurics.kubernetes.IAM.105.json          |   16 +
 .../accurics.kubernetes.IAM.106.json          |   16 +
 .../accurics.kubernetes.IAM.108.json          |   16 +
 .../accurics.kubernetes.IAM.109.json          |   16 +
 .../accurics.kubernetes.IAM.110.json          |   16 +
 .../accurics.kubernetes.IAM.111.json          |   16 +
 .../accurics.kubernetes.IAM.112.json          |   16 +
 .../accurics.kubernetes.IAM.113.json          |   16 +
 .../accurics.kubernetes.IAM.114.json          |   16 +
 .../accurics.kubernetes.IAM.115.json          |   16 +
 .../accurics.kubernetes.IAM.116.json          |   16 +
 .../accurics.kubernetes.IAM.117.json          |   16 +
 .../accurics.kubernetes.IAM.118.json          |   16 +
 .../accurics.kubernetes.IAM.119.json          |   16 +
 .../accurics.kubernetes.IAM.120.json          |   16 +
 .../containerResourcesNotDefined.rego         |  111 +
 .../accurics.kubernetes.EKM.57.json           |   16 +
 .../accurics.kubernetes.EKM.58.json           |   16 +
 .../accurics.kubernetes.EKM.59.json           |   16 +
 .../accurics.kubernetes.EKM.60.json           |   16 +
 .../accurics.kubernetes.EKM.61.json           |   16 +
 .../accurics.kubernetes.EKM.62.json           |   16 +
 .../accurics.kubernetes.EKM.63.json           |   16 +
 .../accurics.kubernetes.EKM.64.json           |   16 +
 .../accurics.kubernetes.EKM.65.json           |   16 +
 .../accurics.kubernetes.EKM.66.json           |   16 +
 .../accurics.kubernetes.EKM.67.json           |   16 +
 .../accurics.kubernetes.EKM.68.json           |   16 +
 .../accurics.kubernetes.EKM.69.json           |   16 +
 .../accurics.kubernetes.EKM.70.json           |   16 +
 .../accurics.kubernetes.EKM.71.json           |   16 +
 .../accurics.kubernetes.EKM.72.json           |   16 +
 .../containerUsesSecretsInEnvironmentVar.rego |  115 +
 .../kubernetes_pod/containersAsHighUID.rego   |  102 +
 .../kubernetes_pod/disallowedSysCalls.rego    |   51 +
 .../AC-K8-DS-PO-M-0143.json                   |   14 +
 .../disallowed_volumes/disAllowedVolumes.rego |   52 +
 .../kubernetes_pod/dockerSockCheck.rego       |   35 +
 .../kubernetes_pod/imageWithLatestTag.rego    |  196 +
 .../kubernetes_pod/imageWithoutDigest.rego    |  105 +
 .../kubernetes_pod/kubeDashboardEnabled.rego  |    6 +
 .../kubernetes_pod/otherNamespace.rego        |   20 +
 .../priviledgedContainersEnabled.rego         |   11 +
 .../kubernetes_pod/probeCheck.rego            |   68 +
 .../kubernetes_pod/secCompProfile.rego        |  153 +
 .../kubernetes_pod/secretsAsEnvVariables.rego |   75 +
 .../kubernetes_pod/securityContextCheck.rego  |   76 +
 .../kubernetes_pod/securityContextUsed.rego   |  103 +
 .../kubernetes_pod/specBoolCheck.rego         |   36 +
 .../kubernetes_pod/tillerDeployed.rego        |   35 +
 pkg/http-server/routes.go                     |   10 +-
 pkg/http-server/routes_test.go                |    2 +-
 pkg/http-server/server.go                     |    3 +-
 pkg/http-server/start.go                      |   31 +-
 pkg/http-server/templates/index.html          |   34 +
 pkg/http-server/templates/show.html           |   40 +
 pkg/http-server/webhook-deny-rule-matcher.go  |   35 +
 .../webhook-deny-rule-matcher_test.go         |   98 +
 pkg/http-server/webhook-scan-logger.go        |  197 +
 pkg/http-server/webhook-scan-logger_test.go   |   77 +
 pkg/http-server/webhook-scan-logs.go          |  242 +
 pkg/http-server/webhook-scan.go               |  297 +
 pkg/http-server/webhook-scan_test.go          |  244 +
 pkg/initialize/run.go                         |    2 +-
 pkg/runtime/executor_test.go                  |    3 -
 .../scan-skip-rules-low-severity.toml         |    2 +-
 152 files changed, 11577 insertions(+), 30 deletions(-)
 create mode 100644 docs/getting-started/admission-controller-webhooks-usage.md
 create mode 100644 pkg/http-server/assets/icons.svg
 create mode 100644 pkg/http-server/assets/jsonTree.css
 create mode 100644 pkg/http-server/assets/jsonTree.js
 create mode 100644 pkg/http-server/assets/moment.js
 create mode 100644 pkg/http-server/assets/webhook-scan-logs.css
 create mode 100644 pkg/http-server/assets/webhook-scan-logs.js
 create mode 100644 pkg/http-server/k8s_testdata/config-deny-category.toml
 create mode 100644 pkg/http-server/k8s_testdata/config-deny-high.toml
 create mode 100644 pkg/http-server/k8s_testdata/config-deny-non-existing-category.toml
 create mode 100644 pkg/http-server/k8s_testdata/config-medium-severity.toml
 create mode 100644 pkg/http-server/k8s_testdata/config-specific-rule.toml
 create mode 100644 pkg/http-server/k8s_testdata/empty.json
 create mode 100644 pkg/http-server/k8s_testdata/empty_object.json
 create mode 100644 pkg/http-server/k8s_testdata/invalid.json
 create mode 100644 pkg/http-server/k8s_testdata/risky_testconfig.json
 create mode 100644 pkg/http-server/k8s_testdata/testconfig.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-CA-PO-H-0165.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0176.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0177.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0106.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0137.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0138.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0168.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0105.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0135.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0139.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0140.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0141.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0143.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0162.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PS-M-0112.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0117.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0170.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0122.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0133.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0163.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0164.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0171.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0182.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0034.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0155.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0156.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0157.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0158.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0129.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0130.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0134.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-M-0166.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedHostPath.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedProcMount.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedVolumes.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.73.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.74.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.75.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.76.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.77.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.78.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.79.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.80.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.81.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.82.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.83.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.84.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.85.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.86.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.87.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.88.json
 create mode 100644 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/containerHasAllowedCapabilities.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/appArmorProfile.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/autoMountTokenEnabled.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capSysAdminUsed.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capabilityUsed.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/commandCheck.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.105.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.106.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.108.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.109.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.110.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.111.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.112.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.113.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.114.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.115.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.116.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.117.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.118.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.119.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.120.json
 create mode 100644 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/containerResourcesNotDefined.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.57.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.58.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.59.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.60.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.61.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.62.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.63.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.64.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.65.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.66.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.67.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.68.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.69.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.70.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.71.json
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.72.json
 create mode 100644 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/containerUsesSecretsInEnvironmentVar.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/containersAsHighUID.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowedSysCalls.rego
 create mode 100644 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/AC-K8-DS-PO-M-0143.json
 create mode 100644 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/disAllowedVolumes.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/dockerSockCheck.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithLatestTag.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithoutDigest.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/kubeDashboardEnabled.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/otherNamespace.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/priviledgedContainersEnabled.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/probeCheck.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secCompProfile.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secretsAsEnvVariables.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextCheck.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextUsed.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/specBoolCheck.rego
 create mode 100755 pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/tillerDeployed.rego
 create mode 100644 pkg/http-server/templates/index.html
 create mode 100644 pkg/http-server/templates/show.html
 create mode 100644 pkg/http-server/webhook-deny-rule-matcher.go
 create mode 100644 pkg/http-server/webhook-deny-rule-matcher_test.go
 create mode 100644 pkg/http-server/webhook-scan-logger.go
 create mode 100644 pkg/http-server/webhook-scan-logger_test.go
 create mode 100644 pkg/http-server/webhook-scan-logs.go
 create mode 100644 pkg/http-server/webhook-scan.go
 create mode 100644 pkg/http-server/webhook-scan_test.go

diff --git a/.gitignore b/.gitignore
index fc0803b..5dc0e2f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,6 +23,9 @@ docs/_build/
 #vscode
 .vscode/
 
+#GoLand
+.idea
+
 /updatedFiles
 
 # Go binar
@@ -30,4 +33,4 @@ docs/_build/
 
 .DS_Store
 
-vendor/
\ No newline at end of file
+vendor/
diff --git a/build/Dockerfile b/build/Dockerfile
index 376c117..7e06ea8 100644
--- a/build/Dockerfile
+++ b/build/Dockerfile
@@ -3,13 +3,14 @@ FROM golang:alpine AS builder
 
 ARG GOOS_VAL=linux
 ARG GOARCH_VAL=amd64
-ARG CGO_ENABLED_VAL=0
+ARG CGO_ENABLED_VAL=1
 
 WORKDIR $GOPATH/src/terrascan
 
 # download go dependencies
 COPY go.mod go.sum ./
 RUN go mod download
+RUN apk add -U build-base
 
 # copy terrascan source
 COPY . .
@@ -32,6 +33,10 @@ USER terrascan
 # copy terrascan binary from build
 COPY --from=builder /go/bin/terrascan /go/bin/terrascan
 
+# Copy webhooks UI templates & assets
+COPY ./pkg/http-server/templates /go/terrascan
+COPY ./pkg/http-server/assets /go/terrascan/assets
+
 EXPOSE 9010
 
 ENTRYPOINT ["/go/bin/terrascan"]
diff --git a/deploy/docker-compose.yml b/deploy/docker-compose.yml
index 9210f5c..6a430a5 100644
--- a/deploy/docker-compose.yml
+++ b/deploy/docker-compose.yml
@@ -4,3 +4,4 @@ services:
     image: accurics/terrascan:${TAG:-latest}
     ports:
       - 9010:9010
+      - 443:9443
diff --git a/docs/getting-started/admission-controller-webhooks-usage.md b/docs/getting-started/admission-controller-webhooks-usage.md
new file mode 100644
index 0000000..5db33da
--- /dev/null
+++ b/docs/getting-started/admission-controller-webhooks-usage.md
@@ -0,0 +1,108 @@
+# Using Terrascan as a Kubernetes Admission Controller
+
+## Overview
+Terrascan can be integrated with K8s [admissions webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/).
+It can be used as one of the validating webhooks to be used and scan new configurations.
+
+In this guide, we'll demonstrate how Terrascan can be configured to:
+* Scan configuration changes policies when an object is being created or updated
+* Allow / reject the request in case a violation is detected
+
+
+## Installation Guide
+
+### Create an instance
+Your Terrascan instance has the following requirements for being able to scan K8s configurations.
+
+1. Be accessible via HTTPS. Make sure your cloud firewall is configured to allow this.
+1. Have a valid SSL certificate for the served domain name. To do that, choose one of our suggested methods:
+  1. Use a subdomain of your choosing (e.g dev-terrascan-k8s.accurics.com) and create a valid certificate for this subdomain through your SSL certificate provider. [Let's Encrypt](https://letsencrypt.org/) is a free, simple to use certificate authority you can use.
+  1. Use a reverse-proxy to serve SSL requests; for example, use Cloudflare Flexible to get a certificate by a trusted-CA to your [self-signed certificate](https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs).
+  1. Generate a self-signed certificate and have your K8s cluster trust it. To add a trusted CA to ca-pemstore, as demonstrated in [paraspatidar's blog post](https://medium.com/@paraspatidar/add-ssl-tls-certificate-or-pem-file-to-kubernetes-pod-s-trusted-root-ca-store-7bed5cd683d).
+1. Use the Terrascan docker as demonstrated in this document, or run it from the sources.
+
+### Run Terrascan webhook service
+Run Terrascan docker image in your server using the following command:
+ ```bash
+  sudo docker run -p 443:9443 -v <DATA_PATH>:/data -u root -e K8S_WEBHOOK_API_KEY=<API_KEY>> accurics/terrascan server --cert-path /data/cert.pem --key-path /data/key.pem
+ ```
+`<API_KEY>` is a key used for authentication between your K8s environment and  the Terrascan server. Generate your preferred key and use it here.
+
+`<DATA_PATH>` is a directory path in your server where both the certificate and the private key .pem files are stored.
+In addition, this directory is used to write save the webhook logs. (An SQLite file)
+
+You can specify a config file that specifies which policies to use in the scan and which violations should lead to rejection.
+
+A config file example: ```my_terrscan_config.toml```
+  ```bash
+[severity]
+level = "medium"
+[rules]
+    skip-rules = [
+        "accurics.kubernetes.IAM.107"
+    ]
+
+[k8s-deny-rules]
+  denied-categories = [
+      "Network Ports Security"
+  ]
+  denied-severity = "high"
+  ```
+
+You can specify the following configurations:
+*  **scan-rules** - one or more rules to scan
+*  **skip-rules** - one or more rules to skip while scanning
+*  **severity** - the minimal level of severity of the policies to be scanned
+
+
+* **k8s-deny-rules** - specify the rules that should cause a rejection of the admission request
+  *  **denied-categories** - one or more policy categories that are not allowed in the detected violations
+  *  **denied-severity** - the minimal level of severity that should cause a rejection
+
+In order to use a configuration file, add it as a command line argument:
+
+```<terrascan> -c /data/my_terrscan_config.toml```
+
+
+### Configure K8s to send webhooks
+Configure a new ```ValidatingWebhookConfiguration``` in your Kubernetes environment and specify your Terrascan server endpoint.
+
+Example:
+   ```bash
+    cat <<EOF | kubectl apply -f -
+    apiVersion: admissionregistration.k8s.io/v1
+    kind: ValidatingWebhookConfiguration
+    metadata:
+      name: my.validation.example.check
+    webhooks:
+      - name: my.validation.example.check
+        rules:
+          - apiGroups:
+              - ""
+            apiVersions:
+              - v1
+            operations:
+              - CREATE
+              - UPDATE
+            resources:
+              - pods
+              - services
+        failurePolicy: Fail
+        clientConfig:
+          url: https://<SERVER_ADDRESS>/v1/k8s/webhooks/<API_KEY>/scan
+        sideEffects: None
+        admissionReviewVersions: ["v1"]
+    EOF
+  ```
+
+* You can modify the `rules` that trigger the webhook according to your preferences.
+* Update the ```clientConfig``` URL with your terrascan server address and the API key you generated before.
+
+
+### Test your settings
+Try to run a new pod / service. For example:
+``` Bash
+  kubectl run mynginx --image=nginx
+```
+
+Go to ```https://<SERVER_ADDRESS>/k8s/webhooks/<API_KEY>/logs``` and verify your request is logged.
diff --git a/go.mod b/go.mod
index c76b2a7..2d86ab4 100644
--- a/go.mod
+++ b/go.mod
@@ -19,6 +19,7 @@ require (
 	github.com/hashicorp/terraform v0.14.4
 	github.com/iancoleman/strcase v0.1.3
 	github.com/mattn/go-isatty v0.0.12
+	github.com/mattn/go-sqlite3 v1.14.6
 	github.com/mitchellh/go-homedir v1.1.0
 	github.com/onsi/ginkgo v1.12.1
 	github.com/onsi/gomega v1.10.5
@@ -35,5 +36,7 @@ require (
 	gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776
 	helm.sh/helm/v3 v3.4.0
 	honnef.co/go/tools v0.1.1 // indirect
+	k8s.io/api v0.19.2
+	k8s.io/apimachinery v0.19.2
 	sigs.k8s.io/kustomize/api v0.7.2
 )
diff --git a/go.sum b/go.sum
index c589491..6b0fbb0 100644
--- a/go.sum
+++ b/go.sum
@@ -700,7 +700,10 @@ github.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzp
 github.com/mattn/go-shellwords v1.0.4/go.mod h1:3xCvwCdWdlDJUrvuMn7Wuy9eWs4pE8vqg+NOMyg4B2o=
 github.com/mattn/go-shellwords v1.0.10/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=
 github.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
+github.com/mattn/go-sqlite3 v1.12.0 h1:u/x3mp++qUxvYfulZ4HKOvVO0JWhk7HtE8lWhbGz/Do=
 github.com/mattn/go-sqlite3 v1.12.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
+github.com/mattn/go-sqlite3 v1.14.6 h1:dNPt6NO46WmLVt2DLNpwczCmdV5boIZ6g/tlDrlRUbg=
+github.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=
 github.com/mattn/goveralls v0.0.2/go.mod h1:8d1ZMHsd7fW6IRPKQh46F2WRpyib5/X4FOpevwGNQEw=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=
@@ -1317,7 +1320,6 @@ golang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWc
 golang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
-golang.org/x/tools v0.0.0-20200609164405-eb789aa7ce50/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200616133436-c1934b75d054/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
@@ -1325,8 +1327,6 @@ golang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc
 golang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=
 golang.org/x/tools v0.0.0-20201028111035-eafbe7b904eb/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
-golang.org/x/tools v0.0.0-20210115202250-e0d201561e39 h1:BTs2GMGSMWpgtCpv1CE7vkJTv7XcHdcLLnAMu7UbgTY=
-golang.org/x/tools v0.0.0-20210115202250-e0d201561e39/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.1.0 h1:po9/4sTYwZU9lPhi1tOrb4hCv3qrhiQ77LZfGa2OjwY=
 golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -1485,8 +1485,6 @@ honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWh
 honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
-honnef.co/go/tools v0.1.0 h1:AWNL1W1i7f0wNZ8VwOKNJ0sliKvOF/adn0EHenfUh+c=
-honnef.co/go/tools v0.1.0/go.mod h1:XtegFAyX/PfluP4921rXU5IkjkqBCDnUq4W8VCIoKvM=
 honnef.co/go/tools v0.1.1 h1:EVDuO03OCZwpV2t/tLLxPmPiomagMoBOgfPt0FM+4IY=
 honnef.co/go/tools v0.1.1/go.mod h1:NgwopIslSNH47DimFoV78dnkksY2EFtX0ajyb3K/las=
 k8s.io/api v0.19.0 h1:XyrFIJqTYZJ2DU7FBE/bSPz7b1HvbVBuBf07oeo6eTc=
diff --git a/pkg/cli/server.go b/pkg/cli/server.go
index edb4627..ea6040e 100644
--- a/pkg/cli/server.go
+++ b/pkg/cli/server.go
@@ -21,6 +21,14 @@ import (
 	"github.com/spf13/cobra"
 )
 
+var (
+	// CertFile Certificate file path, required in order to enable secure HTTP server
+	CertFile string
+
+	// PrivateKeyFile Private key file path, required in order to enable secure HTTP server
+	PrivateKeyFile string
+)
+
 var serverCmd = &cobra.Command{
 	Use:   "server",
 	Short: "Run Terrascan as an API server",
@@ -35,9 +43,11 @@ Run Terrascan as an API server that inspects incoming IaC (Infrastructure-as-Cod
 }
 
 func server(cmd *cobra.Command, args []string) {
-	httpserver.Start()
+	httpserver.Start(ConfigFile, CertFile, PrivateKeyFile)
 }
 
 func init() {
+	rootCmd.PersistentFlags().StringVarP(&PrivateKeyFile, "key-path", "", "", "private key file path")
+	rootCmd.PersistentFlags().StringVarP(&CertFile, "cert-path", "", "", "certificate file path")
 	RegisterCommand(rootCmd, serverCmd)
 }
diff --git a/pkg/config/config-reader.go b/pkg/config/config-reader.go
index f33edf0..f37821f 100644
--- a/pkg/config/config-reader.go
+++ b/pkg/config/config-reader.go
@@ -87,3 +87,8 @@ func (r TerrascanConfigReader) GetRules() Rules {
 func (r TerrascanConfigReader) GetSeverity() Severity {
 	return r.config.Severity
 }
+
+// GetK8sDenyRules will return the k8s deny rules specified in the terrascan config file
+func (r TerrascanConfigReader) GetK8sDenyRules() K8sDenyRules {
+	return r.config.K8sDenyRules
+}
diff --git a/pkg/config/types.go b/pkg/config/types.go
index 9c51446..c83744f 100644
--- a/pkg/config/types.go
+++ b/pkg/config/types.go
@@ -16,7 +16,7 @@
 
 package config
 
-// Global initalizes GlobalConfig struct
+// Global initializes GlobalConfig struct
 var Global *TerrascanConfig = &TerrascanConfig{}
 
 // TerrascanConfig struct defines global variables/configurations across terrascan
@@ -25,6 +25,7 @@ type TerrascanConfig struct {
 	Notifications map[string]Notifier `toml:"notifications,omitempty"`
 	Rules         `toml:"rules,omitempty"`
 	Severity      `toml:"severity,omitempty"`
+	K8sDenyRules   `toml:"k8s-deny-rules,omitempty"`
 }
 
 // Severity defines the minimum level of severity of violations that you want to be reported
@@ -54,3 +55,9 @@ type Rules struct {
 	ScanRules []string `toml:"scan-rules,omitempty"`
 	SkipRules []string `toml:"skip-rules,omitempty"`
 }
+
+// K8s deny rules in the terrascan config file
+type K8sDenyRules struct {
+	DeniedSeverity string `toml:"denied-severity,omitempty"`
+	Categories []string `toml:"denied-categories,omitempty"`
+}
diff --git a/pkg/http-server/assets/icons.svg b/pkg/http-server/assets/icons.svg
new file mode 100644
index 0000000..cc8298a
--- /dev/null
+++ b/pkg/http-server/assets/icons.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="11" height="22"><defs><linearGradient id="a"><stop offset="0"/><stop offset="1" stop-opacity="0"/></linearGradient><radialGradient xlink:href="#a" cx="9.739" cy="9.716" fx="9.739" fy="9.716" r="3.709" gradientUnits="userSpaceOnUse"/></defs><g stroke="#000" fill="none"><g transform="translate(-129.5 -333.862) translate(0 .188)"><rect transform="matrix(.962 0 0 .971 4.943 11.548)" ry="2" rx="2" y="332.362" x="130" height="10.337" width="10.432" opacity=".5"/><g><path d="M132 339.175h6" opacity=".5"/><path d="M135 336.175v6" opacity=".5"/></g></g><g transform="translate(-129.5 -333.862)"><rect width="10.432" height="10.337" x="130" y="332.362" rx="2" ry="2" transform="matrix(.962 0 0 .971 4.943 22.736)" opacity=".5"/><path d="M132 350.362h6" opacity=".5"/></g></g></svg>
\ No newline at end of file
diff --git a/pkg/http-server/assets/jsonTree.css b/pkg/http-server/assets/jsonTree.css
new file mode 100644
index 0000000..ad17484
--- /dev/null
+++ b/pkg/http-server/assets/jsonTree.css
@@ -0,0 +1,107 @@
+/*
+ * JSON Tree Viewer
+ * http://github.com/summerstyle/jsonTreeViewer
+ *
+ * Copyright 2017 Vera Lobacheva (http://iamvera.com)
+ * Released under the MIT license (LICENSE.txt)
+ */
+
+/* Background for the tree. May use for <body> element */
+.jsontree_bg {
+    background: #FFF;
+}
+
+/* Styles for the container of the tree (e.g. fonts, margins etc.) */
+.jsontree_tree {
+    /*margin-left: 30px;*/
+    font-family: 'PT Mono', monospace;
+    font-size: 14px;
+}
+
+/* Styles for a list of child nodes */
+.jsontree_child-nodes {
+    display: none;
+    margin-left: 35px;
+    margin-bottom: 5px;
+    line-height: 2;
+}
+.jsontree_node_expanded > .jsontree_value-wrapper > .jsontree_value > .jsontree_child-nodes {
+    display: block;
+}
+
+/* Styles for labels */
+.jsontree_label-wrapper {
+    float: left;
+    margin-right: 8px;
+}
+.jsontree_label {
+    font-weight: normal;
+    vertical-align: top;
+    color: #000;
+    position: relative;
+    padding: 1px;
+    border-radius: 4px;
+    cursor: default;
+}
+.jsontree_node_marked > .jsontree_label-wrapper > .jsontree_label {
+    background: #fff2aa;
+}
+
+/* Styles for values */
+.jsontree_value-wrapper {
+    display: block;
+    /*overflow: hidden;*/
+}
+.jsontree_node_complex > .jsontree_value-wrapper {
+    overflow: inherit;
+}
+.jsontree_value {
+    vertical-align: top;
+    display: inline;
+}
+.jsontree_value_null {
+    color: #777;
+    font-weight: bold;
+}
+.jsontree_value_string {
+    color: #025900;
+    font-weight: bold;
+}
+.jsontree_value_number {
+    color: #000E59;
+    font-weight: bold;
+}
+.jsontree_value_boolean {
+    color: #600100;
+    font-weight: bold;
+}
+
+/* Styles for active elements */
+.jsontree_expand-button {
+    position: absolute;
+    top: 3px;
+    left: -15px;
+    display: block;
+    width: 11px;
+    height: 11px;
+    background-image: url('icons.svg');
+}
+.jsontree_node_expanded > .jsontree_label-wrapper > .jsontree_label > .jsontree_expand-button {
+    background-position: 0 -11px;
+}
+.jsontree_show-more {
+    cursor: pointer;
+}
+.jsontree_node_expanded > .jsontree_value-wrapper > .jsontree_value > .jsontree_show-more {
+    display: none;
+}
+.jsontree_node_empty > .jsontree_label-wrapper > .jsontree_label > .jsontree_expand-button,
+.jsontree_node_empty > .jsontree_value-wrapper > .jsontree_value > .jsontree_show-more {
+    display: none !important;
+}
+.jsontree_node_complex > .jsontree_label-wrapper > .jsontree_label {
+    cursor: pointer;
+}
+.jsontree_node_empty > .jsontree_label-wrapper > .jsontree_label {
+    cursor: default !important;
+}
diff --git a/pkg/http-server/assets/jsonTree.js b/pkg/http-server/assets/jsonTree.js
new file mode 100644
index 0000000..51bbf01
--- /dev/null
+++ b/pkg/http-server/assets/jsonTree.js
@@ -0,0 +1,819 @@
+/**
+ * JSON Tree library (a part of jsonTreeViewer)
+ * http://github.com/summerstyle/jsonTreeViewer
+ *
+ * Copyright 2017 Vera Lobacheva (http://iamvera.com)
+ * Released under the MIT license (LICENSE.txt)
+ */
+
+var jsonTree = (function() {
+    
+    /* ---------- Utilities ---------- */
+    var utils = {
+        
+        /*
+         * Returns js-"class" of value
+         * 
+         * @param val {any type} - value
+         * @returns {string} - for example, "[object Function]"
+         */
+        getClass : function(val) {
+            return Object.prototype.toString.call(val);
+        },
+        
+        /**
+         * Checks for a type of value (for valid JSON data types).
+         * In other cases - throws an exception
+         * 
+         * @param val {any type} - the value for new node
+         * @returns {string} ("object" | "array" | "null" | "boolean" | "number" | "string")
+         */
+        getType : function(val) {
+            if (val === null) {
+                return 'null';
+            }
+            
+            switch (typeof val) {
+                case 'number':
+                    return 'number';
+                
+                case 'string':
+                    return 'string';
+                
+                case 'boolean':
+                    return 'boolean';
+            }
+            
+            switch(utils.getClass(val)) {
+                case '[object Array]':
+                    return 'array';
+                
+                case '[object Object]':
+                    return 'object';
+            }
+            
+            throw new Error('Bad type: ' + utils.getClass(val));
+        },
+        
+        /**
+         * Applies for each item of list some function
+         * and checks for last element of the list
+         * 
+         * @param obj {Object | Array} - a list or a dict with child nodes
+         * @param func {Function} - the function for each item
+         */
+        forEachNode : function(obj, func) {
+            var type = utils.getType(obj),
+                isLast;
+        
+            switch (type) {
+                case 'array':
+                    isLast = obj.length - 1;
+                    
+                    obj.forEach(function(item, i) {
+                        func(i, item, i === isLast);
+                    });
+                    
+                    break;
+                
+                case 'object':
+                    var keys = Object.keys(obj).sort();
+                    
+                    isLast = keys.length - 1;
+                    
+                    keys.forEach(function(item, i) {
+                        func(item, obj[item], i === isLast);
+                    });
+                    
+                    break;
+            }
+            
+        },
+        
+        /**
+         * Implements the kind of an inheritance by
+         * using parent prototype and
+         * creating intermediate constructor
+         * 
+         * @param Child {Function} - a child constructor
+         * @param Parent {Function} - a parent constructor
+         */
+        inherits : (function() {
+            var F = function() {};
+            
+            return function(Child, Parent) {
+                F.prototype = Parent.prototype;
+                Child.prototype = new F();
+                Child.prototype.constructor = Child;
+            };
+        })(),
+        
+        /*
+         * Checks for a valid type of root node*
+         *
+         * @param {any type} jsonObj - a value for root node
+         * @returns {boolean} - true for an object or an array, false otherwise
+         */
+        isValidRoot : function(jsonObj) {
+            switch (utils.getType(jsonObj)) {
+                case 'object':
+                case 'array':
+                    return true;
+                default:
+                    return false;
+            }
+        },
+
+        /**
+         * Extends some object
+         */
+        extend : function(targetObj, sourceObj) {
+            for (var prop in sourceObj) {
+                if (sourceObj.hasOwnProperty(prop)) {
+                    targetObj[prop] = sourceObj[prop];
+                }
+            }
+        }
+    };
+    
+    
+    /* ---------- Node constructors ---------- */
+    
+    /**
+     * The factory for creating nodes of defined type.
+     * 
+     * ~~~ Node ~~~ is a structure element of an onject or an array
+     * with own label (a key of an object or an index of an array)
+     * and value of any json data type. The root object or array
+     * is a node without label.
+     * {...
+     * [+] "label": value,
+     * ...}
+     * 
+     * Markup:
+     * <li class="jsontree_node [jsontree_node_expanded]">
+     *     <span class="jsontree_label-wrapper">
+     *         <span class="jsontree_label">
+     *             <span class="jsontree_expand-button" />
+     *             "label"
+     *         </span>
+     *         :
+     *     </span>
+     *     <(div|span) class="jsontree_value jsontree_value_(object|array|boolean|null|number|string)">
+     *         ...
+     *     </(div|span)>
+     * </li>
+     *
+     * @param label {string} - key name
+     * @param val {Object | Array | string | number | boolean | null} - a value of node
+     * @param isLast {boolean} - true if node is last in list of siblings
+     * 
+     * @return {Node}
+     */
+    function Node(label, val, isLast) {
+        var nodeType = utils.getType(val);
+        
+        if (nodeType in Node.CONSTRUCTORS) {
+            return new Node.CONSTRUCTORS[nodeType](label, val, isLast);
+        } else {
+            throw new Error('Bad type: ' + utils.getClass(val));
+        }
+    }
+    
+    Node.CONSTRUCTORS = {
+        'boolean' : NodeBoolean,
+        'number'  : NodeNumber,
+        'string'  : NodeString,
+        'null'    : NodeNull,
+        'object'  : NodeObject,
+        'array'   : NodeArray  
+    };
+    
+    
+    /*
+     * The constructor for simple types (string, number, boolean, null)
+     * {...
+     * [+] "label": value,
+     * ...}
+     * value = string || number || boolean || null
+     *
+     * Markup:
+     * <li class="jsontree_node">
+     *     <span class="jsontree_label-wrapper">
+     *         <span class="jsontree_label">"age"</span>
+     *         :
+     *     </span>
+     *     <span class="jsontree_value jsontree_value_(number|boolean|string|null)">25</span>
+     *     ,
+     * </li>
+     *
+     * @abstract
+     * @param label {string} - key name
+     * @param val {string | number | boolean | null} - a value of simple types
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function _NodeSimple(label, val, isLast) {
+        if (this.constructor === _NodeSimple) {
+            throw new Error('This is abstract class');
+        }
+        
+        var self = this,
+            el = document.createElement('li'),
+            labelEl,
+            template = function(label, val) {
+                var str = '\
+                    <span class="jsontree_label-wrapper">\
+                        <span class="jsontree_label">"' +
+                            label +
+                        '"</span> : \
+                    </span>\
+                    <span class="jsontree_value-wrapper">\
+                        <span class="jsontree_value jsontree_value_' + self.type + '">' +
+                            val +
+                        '</span>' +
+                        (!isLast ? ',' : '') + 
+                    '</span>';
+    
+                return str;
+            };
+            
+        self.label = label;
+        self.isComplex = false;
+    
+        el.classList.add('jsontree_node');
+        el.innerHTML = template(label, val);
+    
+        self.el = el;
+
+        labelEl = el.querySelector('.jsontree_label');
+    
+        labelEl.addEventListener('click', function(e) {
+            if (e.altKey) {
+                self.toggleMarked();
+                return;
+            }
+
+            if (e.shiftKey) {
+                document.getSelection().removeAllRanges();
+                alert(self.getJSONPath());
+                return;
+            }
+        }, false);
+    }
+
+    _NodeSimple.prototype = {
+        constructor : _NodeSimple,
+
+        /**
+         * Mark node
+         */
+        mark : function() {
+            this.el.classList.add('jsontree_node_marked');    
+        },
+
+        /**
+         * Unmark node
+         */
+        unmark : function() {
+            this.el.classList.remove('jsontree_node_marked');    
+        },
+
+        /**
+         * Mark or unmark node
+         */
+        toggleMarked : function() {
+            this.el.classList.toggle('jsontree_node_marked');    
+        },
+
+        /**
+         * Expands parent node of this node
+         *
+         * @param isRecursive {boolean} - if true, expands all parent nodes
+         *                                (from node to root)
+         */
+        expandParent : function(isRecursive) {
+            if (!this.parent) {
+                return;
+            }
+               
+            this.parent.expand(); 
+            this.parent.expandParent(isRecursive);
+        },
+
+        /**
+         * Returns JSON-path of this 
+         * 
+         * @param isInDotNotation {boolean} - kind of notation for returned json-path
+         *                                    (by default, in bracket notation)
+         * @returns {string}
+         */
+        getJSONPath : function(isInDotNotation) {
+            if (this.isRoot) {
+                return "$";
+            }
+
+            var currentPath;
+
+            if (this.parent.type === 'array') {
+                currentPath = "[" + this.label + "]";
+            } else {
+                currentPath = isInDotNotation ? "." + this.label : "['" + this.label + "']";
+            }
+
+            return this.parent.getJSONPath(isInDotNotation) + currentPath; 
+        }
+    };
+    
+    
+    /*
+     * The constructor for boolean values
+     * {...
+     * [+] "label": boolean,
+     * ...}
+     * boolean = true || false
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {boolean} - value of boolean type, true or false
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function NodeBoolean(label, val, isLast) {
+        this.type = "boolean";
+    
+        _NodeSimple.call(this, label, val, isLast);
+    }
+    utils.inherits(NodeBoolean,_NodeSimple);
+    
+    
+    /*
+     * The constructor for number values
+     * {...
+     * [+] "label": number,
+     * ...}
+     * number = 123
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {number} - value of number type, for example 123
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function NodeNumber(label, val, isLast) {
+        this.type = "number";
+    
+        _NodeSimple.call(this, label, val, isLast);
+    }
+    utils.inherits(NodeNumber,_NodeSimple);
+    
+    
+    /*
+     * The constructor for string values
+     * {...
+     * [+] "label": string,
+     * ...}
+     * string = "abc"
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {string} - value of string type, for example "abc"
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function NodeString(label, val, isLast) {
+        this.type = "string";
+    
+        _NodeSimple.call(this, label, '"' + val + '"', isLast);
+    }
+    utils.inherits(NodeString,_NodeSimple);
+    
+    
+    /*
+     * The constructor for null values
+     * {...
+     * [+] "label": null,
+     * ...}
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {null} - value (only null)
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function NodeNull(label, val, isLast) {
+        this.type = "null";
+    
+        _NodeSimple.call(this, label, val, isLast);
+    }
+    utils.inherits(NodeNull,_NodeSimple);
+    
+    
+    /*
+     * The constructor for complex types (object, array)
+     * {...
+     * [+] "label": value,
+     * ...}
+     * value = object || array
+     *
+     * Markup:
+     * <li class="jsontree_node jsontree_node_(object|array) [expanded]">
+     *     <span class="jsontree_label-wrapper">
+     *         <span class="jsontree_label">
+     *             <span class="jsontree_expand-button" />
+     *             "label"
+     *         </span>
+     *         :
+     *     </span>
+     *     <div class="jsontree_value">
+     *         <b>{</b>
+     *         <ul class="jsontree_child-nodes" />
+     *         <b>}</b>
+     *         ,
+     *     </div>
+     * </li>
+     *
+     * @abstract
+     * @param label {string} - key name
+     * @param val {Object | Array} - a value of complex types, object or array
+     * @param isLast {boolean} - true if node is last in list of parent childNodes
+     */
+    function _NodeComplex(label, val, isLast) {
+        if (this.constructor === _NodeComplex) {
+            throw new Error('This is abstract class');
+        }
+        
+        var self = this,
+            el = document.createElement('li'),
+            template = function(label, sym) {
+                var comma = (!isLast) ? ',' : '',
+                    str = '\
+                        <div class="jsontree_value-wrapper">\
+                            <div class="jsontree_value jsontree_value_' + self.type + '">\
+                                <b>' + sym[0] + '</b>\
+                                <span class="jsontree_show-more">&hellip;</span>\
+                                <ul class="jsontree_child-nodes"></ul>\
+                                <b>' + sym[1] + '</b>' +
+                            '</div>' + comma +
+                        '</div>';
+    
+                if (label !== null) {
+                    str = '\
+                        <span class="jsontree_label-wrapper">\
+                            <span class="jsontree_label">' +
+                                '<span class="jsontree_expand-button"></span>' +
+                                '"' + label +
+                            '"</span> : \
+                        </span>' + str;
+                }
+    
+                return str;
+            },
+            childNodesUl,
+            labelEl,
+            moreContentEl,
+            childNodes = [];
+    
+        self.label = label;
+        self.isComplex = true;
+    
+        el.classList.add('jsontree_node');
+        el.classList.add('jsontree_node_complex');
+        el.innerHTML = template(label, self.sym);
+    
+        childNodesUl = el.querySelector('.jsontree_child-nodes');
+    
+        if (label !== null) {
+            labelEl = el.querySelector('.jsontree_label');
+            moreContentEl = el.querySelector('.jsontree_show-more');
+    
+            labelEl.addEventListener('click', function(e) {
+                if (e.altKey) {
+                    self.toggleMarked();
+                    return;
+                }
+
+                if (e.shiftKey) {
+                    document.getSelection().removeAllRanges();
+                    alert(self.getJSONPath());
+                    return;
+                }
+
+                self.toggle(e.ctrlKey || e.metaKey);
+            }, false);
+            
+            moreContentEl.addEventListener('click', function(e) {
+                self.toggle(e.ctrlKey || e.metaKey);
+            }, false);
+    
+            self.isRoot = false;
+        } else {
+            self.isRoot = true;
+            self.parent = null;
+    
+            el.classList.add('jsontree_node_expanded');
+        }
+    
+        self.el = el;
+        self.childNodes = childNodes;
+        self.childNodesUl = childNodesUl;
+    
+        utils.forEachNode(val, function(label, node, isLast) {
+            self.addChild(new Node(label, node, isLast));
+        });
+    
+        self.isEmpty = !Boolean(childNodes.length);
+        if (self.isEmpty) {
+            el.classList.add('jsontree_node_empty');
+        }
+    }
+
+    utils.inherits(_NodeComplex, _NodeSimple);
+    
+    utils.extend(_NodeComplex.prototype, {
+        constructor : _NodeComplex,
+        
+        /*
+         * Add child node to list of child nodes
+         *
+         * @param child {Node} - child node
+         */
+        addChild : function(child) {
+            this.childNodes.push(child);
+            this.childNodesUl.appendChild(child.el);
+            child.parent = this;
+        },
+    
+        /*
+         * Expands this list of node child nodes
+         *
+         * @param isRecursive {boolean} - if true, expands all child nodes
+         */
+        expand : function(isRecursive){
+            if (this.isEmpty) {
+                return;
+            }
+            
+            if (!this.isRoot) {
+                this.el.classList.add('jsontree_node_expanded');
+            }
+    
+            if (isRecursive) {
+                this.childNodes.forEach(function(item, i) {
+                    if (item.isComplex) {
+                        item.expand(isRecursive);
+                    }
+                });
+            }
+        },
+    
+        /*
+         * Collapses this list of node child nodes
+         *
+         * @param isRecursive {boolean} - if true, collapses all child nodes
+         */
+        collapse : function(isRecursive) {
+            if (this.isEmpty) {
+                return;
+            }
+            
+            if (!this.isRoot) {
+                this.el.classList.remove('jsontree_node_expanded');
+            }
+    
+            if (isRecursive) {
+                this.childNodes.forEach(function(item, i) {
+                    if (item.isComplex) {
+                        item.collapse(isRecursive);
+                    }
+                });
+            }
+        },
+    
+        /*
+         * Expands collapsed or collapses expanded node
+         *
+         * @param {boolean} isRecursive - Expand all child nodes if this node is expanded
+         *                                and collapse it otherwise
+         */
+        toggle : function(isRecursive) {
+            if (this.isEmpty) {
+                return;
+            }
+            
+            this.el.classList.toggle('jsontree_node_expanded');
+            
+            if (isRecursive) {
+                var isExpanded = this.el.classList.contains('jsontree_node_expanded');
+                
+                this.childNodes.forEach(function(item, i) {
+                    if (item.isComplex) {
+                        item[isExpanded ? 'expand' : 'collapse'](isRecursive);
+                    }
+                });
+            }
+        },
+
+        /**
+         * Find child nodes that match some conditions and handle it
+         * 
+         * @param {Function} matcher
+         * @param {Function} handler
+         * @param {boolean} isRecursive
+         */
+        findChildren : function(matcher, handler, isRecursive) {
+            if (this.isEmpty) {
+                return;
+            }
+            
+            this.childNodes.forEach(function(item, i) {
+                if (matcher(item)) {
+                    handler(item);
+                }
+
+                if (item.isComplex && isRecursive) {
+                    item.findChildren(matcher, handler, isRecursive);
+                }
+            });
+        }
+    });
+    
+    
+    /*
+     * The constructor for object values
+     * {...
+     * [+] "label": object,
+     * ...}
+     * object = {"abc": "def"}
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {Object} - value of object type, {"abc": "def"}
+     * @param isLast {boolean} - true if node is last in list of siblings
+     */
+    function NodeObject(label, val, isLast) {
+        this.sym = ['{', '}'];
+        this.type = "object";
+    
+        _NodeComplex.call(this, label, val, isLast);
+    }
+    utils.inherits(NodeObject,_NodeComplex);
+    
+    
+    /*
+     * The constructor for array values
+     * {...
+     * [+] "label": array,
+     * ...}
+     * array = [1,2,3]
+     *
+     * @constructor
+     * @param label {string} - key name
+     * @param val {Array} - value of array type, [1,2,3]
+     * @param isLast {boolean} - true if node is last in list of siblings
+     */
+    function NodeArray(label, val, isLast) {
+        this.sym = ['[', ']'];
+        this.type = "array";
+    
+        _NodeComplex.call(this, label, val, isLast);
+    }
+    utils.inherits(NodeArray, _NodeComplex);
+    
+    
+    /* ---------- The tree constructor ---------- */
+    
+    /*
+     * The constructor for json tree.
+     * It contains only one Node (Array or Object), without property name.
+     * CSS-styles of .tree define main tree styles like font-family,
+     * font-size and own margins.
+     *
+     * Markup:
+     * <ul class="jsontree_tree clearfix">
+     *     {Node}
+     * </ul>
+     *
+     * @constructor
+     * @param jsonObj {Object | Array} - data for tree
+     * @param domEl {DOMElement} - DOM-element, wrapper for tree
+     */
+    function Tree(jsonObj, domEl) {
+        this.wrapper = document.createElement('ul');
+        this.wrapper.className = 'jsontree_tree clearfix';
+        
+        this.rootNode = null;
+        
+        this.sourceJSONObj = jsonObj;
+
+        this.loadData(jsonObj);
+        this.appendTo(domEl);
+    }
+    
+    Tree.prototype = {
+        constructor : Tree,
+        
+        /**
+         * Fill new data in current json tree
+         *
+         * @param {Object | Array} jsonObj - json-data
+         */
+        loadData : function(jsonObj) {
+            if (!utils.isValidRoot(jsonObj)) {
+                alert('The root should be an object or an array');
+                return;
+            }
+
+            this.sourceJSONObj = jsonObj;
+            
+            this.rootNode = new Node(null, jsonObj, 'last');
+            this.wrapper.innerHTML = '';
+            this.wrapper.appendChild(this.rootNode.el);
+        },
+        
+        /**
+         * Appends tree to DOM-element (or move it to new place)
+         *
+         * @param {DOMElement} domEl 
+         */
+        appendTo : function(domEl) {
+            domEl.appendChild(this.wrapper);
+        },
+        
+        /**
+         * Expands all tree nodes (objects or arrays) recursively
+         *
+         * @param {Function} filterFunc - 'true' if this node should be expanded
+         */
+        expand : function(filterFunc) {
+            if (this.rootNode.isComplex) {
+                if (typeof filterFunc == 'function') {
+                    this.rootNode.childNodes.forEach(function(item, i) {
+                        if (item.isComplex && filterFunc(item)) {
+                            item.expand();
+                        }
+                    });
+                } else {
+                    this.rootNode.expand('recursive');
+                }
+            }
+        },
+       
+        /**
+         * Collapses all tree nodes (objects or arrays) recursively
+         */
+        collapse : function() {
+            if (typeof this.rootNode.collapse === 'function') {
+                this.rootNode.collapse('recursive');
+            }
+        },
+
+        /**
+         * Returns the source json-string (pretty-printed)
+         * 
+         * @param {boolean} isPrettyPrinted - 'true' for pretty-printed string
+         * @returns {string} - for exemple, '{"a":2,"b":3}'
+         */
+        toSourceJSON : function(isPrettyPrinted) {
+            if (!isPrettyPrinted) {
+                return JSON.stringify(this.sourceJSONObj);
+            }
+
+            var DELIMETER = "[%^$#$%^%]",
+                jsonStr = JSON.stringify(this.sourceJSONObj, null, DELIMETER);
+
+            jsonStr = jsonStr.split("\n").join("<br />");
+            jsonStr = jsonStr.split(DELIMETER).join("&nbsp;&nbsp;&nbsp;&nbsp;");
+
+            return jsonStr;
+        },
+
+        /**
+         * Find all nodes that match some conditions and handle it
+         */
+        findAndHandle : function(matcher, handler) {
+            this.rootNode.findChildren(matcher, handler, 'isRecursive');
+        },
+
+        /**
+         * Unmark all nodes
+         */
+        unmarkAll : function() {
+            this.rootNode.findChildren(function(node) {
+                return true;
+            }, function(node) {
+                node.unmark();
+            }, 'isRecursive');
+        }
+    };
+
+    
+    /* ---------- Public methods ---------- */
+    return {
+        /**
+         * Creates new tree by data and appends it to the DOM-element
+         * 
+         * @param jsonObj {Object | Array} - json-data
+         * @param domEl {DOMElement} - the wrapper element
+         * @returns {Tree}
+         */
+        create : function(jsonObj, domEl) {
+            return new Tree(jsonObj, domEl);
+        }
+    };
+})();
diff --git a/pkg/http-server/assets/moment.js b/pkg/http-server/assets/moment.js
new file mode 100644
index 0000000..43bb380
--- /dev/null
+++ b/pkg/http-server/assets/moment.js
@@ -0,0 +1,5670 @@
+//! moment.js
+//! version : 2.29.1
+//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
+//! license : MIT
+//! momentjs.com
+
+;(function (global, factory) {
+  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
+    typeof define === 'function' && define.amd ? define(factory) :
+      global.moment = factory()
+}(this, (function () { 'use strict';
+
+  var hookCallback;
+
+  function hooks() {
+    return hookCallback.apply(null, arguments);
+  }
+
+  // This is done to register the method called with moment()
+  // without creating circular dependencies.
+  function setHookCallback(callback) {
+    hookCallback = callback;
+  }
+
+  function isArray(input) {
+    return (
+      input instanceof Array ||
+      Object.prototype.toString.call(input) === '[object Array]'
+    );
+  }
+
+  function isObject(input) {
+    // IE8 will treat undefined and null as object if it wasn't for
+    // input != null
+    return (
+      input != null &&
+      Object.prototype.toString.call(input) === '[object Object]'
+    );
+  }
+
+  function hasOwnProp(a, b) {
+    return Object.prototype.hasOwnProperty.call(a, b);
+  }
+
+  function isObjectEmpty(obj) {
+    if (Object.getOwnPropertyNames) {
+      return Object.getOwnPropertyNames(obj).length === 0;
+    } else {
+      var k;
+      for (k in obj) {
+        if (hasOwnProp(obj, k)) {
+          return false;
+        }
+      }
+      return true;
+    }
+  }
+
+  function isUndefined(input) {
+    return input === void 0;
+  }
+
+  function isNumber(input) {
+    return (
+      typeof input === 'number' ||
+      Object.prototype.toString.call(input) === '[object Number]'
+    );
+  }
+
+  function isDate(input) {
+    return (
+      input instanceof Date ||
+      Object.prototype.toString.call(input) === '[object Date]'
+    );
+  }
+
+  function map(arr, fn) {
+    var res = [],
+      i;
+    for (i = 0; i < arr.length; ++i) {
+      res.push(fn(arr[i], i));
+    }
+    return res;
+  }
+
+  function extend(a, b) {
+    for (var i in b) {
+      if (hasOwnProp(b, i)) {
+        a[i] = b[i];
+      }
+    }
+
+    if (hasOwnProp(b, 'toString')) {
+      a.toString = b.toString;
+    }
+
+    if (hasOwnProp(b, 'valueOf')) {
+      a.valueOf = b.valueOf;
+    }
+
+    return a;
+  }
+
+  function createUTC(input, format, locale, strict) {
+    return createLocalOrUTC(input, format, locale, strict, true).utc();
+  }
+
+  function defaultParsingFlags() {
+    // We need to deep clone this object.
+    return {
+      empty: false,
+      unusedTokens: [],
+      unusedInput: [],
+      overflow: -2,
+      charsLeftOver: 0,
+      nullInput: false,
+      invalidEra: null,
+      invalidMonth: null,
+      invalidFormat: false,
+      userInvalidated: false,
+      iso: false,
+      parsedDateParts: [],
+      era: null,
+      meridiem: null,
+      rfc2822: false,
+      weekdayMismatch: false,
+    };
+  }
+
+  function getParsingFlags(m) {
+    if (m._pf == null) {
+      m._pf = defaultParsingFlags();
+    }
+    return m._pf;
+  }
+
+  var some;
+  if (Array.prototype.some) {
+    some = Array.prototype.some;
+  } else {
+    some = function (fun) {
+      var t = Object(this),
+        len = t.length >>> 0,
+        i;
+
+      for (i = 0; i < len; i++) {
+        if (i in t && fun.call(this, t[i], i, t)) {
+          return true;
+        }
+      }
+
+      return false;
+    };
+  }
+
+  function isValid(m) {
+    if (m._isValid == null) {
+      var flags = getParsingFlags(m),
+        parsedParts = some.call(flags.parsedDateParts, function (i) {
+          return i != null;
+        }),
+        isNowValid =
+          !isNaN(m._d.getTime()) &&
+          flags.overflow < 0 &&
+          !flags.empty &&
+          !flags.invalidEra &&
+          !flags.invalidMonth &&
+          !flags.invalidWeekday &&
+          !flags.weekdayMismatch &&
+          !flags.nullInput &&
+          !flags.invalidFormat &&
+          !flags.userInvalidated &&
+          (!flags.meridiem || (flags.meridiem && parsedParts));
+
+      if (m._strict) {
+        isNowValid =
+          isNowValid &&
+          flags.charsLeftOver === 0 &&
+          flags.unusedTokens.length === 0 &&
+          flags.bigHour === undefined;
+      }
+
+      if (Object.isFrozen == null || !Object.isFrozen(m)) {
+        m._isValid = isNowValid;
+      } else {
+        return isNowValid;
+      }
+    }
+    return m._isValid;
+  }
+
+  function createInvalid(flags) {
+    var m = createUTC(NaN);
+    if (flags != null) {
+      extend(getParsingFlags(m), flags);
+    } else {
+      getParsingFlags(m).userInvalidated = true;
+    }
+
+    return m;
+  }
+
+  // Plugins that add properties should also add the key here (null value),
+  // so we can properly clone ourselves.
+  var momentProperties = (hooks.momentProperties = []),
+    updateInProgress = false;
+
+  function copyConfig(to, from) {
+    var i, prop, val;
+
+    if (!isUndefined(from._isAMomentObject)) {
+      to._isAMomentObject = from._isAMomentObject;
+    }
+    if (!isUndefined(from._i)) {
+      to._i = from._i;
+    }
+    if (!isUndefined(from._f)) {
+      to._f = from._f;
+    }
+    if (!isUndefined(from._l)) {
+      to._l = from._l;
+    }
+    if (!isUndefined(from._strict)) {
+      to._strict = from._strict;
+    }
+    if (!isUndefined(from._tzm)) {
+      to._tzm = from._tzm;
+    }
+    if (!isUndefined(from._isUTC)) {
+      to._isUTC = from._isUTC;
+    }
+    if (!isUndefined(from._offset)) {
+      to._offset = from._offset;
+    }
+    if (!isUndefined(from._pf)) {
+      to._pf = getParsingFlags(from);
+    }
+    if (!isUndefined(from._locale)) {
+      to._locale = from._locale;
+    }
+
+    if (momentProperties.length > 0) {
+      for (i = 0; i < momentProperties.length; i++) {
+        prop = momentProperties[i];
+        val = from[prop];
+        if (!isUndefined(val)) {
+          to[prop] = val;
+        }
+      }
+    }
+
+    return to;
+  }
+
+  // Moment prototype object
+  function Moment(config) {
+    copyConfig(this, config);
+    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
+    if (!this.isValid()) {
+      this._d = new Date(NaN);
+    }
+    // Prevent infinite loop in case updateOffset creates new moment
+    // objects.
+    if (updateInProgress === false) {
+      updateInProgress = true;
+      hooks.updateOffset(this);
+      updateInProgress = false;
+    }
+  }
+
+  function isMoment(obj) {
+    return (
+      obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
+    );
+  }
+
+  function warn(msg) {
+    if (
+      hooks.suppressDeprecationWarnings === false &&
+      typeof console !== 'undefined' &&
+      console.warn
+    ) {
+      console.warn('Deprecation warning: ' + msg);
+    }
+  }
+
+  function deprecate(msg, fn) {
+    var firstTime = true;
+
+    return extend(function () {
+      if (hooks.deprecationHandler != null) {
+        hooks.deprecationHandler(null, msg);
+      }
+      if (firstTime) {
+        var args = [],
+          arg,
+          i,
+          key;
+        for (i = 0; i < arguments.length; i++) {
+          arg = '';
+          if (typeof arguments[i] === 'object') {
+            arg += '\n[' + i + '] ';
+            for (key in arguments[0]) {
+              if (hasOwnProp(arguments[0], key)) {
+                arg += key + ': ' + arguments[0][key] + ', ';
+              }
+            }
+            arg = arg.slice(0, -2); // Remove trailing comma and space
+          } else {
+            arg = arguments[i];
+          }
+          args.push(arg);
+        }
+        warn(
+          msg +
+          '\nArguments: ' +
+          Array.prototype.slice.call(args).join('') +
+          '\n' +
+          new Error().stack
+        );
+        firstTime = false;
+      }
+      return fn.apply(this, arguments);
+    }, fn);
+  }
+
+  var deprecations = {};
+
+  function deprecateSimple(name, msg) {
+    if (hooks.deprecationHandler != null) {
+      hooks.deprecationHandler(name, msg);
+    }
+    if (!deprecations[name]) {
+      warn(msg);
+      deprecations[name] = true;
+    }
+  }
+
+  hooks.suppressDeprecationWarnings = false;
+  hooks.deprecationHandler = null;
+
+  function isFunction(input) {
+    return (
+      (typeof Function !== 'undefined' && input instanceof Function) ||
+      Object.prototype.toString.call(input) === '[object Function]'
+    );
+  }
+
+  function set(config) {
+    var prop, i;
+    for (i in config) {
+      if (hasOwnProp(config, i)) {
+        prop = config[i];
+        if (isFunction(prop)) {
+          this[i] = prop;
+        } else {
+          this['_' + i] = prop;
+        }
+      }
+    }
+    this._config = config;
+    // Lenient ordinal parsing accepts just a number in addition to
+    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
+    // TODO: Remove "ordinalParse" fallback in next major release.
+    this._dayOfMonthOrdinalParseLenient = new RegExp(
+      (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
+      '|' +
+      /\d{1,2}/.source
+    );
+  }
+
+  function mergeConfigs(parentConfig, childConfig) {
+    var res = extend({}, parentConfig),
+      prop;
+    for (prop in childConfig) {
+      if (hasOwnProp(childConfig, prop)) {
+        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
+          res[prop] = {};
+          extend(res[prop], parentConfig[prop]);
+          extend(res[prop], childConfig[prop]);
+        } else if (childConfig[prop] != null) {
+          res[prop] = childConfig[prop];
+        } else {
+          delete res[prop];
+        }
+      }
+    }
+    for (prop in parentConfig) {
+      if (
+        hasOwnProp(parentConfig, prop) &&
+        !hasOwnProp(childConfig, prop) &&
+        isObject(parentConfig[prop])
+      ) {
+        // make sure changes to properties don't modify parent config
+        res[prop] = extend({}, res[prop]);
+      }
+    }
+    return res;
+  }
+
+  function Locale(config) {
+    if (config != null) {
+      this.set(config);
+    }
+  }
+
+  var keys;
+
+  if (Object.keys) {
+    keys = Object.keys;
+  } else {
+    keys = function (obj) {
+      var i,
+        res = [];
+      for (i in obj) {
+        if (hasOwnProp(obj, i)) {
+          res.push(i);
+        }
+      }
+      return res;
+    };
+  }
+
+  var defaultCalendar = {
+    sameDay: '[Today at] LT',
+    nextDay: '[Tomorrow at] LT',
+    nextWeek: 'dddd [at] LT',
+    lastDay: '[Yesterday at] LT',
+    lastWeek: '[Last] dddd [at] LT',
+    sameElse: 'L',
+  };
+
+  function calendar(key, mom, now) {
+    var output = this._calendar[key] || this._calendar['sameElse'];
+    return isFunction(output) ? output.call(mom, now) : output;
+  }
+
+  function zeroFill(number, targetLength, forceSign) {
+    var absNumber = '' + Math.abs(number),
+      zerosToFill = targetLength - absNumber.length,
+      sign = number >= 0;
+    return (
+      (sign ? (forceSign ? '+' : '') : '-') +
+      Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
+      absNumber
+    );
+  }
+
+  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
+    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
+    formatFunctions = {},
+    formatTokenFunctions = {};
+
+  // token:    'M'
+  // padded:   ['MM', 2]
+  // ordinal:  'Mo'
+  // callback: function () { this.month() + 1 }
+  function addFormatToken(token, padded, ordinal, callback) {
+    var func = callback;
+    if (typeof callback === 'string') {
+      func = function () {
+        return this[callback]();
+      };
+    }
+    if (token) {
+      formatTokenFunctions[token] = func;
+    }
+    if (padded) {
+      formatTokenFunctions[padded[0]] = function () {
+        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
+      };
+    }
+    if (ordinal) {
+      formatTokenFunctions[ordinal] = function () {
+        return this.localeData().ordinal(
+          func.apply(this, arguments),
+          token
+        );
+      };
+    }
+  }
+
+  function removeFormattingTokens(input) {
+    if (input.match(/\[[\s\S]/)) {
+      return input.replace(/^\[|\]$/g, '');
+    }
+    return input.replace(/\\/g, '');
+  }
+
+  function makeFormatFunction(format) {
+    var array = format.match(formattingTokens),
+      i,
+      length;
+
+    for (i = 0, length = array.length; i < length; i++) {
+      if (formatTokenFunctions[array[i]]) {
+        array[i] = formatTokenFunctions[array[i]];
+      } else {
+        array[i] = removeFormattingTokens(array[i]);
+      }
+    }
+
+    return function (mom) {
+      var output = '',
+        i;
+      for (i = 0; i < length; i++) {
+        output += isFunction(array[i])
+          ? array[i].call(mom, format)
+          : array[i];
+      }
+      return output;
+    };
+  }
+
+  // format date using native date object
+  function formatMoment(m, format) {
+    if (!m.isValid()) {
+      return m.localeData().invalidDate();
+    }
+
+    format = expandFormat(format, m.localeData());
+    formatFunctions[format] =
+      formatFunctions[format] || makeFormatFunction(format);
+
+    return formatFunctions[format](m);
+  }
+
+  function expandFormat(format, locale) {
+    var i = 5;
+
+    function replaceLongDateFormatTokens(input) {
+      return locale.longDateFormat(input) || input;
+    }
+
+    localFormattingTokens.lastIndex = 0;
+    while (i >= 0 && localFormattingTokens.test(format)) {
+      format = format.replace(
+        localFormattingTokens,
+        replaceLongDateFormatTokens
+      );
+      localFormattingTokens.lastIndex = 0;
+      i -= 1;
+    }
+
+    return format;
+  }
+
+  var defaultLongDateFormat = {
+    LTS: 'h:mm:ss A',
+    LT: 'h:mm A',
+    L: 'MM/DD/YYYY',
+    LL: 'MMMM D, YYYY',
+    LLL: 'MMMM D, YYYY h:mm A',
+    LLLL: 'dddd, MMMM D, YYYY h:mm A',
+  };
+
+  function longDateFormat(key) {
+    var format = this._longDateFormat[key],
+      formatUpper = this._longDateFormat[key.toUpperCase()];
+
+    if (format || !formatUpper) {
+      return format;
+    }
+
+    this._longDateFormat[key] = formatUpper
+      .match(formattingTokens)
+      .map(function (tok) {
+        if (
+          tok === 'MMMM' ||
+          tok === 'MM' ||
+          tok === 'DD' ||
+          tok === 'dddd'
+        ) {
+          return tok.slice(1);
+        }
+        return tok;
+      })
+      .join('');
+
+    return this._longDateFormat[key];
+  }
+
+  var defaultInvalidDate = 'Invalid date';
+
+  function invalidDate() {
+    return this._invalidDate;
+  }
+
+  var defaultOrdinal = '%d',
+    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
+
+  function ordinal(number) {
+    return this._ordinal.replace('%d', number);
+  }
+
+  var defaultRelativeTime = {
+    future: 'in %s',
+    past: '%s ago',
+    s: 'a few seconds',
+    ss: '%d seconds',
+    m: 'a minute',
+    mm: '%d minutes',
+    h: 'an hour',
+    hh: '%d hours',
+    d: 'a day',
+    dd: '%d days',
+    w: 'a week',
+    ww: '%d weeks',
+    M: 'a month',
+    MM: '%d months',
+    y: 'a year',
+    yy: '%d years',
+  };
+
+  function relativeTime(number, withoutSuffix, string, isFuture) {
+    var output = this._relativeTime[string];
+    return isFunction(output)
+      ? output(number, withoutSuffix, string, isFuture)
+      : output.replace(/%d/i, number);
+  }
+
+  function pastFuture(diff, output) {
+    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
+    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
+  }
+
+  var aliases = {};
+
+  function addUnitAlias(unit, shorthand) {
+    var lowerCase = unit.toLowerCase();
+    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
+  }
+
+  function normalizeUnits(units) {
+    return typeof units === 'string'
+      ? aliases[units] || aliases[units.toLowerCase()]
+      : undefined;
+  }
+
+  function normalizeObjectUnits(inputObject) {
+    var normalizedInput = {},
+      normalizedProp,
+      prop;
+
+    for (prop in inputObject) {
+      if (hasOwnProp(inputObject, prop)) {
+        normalizedProp = normalizeUnits(prop);
+        if (normalizedProp) {
+          normalizedInput[normalizedProp] = inputObject[prop];
+        }
+      }
+    }
+
+    return normalizedInput;
+  }
+
+  var priorities = {};
+
+  function addUnitPriority(unit, priority) {
+    priorities[unit] = priority;
+  }
+
+  function getPrioritizedUnits(unitsObj) {
+    var units = [],
+      u;
+    for (u in unitsObj) {
+      if (hasOwnProp(unitsObj, u)) {
+        units.push({ unit: u, priority: priorities[u] });
+      }
+    }
+    units.sort(function (a, b) {
+      return a.priority - b.priority;
+    });
+    return units;
+  }
+
+  function isLeapYear(year) {
+    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
+  }
+
+  function absFloor(number) {
+    if (number < 0) {
+      // -0 -> 0
+      return Math.ceil(number) || 0;
+    } else {
+      return Math.floor(number);
+    }
+  }
+
+  function toInt(argumentForCoercion) {
+    var coercedNumber = +argumentForCoercion,
+      value = 0;
+
+    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
+      value = absFloor(coercedNumber);
+    }
+
+    return value;
+  }
+
+  function makeGetSet(unit, keepTime) {
+    return function (value) {
+      if (value != null) {
+        set$1(this, unit, value);
+        hooks.updateOffset(this, keepTime);
+        return this;
+      } else {
+        return get(this, unit);
+      }
+    };
+  }
+
+  function get(mom, unit) {
+    return mom.isValid()
+      ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
+      : NaN;
+  }
+
+  function set$1(mom, unit, value) {
+    if (mom.isValid() && !isNaN(value)) {
+      if (
+        unit === 'FullYear' &&
+        isLeapYear(mom.year()) &&
+        mom.month() === 1 &&
+        mom.date() === 29
+      ) {
+        value = toInt(value);
+        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
+          value,
+          mom.month(),
+          daysInMonth(value, mom.month())
+        );
+      } else {
+        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
+      }
+    }
+  }
+
+  // MOMENTS
+
+  function stringGet(units) {
+    units = normalizeUnits(units);
+    if (isFunction(this[units])) {
+      return this[units]();
+    }
+    return this;
+  }
+
+  function stringSet(units, value) {
+    if (typeof units === 'object') {
+      units = normalizeObjectUnits(units);
+      var prioritized = getPrioritizedUnits(units),
+        i;
+      for (i = 0; i < prioritized.length; i++) {
+        this[prioritized[i].unit](units[prioritized[i].unit]);
+      }
+    } else {
+      units = normalizeUnits(units);
+      if (isFunction(this[units])) {
+        return this[units](value);
+      }
+    }
+    return this;
+  }
+
+  var match1 = /\d/, //       0 - 9
+    match2 = /\d\d/, //      00 - 99
+    match3 = /\d{3}/, //     000 - 999
+    match4 = /\d{4}/, //    0000 - 9999
+    match6 = /[+-]?\d{6}/, // -999999 - 999999
+    match1to2 = /\d\d?/, //       0 - 99
+    match3to4 = /\d\d\d\d?/, //     999 - 9999
+    match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
+    match1to3 = /\d{1,3}/, //       0 - 999
+    match1to4 = /\d{1,4}/, //       0 - 9999
+    match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
+    matchUnsigned = /\d+/, //       0 - inf
+    matchSigned = /[+-]?\d+/, //    -inf - inf
+    matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
+    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
+    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
+    // any word (or two) characters or numbers including two/three word month in arabic.
+    // includes scottish gaelic two word and hyphenated months
+    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
+    regexes;
+
+  regexes = {};
+
+  function addRegexToken(token, regex, strictRegex) {
+    regexes[token] = isFunction(regex)
+      ? regex
+      : function (isStrict, localeData) {
+        return isStrict && strictRegex ? strictRegex : regex;
+      };
+  }
+
+  function getParseRegexForToken(token, config) {
+    if (!hasOwnProp(regexes, token)) {
+      return new RegExp(unescapeFormat(token));
+    }
+
+    return regexes[token](config._strict, config._locale);
+  }
+
+  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
+  function unescapeFormat(s) {
+    return regexEscape(
+      s
+        .replace('\\', '')
+        .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
+          matched,
+          p1,
+          p2,
+          p3,
+          p4
+        ) {
+          return p1 || p2 || p3 || p4;
+        })
+    );
+  }
+
+  function regexEscape(s) {
+    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
+  }
+
+  var tokens = {};
+
+  function addParseToken(token, callback) {
+    var i,
+      func = callback;
+    if (typeof token === 'string') {
+      token = [token];
+    }
+    if (isNumber(callback)) {
+      func = function (input, array) {
+        array[callback] = toInt(input);
+      };
+    }
+    for (i = 0; i < token.length; i++) {
+      tokens[token[i]] = func;
+    }
+  }
+
+  function addWeekParseToken(token, callback) {
+    addParseToken(token, function (input, array, config, token) {
+      config._w = config._w || {};
+      callback(input, config._w, config, token);
+    });
+  }
+
+  function addTimeToArrayFromToken(token, input, config) {
+    if (input != null && hasOwnProp(tokens, token)) {
+      tokens[token](input, config._a, config, token);
+    }
+  }
+
+  var YEAR = 0,
+    MONTH = 1,
+    DATE = 2,
+    HOUR = 3,
+    MINUTE = 4,
+    SECOND = 5,
+    MILLISECOND = 6,
+    WEEK = 7,
+    WEEKDAY = 8;
+
+  function mod(n, x) {
+    return ((n % x) + x) % x;
+  }
+
+  var indexOf;
+
+  if (Array.prototype.indexOf) {
+    indexOf = Array.prototype.indexOf;
+  } else {
+    indexOf = function (o) {
+      // I know
+      var i;
+      for (i = 0; i < this.length; ++i) {
+        if (this[i] === o) {
+          return i;
+        }
+      }
+      return -1;
+    };
+  }
+
+  function daysInMonth(year, month) {
+    if (isNaN(year) || isNaN(month)) {
+      return NaN;
+    }
+    var modMonth = mod(month, 12);
+    year += (month - modMonth) / 12;
+    return modMonth === 1
+      ? isLeapYear(year)
+        ? 29
+        : 28
+      : 31 - ((modMonth % 7) % 2);
+  }
+
+  // FORMATTING
+
+  addFormatToken('M', ['MM', 2], 'Mo', function () {
+    return this.month() + 1;
+  });
+
+  addFormatToken('MMM', 0, 0, function (format) {
+    return this.localeData().monthsShort(this, format);
+  });
+
+  addFormatToken('MMMM', 0, 0, function (format) {
+    return this.localeData().months(this, format);
+  });
+
+  // ALIASES
+
+  addUnitAlias('month', 'M');
+
+  // PRIORITY
+
+  addUnitPriority('month', 8);
+
+  // PARSING
+
+  addRegexToken('M', match1to2);
+  addRegexToken('MM', match1to2, match2);
+  addRegexToken('MMM', function (isStrict, locale) {
+    return locale.monthsShortRegex(isStrict);
+  });
+  addRegexToken('MMMM', function (isStrict, locale) {
+    return locale.monthsRegex(isStrict);
+  });
+
+  addParseToken(['M', 'MM'], function (input, array) {
+    array[MONTH] = toInt(input) - 1;
+  });
+
+  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
+    var month = config._locale.monthsParse(input, token, config._strict);
+    // if we didn't find a month name, mark the date as invalid.
+    if (month != null) {
+      array[MONTH] = month;
+    } else {
+      getParsingFlags(config).invalidMonth = input;
+    }
+  });
+
+  // LOCALES
+
+  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
+    '_'
+    ),
+    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
+      '_'
+    ),
+    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
+    defaultMonthsShortRegex = matchWord,
+    defaultMonthsRegex = matchWord;
+
+  function localeMonths(m, format) {
+    if (!m) {
+      return isArray(this._months)
+        ? this._months
+        : this._months['standalone'];
+    }
+    return isArray(this._months)
+      ? this._months[m.month()]
+      : this._months[
+        (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
+          ? 'format'
+          : 'standalone'
+        ][m.month()];
+  }
+
+  function localeMonthsShort(m, format) {
+    if (!m) {
+      return isArray(this._monthsShort)
+        ? this._monthsShort
+        : this._monthsShort['standalone'];
+    }
+    return isArray(this._monthsShort)
+      ? this._monthsShort[m.month()]
+      : this._monthsShort[
+        MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
+        ][m.month()];
+  }
+
+  function handleStrictParse(monthName, format, strict) {
+    var i,
+      ii,
+      mom,
+      llc = monthName.toLocaleLowerCase();
+    if (!this._monthsParse) {
+      // this is not used
+      this._monthsParse = [];
+      this._longMonthsParse = [];
+      this._shortMonthsParse = [];
+      for (i = 0; i < 12; ++i) {
+        mom = createUTC([2000, i]);
+        this._shortMonthsParse[i] = this.monthsShort(
+          mom,
+          ''
+        ).toLocaleLowerCase();
+        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
+      }
+    }
+
+    if (strict) {
+      if (format === 'MMM') {
+        ii = indexOf.call(this._shortMonthsParse, llc);
+        return ii !== -1 ? ii : null;
+      } else {
+        ii = indexOf.call(this._longMonthsParse, llc);
+        return ii !== -1 ? ii : null;
+      }
+    } else {
+      if (format === 'MMM') {
+        ii = indexOf.call(this._shortMonthsParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._longMonthsParse, llc);
+        return ii !== -1 ? ii : null;
+      } else {
+        ii = indexOf.call(this._longMonthsParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._shortMonthsParse, llc);
+        return ii !== -1 ? ii : null;
+      }
+    }
+  }
+
+  function localeMonthsParse(monthName, format, strict) {
+    var i, mom, regex;
+
+    if (this._monthsParseExact) {
+      return handleStrictParse.call(this, monthName, format, strict);
+    }
+
+    if (!this._monthsParse) {
+      this._monthsParse = [];
+      this._longMonthsParse = [];
+      this._shortMonthsParse = [];
+    }
+
+    // TODO: add sorting
+    // Sorting makes sure if one month (or abbr) is a prefix of another
+    // see sorting in computeMonthsParse
+    for (i = 0; i < 12; i++) {
+      // make the regex if we don't have it already
+      mom = createUTC([2000, i]);
+      if (strict && !this._longMonthsParse[i]) {
+        this._longMonthsParse[i] = new RegExp(
+          '^' + this.months(mom, '').replace('.', '') + '$',
+          'i'
+        );
+        this._shortMonthsParse[i] = new RegExp(
+          '^' + this.monthsShort(mom, '').replace('.', '') + '$',
+          'i'
+        );
+      }
+      if (!strict && !this._monthsParse[i]) {
+        regex =
+          '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
+        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
+      }
+      // test the regex
+      if (
+        strict &&
+        format === 'MMMM' &&
+        this._longMonthsParse[i].test(monthName)
+      ) {
+        return i;
+      } else if (
+        strict &&
+        format === 'MMM' &&
+        this._shortMonthsParse[i].test(monthName)
+      ) {
+        return i;
+      } else if (!strict && this._monthsParse[i].test(monthName)) {
+        return i;
+      }
+    }
+  }
+
+  // MOMENTS
+
+  function setMonth(mom, value) {
+    var dayOfMonth;
+
+    if (!mom.isValid()) {
+      // No op
+      return mom;
+    }
+
+    if (typeof value === 'string') {
+      if (/^\d+$/.test(value)) {
+        value = toInt(value);
+      } else {
+        value = mom.localeData().monthsParse(value);
+        // TODO: Another silent failure?
+        if (!isNumber(value)) {
+          return mom;
+        }
+      }
+    }
+
+    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
+    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
+    return mom;
+  }
+
+  function getSetMonth(value) {
+    if (value != null) {
+      setMonth(this, value);
+      hooks.updateOffset(this, true);
+      return this;
+    } else {
+      return get(this, 'Month');
+    }
+  }
+
+  function getDaysInMonth() {
+    return daysInMonth(this.year(), this.month());
+  }
+
+  function monthsShortRegex(isStrict) {
+    if (this._monthsParseExact) {
+      if (!hasOwnProp(this, '_monthsRegex')) {
+        computeMonthsParse.call(this);
+      }
+      if (isStrict) {
+        return this._monthsShortStrictRegex;
+      } else {
+        return this._monthsShortRegex;
+      }
+    } else {
+      if (!hasOwnProp(this, '_monthsShortRegex')) {
+        this._monthsShortRegex = defaultMonthsShortRegex;
+      }
+      return this._monthsShortStrictRegex && isStrict
+        ? this._monthsShortStrictRegex
+        : this._monthsShortRegex;
+    }
+  }
+
+  function monthsRegex(isStrict) {
+    if (this._monthsParseExact) {
+      if (!hasOwnProp(this, '_monthsRegex')) {
+        computeMonthsParse.call(this);
+      }
+      if (isStrict) {
+        return this._monthsStrictRegex;
+      } else {
+        return this._monthsRegex;
+      }
+    } else {
+      if (!hasOwnProp(this, '_monthsRegex')) {
+        this._monthsRegex = defaultMonthsRegex;
+      }
+      return this._monthsStrictRegex && isStrict
+        ? this._monthsStrictRegex
+        : this._monthsRegex;
+    }
+  }
+
+  function computeMonthsParse() {
+    function cmpLenRev(a, b) {
+      return b.length - a.length;
+    }
+
+    var shortPieces = [],
+      longPieces = [],
+      mixedPieces = [],
+      i,
+      mom;
+    for (i = 0; i < 12; i++) {
+      // make the regex if we don't have it already
+      mom = createUTC([2000, i]);
+      shortPieces.push(this.monthsShort(mom, ''));
+      longPieces.push(this.months(mom, ''));
+      mixedPieces.push(this.months(mom, ''));
+      mixedPieces.push(this.monthsShort(mom, ''));
+    }
+    // Sorting makes sure if one month (or abbr) is a prefix of another it
+    // will match the longer piece.
+    shortPieces.sort(cmpLenRev);
+    longPieces.sort(cmpLenRev);
+    mixedPieces.sort(cmpLenRev);
+    for (i = 0; i < 12; i++) {
+      shortPieces[i] = regexEscape(shortPieces[i]);
+      longPieces[i] = regexEscape(longPieces[i]);
+    }
+    for (i = 0; i < 24; i++) {
+      mixedPieces[i] = regexEscape(mixedPieces[i]);
+    }
+
+    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
+    this._monthsShortRegex = this._monthsRegex;
+    this._monthsStrictRegex = new RegExp(
+      '^(' + longPieces.join('|') + ')',
+      'i'
+    );
+    this._monthsShortStrictRegex = new RegExp(
+      '^(' + shortPieces.join('|') + ')',
+      'i'
+    );
+  }
+
+  // FORMATTING
+
+  addFormatToken('Y', 0, 0, function () {
+    var y = this.year();
+    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
+  });
+
+  addFormatToken(0, ['YY', 2], 0, function () {
+    return this.year() % 100;
+  });
+
+  addFormatToken(0, ['YYYY', 4], 0, 'year');
+  addFormatToken(0, ['YYYYY', 5], 0, 'year');
+  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
+
+  // ALIASES
+
+  addUnitAlias('year', 'y');
+
+  // PRIORITIES
+
+  addUnitPriority('year', 1);
+
+  // PARSING
+
+  addRegexToken('Y', matchSigned);
+  addRegexToken('YY', match1to2, match2);
+  addRegexToken('YYYY', match1to4, match4);
+  addRegexToken('YYYYY', match1to6, match6);
+  addRegexToken('YYYYYY', match1to6, match6);
+
+  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
+  addParseToken('YYYY', function (input, array) {
+    array[YEAR] =
+      input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
+  });
+  addParseToken('YY', function (input, array) {
+    array[YEAR] = hooks.parseTwoDigitYear(input);
+  });
+  addParseToken('Y', function (input, array) {
+    array[YEAR] = parseInt(input, 10);
+  });
+
+  // HELPERS
+
+  function daysInYear(year) {
+    return isLeapYear(year) ? 366 : 365;
+  }
+
+  // HOOKS
+
+  hooks.parseTwoDigitYear = function (input) {
+    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
+  };
+
+  // MOMENTS
+
+  var getSetYear = makeGetSet('FullYear', true);
+
+  function getIsLeapYear() {
+    return isLeapYear(this.year());
+  }
+
+  function createDate(y, m, d, h, M, s, ms) {
+    // can't just apply() to create a date:
+    // https://stackoverflow.com/q/181348
+    var date;
+    // the date constructor remaps years 0-99 to 1900-1999
+    if (y < 100 && y >= 0) {
+      // preserve leap years using a full 400 year cycle, then reset
+      date = new Date(y + 400, m, d, h, M, s, ms);
+      if (isFinite(date.getFullYear())) {
+        date.setFullYear(y);
+      }
+    } else {
+      date = new Date(y, m, d, h, M, s, ms);
+    }
+
+    return date;
+  }
+
+  function createUTCDate(y) {
+    var date, args;
+    // the Date.UTC function remaps years 0-99 to 1900-1999
+    if (y < 100 && y >= 0) {
+      args = Array.prototype.slice.call(arguments);
+      // preserve leap years using a full 400 year cycle, then reset
+      args[0] = y + 400;
+      date = new Date(Date.UTC.apply(null, args));
+      if (isFinite(date.getUTCFullYear())) {
+        date.setUTCFullYear(y);
+      }
+    } else {
+      date = new Date(Date.UTC.apply(null, arguments));
+    }
+
+    return date;
+  }
+
+  // start-of-first-week - start-of-year
+  function firstWeekOffset(year, dow, doy) {
+    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
+      fwd = 7 + dow - doy,
+      // first-week day local weekday -- which local weekday is fwd
+      fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
+
+    return -fwdlw + fwd - 1;
+  }
+
+  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
+  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
+    var localWeekday = (7 + weekday - dow) % 7,
+      weekOffset = firstWeekOffset(year, dow, doy),
+      dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
+      resYear,
+      resDayOfYear;
+
+    if (dayOfYear <= 0) {
+      resYear = year - 1;
+      resDayOfYear = daysInYear(resYear) + dayOfYear;
+    } else if (dayOfYear > daysInYear(year)) {
+      resYear = year + 1;
+      resDayOfYear = dayOfYear - daysInYear(year);
+    } else {
+      resYear = year;
+      resDayOfYear = dayOfYear;
+    }
+
+    return {
+      year: resYear,
+      dayOfYear: resDayOfYear,
+    };
+  }
+
+  function weekOfYear(mom, dow, doy) {
+    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
+      week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
+      resWeek,
+      resYear;
+
+    if (week < 1) {
+      resYear = mom.year() - 1;
+      resWeek = week + weeksInYear(resYear, dow, doy);
+    } else if (week > weeksInYear(mom.year(), dow, doy)) {
+      resWeek = week - weeksInYear(mom.year(), dow, doy);
+      resYear = mom.year() + 1;
+    } else {
+      resYear = mom.year();
+      resWeek = week;
+    }
+
+    return {
+      week: resWeek,
+      year: resYear,
+    };
+  }
+
+  function weeksInYear(year, dow, doy) {
+    var weekOffset = firstWeekOffset(year, dow, doy),
+      weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
+    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
+  }
+
+  // FORMATTING
+
+  addFormatToken('w', ['ww', 2], 'wo', 'week');
+  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
+
+  // ALIASES
+
+  addUnitAlias('week', 'w');
+  addUnitAlias('isoWeek', 'W');
+
+  // PRIORITIES
+
+  addUnitPriority('week', 5);
+  addUnitPriority('isoWeek', 5);
+
+  // PARSING
+
+  addRegexToken('w', match1to2);
+  addRegexToken('ww', match1to2, match2);
+  addRegexToken('W', match1to2);
+  addRegexToken('WW', match1to2, match2);
+
+  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
+    input,
+    week,
+    config,
+    token
+  ) {
+    week[token.substr(0, 1)] = toInt(input);
+  });
+
+  // HELPERS
+
+  // LOCALES
+
+  function localeWeek(mom) {
+    return weekOfYear(mom, this._week.dow, this._week.doy).week;
+  }
+
+  var defaultLocaleWeek = {
+    dow: 0, // Sunday is the first day of the week.
+    doy: 6, // The week that contains Jan 6th is the first week of the year.
+  };
+
+  function localeFirstDayOfWeek() {
+    return this._week.dow;
+  }
+
+  function localeFirstDayOfYear() {
+    return this._week.doy;
+  }
+
+  // MOMENTS
+
+  function getSetWeek(input) {
+    var week = this.localeData().week(this);
+    return input == null ? week : this.add((input - week) * 7, 'd');
+  }
+
+  function getSetISOWeek(input) {
+    var week = weekOfYear(this, 1, 4).week;
+    return input == null ? week : this.add((input - week) * 7, 'd');
+  }
+
+  // FORMATTING
+
+  addFormatToken('d', 0, 'do', 'day');
+
+  addFormatToken('dd', 0, 0, function (format) {
+    return this.localeData().weekdaysMin(this, format);
+  });
+
+  addFormatToken('ddd', 0, 0, function (format) {
+    return this.localeData().weekdaysShort(this, format);
+  });
+
+  addFormatToken('dddd', 0, 0, function (format) {
+    return this.localeData().weekdays(this, format);
+  });
+
+  addFormatToken('e', 0, 0, 'weekday');
+  addFormatToken('E', 0, 0, 'isoWeekday');
+
+  // ALIASES
+
+  addUnitAlias('day', 'd');
+  addUnitAlias('weekday', 'e');
+  addUnitAlias('isoWeekday', 'E');
+
+  // PRIORITY
+  addUnitPriority('day', 11);
+  addUnitPriority('weekday', 11);
+  addUnitPriority('isoWeekday', 11);
+
+  // PARSING
+
+  addRegexToken('d', match1to2);
+  addRegexToken('e', match1to2);
+  addRegexToken('E', match1to2);
+  addRegexToken('dd', function (isStrict, locale) {
+    return locale.weekdaysMinRegex(isStrict);
+  });
+  addRegexToken('ddd', function (isStrict, locale) {
+    return locale.weekdaysShortRegex(isStrict);
+  });
+  addRegexToken('dddd', function (isStrict, locale) {
+    return locale.weekdaysRegex(isStrict);
+  });
+
+  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
+    var weekday = config._locale.weekdaysParse(input, token, config._strict);
+    // if we didn't get a weekday name, mark the date as invalid
+    if (weekday != null) {
+      week.d = weekday;
+    } else {
+      getParsingFlags(config).invalidWeekday = input;
+    }
+  });
+
+  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
+    week[token] = toInt(input);
+  });
+
+  // HELPERS
+
+  function parseWeekday(input, locale) {
+    if (typeof input !== 'string') {
+      return input;
+    }
+
+    if (!isNaN(input)) {
+      return parseInt(input, 10);
+    }
+
+    input = locale.weekdaysParse(input);
+    if (typeof input === 'number') {
+      return input;
+    }
+
+    return null;
+  }
+
+  function parseIsoWeekday(input, locale) {
+    if (typeof input === 'string') {
+      return locale.weekdaysParse(input) % 7 || 7;
+    }
+    return isNaN(input) ? null : input;
+  }
+
+  // LOCALES
+  function shiftWeekdays(ws, n) {
+    return ws.slice(n, 7).concat(ws.slice(0, n));
+  }
+
+  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
+    '_'
+    ),
+    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
+    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
+    defaultWeekdaysRegex = matchWord,
+    defaultWeekdaysShortRegex = matchWord,
+    defaultWeekdaysMinRegex = matchWord;
+
+  function localeWeekdays(m, format) {
+    var weekdays = isArray(this._weekdays)
+      ? this._weekdays
+      : this._weekdays[
+        m && m !== true && this._weekdays.isFormat.test(format)
+          ? 'format'
+          : 'standalone'
+        ];
+    return m === true
+      ? shiftWeekdays(weekdays, this._week.dow)
+      : m
+        ? weekdays[m.day()]
+        : weekdays;
+  }
+
+  function localeWeekdaysShort(m) {
+    return m === true
+      ? shiftWeekdays(this._weekdaysShort, this._week.dow)
+      : m
+        ? this._weekdaysShort[m.day()]
+        : this._weekdaysShort;
+  }
+
+  function localeWeekdaysMin(m) {
+    return m === true
+      ? shiftWeekdays(this._weekdaysMin, this._week.dow)
+      : m
+        ? this._weekdaysMin[m.day()]
+        : this._weekdaysMin;
+  }
+
+  function handleStrictParse$1(weekdayName, format, strict) {
+    var i,
+      ii,
+      mom,
+      llc = weekdayName.toLocaleLowerCase();
+    if (!this._weekdaysParse) {
+      this._weekdaysParse = [];
+      this._shortWeekdaysParse = [];
+      this._minWeekdaysParse = [];
+
+      for (i = 0; i < 7; ++i) {
+        mom = createUTC([2000, 1]).day(i);
+        this._minWeekdaysParse[i] = this.weekdaysMin(
+          mom,
+          ''
+        ).toLocaleLowerCase();
+        this._shortWeekdaysParse[i] = this.weekdaysShort(
+          mom,
+          ''
+        ).toLocaleLowerCase();
+        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
+      }
+    }
+
+    if (strict) {
+      if (format === 'dddd') {
+        ii = indexOf.call(this._weekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      } else if (format === 'ddd') {
+        ii = indexOf.call(this._shortWeekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      } else {
+        ii = indexOf.call(this._minWeekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      }
+    } else {
+      if (format === 'dddd') {
+        ii = indexOf.call(this._weekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._shortWeekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._minWeekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      } else if (format === 'ddd') {
+        ii = indexOf.call(this._shortWeekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._weekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._minWeekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      } else {
+        ii = indexOf.call(this._minWeekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._weekdaysParse, llc);
+        if (ii !== -1) {
+          return ii;
+        }
+        ii = indexOf.call(this._shortWeekdaysParse, llc);
+        return ii !== -1 ? ii : null;
+      }
+    }
+  }
+
+  function localeWeekdaysParse(weekdayName, format, strict) {
+    var i, mom, regex;
+
+    if (this._weekdaysParseExact) {
+      return handleStrictParse$1.call(this, weekdayName, format, strict);
+    }
+
+    if (!this._weekdaysParse) {
+      this._weekdaysParse = [];
+      this._minWeekdaysParse = [];
+      this._shortWeekdaysParse = [];
+      this._fullWeekdaysParse = [];
+    }
+
+    for (i = 0; i < 7; i++) {
+      // make the regex if we don't have it already
+
+      mom = createUTC([2000, 1]).day(i);
+      if (strict && !this._fullWeekdaysParse[i]) {
+        this._fullWeekdaysParse[i] = new RegExp(
+          '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
+          'i'
+        );
+        this._shortWeekdaysParse[i] = new RegExp(
+          '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
+          'i'
+        );
+        this._minWeekdaysParse[i] = new RegExp(
+          '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
+          'i'
+        );
+      }
+      if (!this._weekdaysParse[i]) {
+        regex =
+          '^' +
+          this.weekdays(mom, '') +
+          '|^' +
+          this.weekdaysShort(mom, '') +
+          '|^' +
+          this.weekdaysMin(mom, '');
+        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
+      }
+      // test the regex
+      if (
+        strict &&
+        format === 'dddd' &&
+        this._fullWeekdaysParse[i].test(weekdayName)
+      ) {
+        return i;
+      } else if (
+        strict &&
+        format === 'ddd' &&
+        this._shortWeekdaysParse[i].test(weekdayName)
+      ) {
+        return i;
+      } else if (
+        strict &&
+        format === 'dd' &&
+        this._minWeekdaysParse[i].test(weekdayName)
+      ) {
+        return i;
+      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
+        return i;
+      }
+    }
+  }
+
+  // MOMENTS
+
+  function getSetDayOfWeek(input) {
+    if (!this.isValid()) {
+      return input != null ? this : NaN;
+    }
+    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
+    if (input != null) {
+      input = parseWeekday(input, this.localeData());
+      return this.add(input - day, 'd');
+    } else {
+      return day;
+    }
+  }
+
+  function getSetLocaleDayOfWeek(input) {
+    if (!this.isValid()) {
+      return input != null ? this : NaN;
+    }
+    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
+    return input == null ? weekday : this.add(input - weekday, 'd');
+  }
+
+  function getSetISODayOfWeek(input) {
+    if (!this.isValid()) {
+      return input != null ? this : NaN;
+    }
+
+    // behaves the same as moment#day except
+    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
+    // as a setter, sunday should belong to the previous week.
+
+    if (input != null) {
+      var weekday = parseIsoWeekday(input, this.localeData());
+      return this.day(this.day() % 7 ? weekday : weekday - 7);
+    } else {
+      return this.day() || 7;
+    }
+  }
+
+  function weekdaysRegex(isStrict) {
+    if (this._weekdaysParseExact) {
+      if (!hasOwnProp(this, '_weekdaysRegex')) {
+        computeWeekdaysParse.call(this);
+      }
+      if (isStrict) {
+        return this._weekdaysStrictRegex;
+      } else {
+        return this._weekdaysRegex;
+      }
+    } else {
+      if (!hasOwnProp(this, '_weekdaysRegex')) {
+        this._weekdaysRegex = defaultWeekdaysRegex;
+      }
+      return this._weekdaysStrictRegex && isStrict
+        ? this._weekdaysStrictRegex
+        : this._weekdaysRegex;
+    }
+  }
+
+  function weekdaysShortRegex(isStrict) {
+    if (this._weekdaysParseExact) {
+      if (!hasOwnProp(this, '_weekdaysRegex')) {
+        computeWeekdaysParse.call(this);
+      }
+      if (isStrict) {
+        return this._weekdaysShortStrictRegex;
+      } else {
+        return this._weekdaysShortRegex;
+      }
+    } else {
+      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
+        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
+      }
+      return this._weekdaysShortStrictRegex && isStrict
+        ? this._weekdaysShortStrictRegex
+        : this._weekdaysShortRegex;
+    }
+  }
+
+  function weekdaysMinRegex(isStrict) {
+    if (this._weekdaysParseExact) {
+      if (!hasOwnProp(this, '_weekdaysRegex')) {
+        computeWeekdaysParse.call(this);
+      }
+      if (isStrict) {
+        return this._weekdaysMinStrictRegex;
+      } else {
+        return this._weekdaysMinRegex;
+      }
+    } else {
+      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
+        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
+      }
+      return this._weekdaysMinStrictRegex && isStrict
+        ? this._weekdaysMinStrictRegex
+        : this._weekdaysMinRegex;
+    }
+  }
+
+  function computeWeekdaysParse() {
+    function cmpLenRev(a, b) {
+      return b.length - a.length;
+    }
+
+    var minPieces = [],
+      shortPieces = [],
+      longPieces = [],
+      mixedPieces = [],
+      i,
+      mom,
+      minp,
+      shortp,
+      longp;
+    for (i = 0; i < 7; i++) {
+      // make the regex if we don't have it already
+      mom = createUTC([2000, 1]).day(i);
+      minp = regexEscape(this.weekdaysMin(mom, ''));
+      shortp = regexEscape(this.weekdaysShort(mom, ''));
+      longp = regexEscape(this.weekdays(mom, ''));
+      minPieces.push(minp);
+      shortPieces.push(shortp);
+      longPieces.push(longp);
+      mixedPieces.push(minp);
+      mixedPieces.push(shortp);
+      mixedPieces.push(longp);
+    }
+    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
+    // will match the longer piece.
+    minPieces.sort(cmpLenRev);
+    shortPieces.sort(cmpLenRev);
+    longPieces.sort(cmpLenRev);
+    mixedPieces.sort(cmpLenRev);
+
+    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
+    this._weekdaysShortRegex = this._weekdaysRegex;
+    this._weekdaysMinRegex = this._weekdaysRegex;
+
+    this._weekdaysStrictRegex = new RegExp(
+      '^(' + longPieces.join('|') + ')',
+      'i'
+    );
+    this._weekdaysShortStrictRegex = new RegExp(
+      '^(' + shortPieces.join('|') + ')',
+      'i'
+    );
+    this._weekdaysMinStrictRegex = new RegExp(
+      '^(' + minPieces.join('|') + ')',
+      'i'
+    );
+  }
+
+  // FORMATTING
+
+  function hFormat() {
+    return this.hours() % 12 || 12;
+  }
+
+  function kFormat() {
+    return this.hours() || 24;
+  }
+
+  addFormatToken('H', ['HH', 2], 0, 'hour');
+  addFormatToken('h', ['hh', 2], 0, hFormat);
+  addFormatToken('k', ['kk', 2], 0, kFormat);
+
+  addFormatToken('hmm', 0, 0, function () {
+    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
+  });
+
+  addFormatToken('hmmss', 0, 0, function () {
+    return (
+      '' +
+      hFormat.apply(this) +
+      zeroFill(this.minutes(), 2) +
+      zeroFill(this.seconds(), 2)
+    );
+  });
+
+  addFormatToken('Hmm', 0, 0, function () {
+    return '' + this.hours() + zeroFill(this.minutes(), 2);
+  });
+
+  addFormatToken('Hmmss', 0, 0, function () {
+    return (
+      '' +
+      this.hours() +
+      zeroFill(this.minutes(), 2) +
+      zeroFill(this.seconds(), 2)
+    );
+  });
+
+  function meridiem(token, lowercase) {
+    addFormatToken(token, 0, 0, function () {
+      return this.localeData().meridiem(
+        this.hours(),
+        this.minutes(),
+        lowercase
+      );
+    });
+  }
+
+  meridiem('a', true);
+  meridiem('A', false);
+
+  // ALIASES
+
+  addUnitAlias('hour', 'h');
+
+  // PRIORITY
+  addUnitPriority('hour', 13);
+
+  // PARSING
+
+  function matchMeridiem(isStrict, locale) {
+    return locale._meridiemParse;
+  }
+
+  addRegexToken('a', matchMeridiem);
+  addRegexToken('A', matchMeridiem);
+  addRegexToken('H', match1to2);
+  addRegexToken('h', match1to2);
+  addRegexToken('k', match1to2);
+  addRegexToken('HH', match1to2, match2);
+  addRegexToken('hh', match1to2, match2);
+  addRegexToken('kk', match1to2, match2);
+
+  addRegexToken('hmm', match3to4);
+  addRegexToken('hmmss', match5to6);
+  addRegexToken('Hmm', match3to4);
+  addRegexToken('Hmmss', match5to6);
+
+  addParseToken(['H', 'HH'], HOUR);
+  addParseToken(['k', 'kk'], function (input, array, config) {
+    var kInput = toInt(input);
+    array[HOUR] = kInput === 24 ? 0 : kInput;
+  });
+  addParseToken(['a', 'A'], function (input, array, config) {
+    config._isPm = config._locale.isPM(input);
+    config._meridiem = input;
+  });
+  addParseToken(['h', 'hh'], function (input, array, config) {
+    array[HOUR] = toInt(input);
+    getParsingFlags(config).bigHour = true;
+  });
+  addParseToken('hmm', function (input, array, config) {
+    var pos = input.length - 2;
+    array[HOUR] = toInt(input.substr(0, pos));
+    array[MINUTE] = toInt(input.substr(pos));
+    getParsingFlags(config).bigHour = true;
+  });
+  addParseToken('hmmss', function (input, array, config) {
+    var pos1 = input.length - 4,
+      pos2 = input.length - 2;
+    array[HOUR] = toInt(input.substr(0, pos1));
+    array[MINUTE] = toInt(input.substr(pos1, 2));
+    array[SECOND] = toInt(input.substr(pos2));
+    getParsingFlags(config).bigHour = true;
+  });
+  addParseToken('Hmm', function (input, array, config) {
+    var pos = input.length - 2;
+    array[HOUR] = toInt(input.substr(0, pos));
+    array[MINUTE] = toInt(input.substr(pos));
+  });
+  addParseToken('Hmmss', function (input, array, config) {
+    var pos1 = input.length - 4,
+      pos2 = input.length - 2;
+    array[HOUR] = toInt(input.substr(0, pos1));
+    array[MINUTE] = toInt(input.substr(pos1, 2));
+    array[SECOND] = toInt(input.substr(pos2));
+  });
+
+  // LOCALES
+
+  function localeIsPM(input) {
+    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
+    // Using charAt should be more compatible.
+    return (input + '').toLowerCase().charAt(0) === 'p';
+  }
+
+  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
+    // Setting the hour should keep the time, because the user explicitly
+    // specified which hour they want. So trying to maintain the same hour (in
+    // a new timezone) makes sense. Adding/subtracting hours does not follow
+    // this rule.
+    getSetHour = makeGetSet('Hours', true);
+
+  function localeMeridiem(hours, minutes, isLower) {
+    if (hours > 11) {
+      return isLower ? 'pm' : 'PM';
+    } else {
+      return isLower ? 'am' : 'AM';
+    }
+  }
+
+  var baseConfig = {
+    calendar: defaultCalendar,
+    longDateFormat: defaultLongDateFormat,
+    invalidDate: defaultInvalidDate,
+    ordinal: defaultOrdinal,
+    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
+    relativeTime: defaultRelativeTime,
+
+    months: defaultLocaleMonths,
+    monthsShort: defaultLocaleMonthsShort,
+
+    week: defaultLocaleWeek,
+
+    weekdays: defaultLocaleWeekdays,
+    weekdaysMin: defaultLocaleWeekdaysMin,
+    weekdaysShort: defaultLocaleWeekdaysShort,
+
+    meridiemParse: defaultLocaleMeridiemParse,
+  };
+
+  // internal storage for locale config files
+  var locales = {},
+    localeFamilies = {},
+    globalLocale;
+
+  function commonPrefix(arr1, arr2) {
+    var i,
+      minl = Math.min(arr1.length, arr2.length);
+    for (i = 0; i < minl; i += 1) {
+      if (arr1[i] !== arr2[i]) {
+        return i;
+      }
+    }
+    return minl;
+  }
+
+  function normalizeLocale(key) {
+    return key ? key.toLowerCase().replace('_', '-') : key;
+  }
+
+  // pick the locale from the array
+  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
+  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
+  function chooseLocale(names) {
+    var i = 0,
+      j,
+      next,
+      locale,
+      split;
+
+    while (i < names.length) {
+      split = normalizeLocale(names[i]).split('-');
+      j = split.length;
+      next = normalizeLocale(names[i + 1]);
+      next = next ? next.split('-') : null;
+      while (j > 0) {
+        locale = loadLocale(split.slice(0, j).join('-'));
+        if (locale) {
+          return locale;
+        }
+        if (
+          next &&
+          next.length >= j &&
+          commonPrefix(split, next) >= j - 1
+        ) {
+          //the next array item is better than a shallower substring of this one
+          break;
+        }
+        j--;
+      }
+      i++;
+    }
+    return globalLocale;
+  }
+
+  function loadLocale(name) {
+    var oldLocale = null,
+      aliasedRequire;
+    // TODO: Find a better way to register and load all the locales in Node
+    if (
+      locales[name] === undefined &&
+      typeof module !== 'undefined' &&
+      module &&
+      module.exports
+    ) {
+      try {
+        oldLocale = globalLocale._abbr;
+        aliasedRequire = require;
+        aliasedRequire('./locale/' + name);
+        getSetGlobalLocale(oldLocale);
+      } catch (e) {
+        // mark as not found to avoid repeating expensive file require call causing high CPU
+        // when trying to find en-US, en_US, en-us for every format call
+        locales[name] = null; // null means not found
+      }
+    }
+    return locales[name];
+  }
+
+  // This function will load locale and then set the global locale.  If
+  // no arguments are passed in, it will simply return the current global
+  // locale key.
+  function getSetGlobalLocale(key, values) {
+    var data;
+    if (key) {
+      if (isUndefined(values)) {
+        data = getLocale(key);
+      } else {
+        data = defineLocale(key, values);
+      }
+
+      if (data) {
+        // moment.duration._locale = moment._locale = data;
+        globalLocale = data;
+      } else {
+        if (typeof console !== 'undefined' && console.warn) {
+          //warn user if arguments are passed but the locale could not be set
+          console.warn(
+            'Locale ' + key + ' not found. Did you forget to load it?'
+          );
+        }
+      }
+    }
+
+    return globalLocale._abbr;
+  }
+
+  function defineLocale(name, config) {
+    if (config !== null) {
+      var locale,
+        parentConfig = baseConfig;
+      config.abbr = name;
+      if (locales[name] != null) {
+        deprecateSimple(
+          'defineLocaleOverride',
+          'use moment.updateLocale(localeName, config) to change ' +
+          'an existing locale. moment.defineLocale(localeName, ' +
+          'config) should only be used for creating a new locale ' +
+          'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
+        );
+        parentConfig = locales[name]._config;
+      } else if (config.parentLocale != null) {
+        if (locales[config.parentLocale] != null) {
+          parentConfig = locales[config.parentLocale]._config;
+        } else {
+          locale = loadLocale(config.parentLocale);
+          if (locale != null) {
+            parentConfig = locale._config;
+          } else {
+            if (!localeFamilies[config.parentLocale]) {
+              localeFamilies[config.parentLocale] = [];
+            }
+            localeFamilies[config.parentLocale].push({
+              name: name,
+              config: config,
+            });
+            return null;
+          }
+        }
+      }
+      locales[name] = new Locale(mergeConfigs(parentConfig, config));
+
+      if (localeFamilies[name]) {
+        localeFamilies[name].forEach(function (x) {
+          defineLocale(x.name, x.config);
+        });
+      }
+
+      // backwards compat for now: also set the locale
+      // make sure we set the locale AFTER all child locales have been
+      // created, so we won't end up with the child locale set.
+      getSetGlobalLocale(name);
+
+      return locales[name];
+    } else {
+      // useful for testing
+      delete locales[name];
+      return null;
+    }
+  }
+
+  function updateLocale(name, config) {
+    if (config != null) {
+      var locale,
+        tmpLocale,
+        parentConfig = baseConfig;
+
+      if (locales[name] != null && locales[name].parentLocale != null) {
+        // Update existing child locale in-place to avoid memory-leaks
+        locales[name].set(mergeConfigs(locales[name]._config, config));
+      } else {
+        // MERGE
+        tmpLocale = loadLocale(name);
+        if (tmpLocale != null) {
+          parentConfig = tmpLocale._config;
+        }
+        config = mergeConfigs(parentConfig, config);
+        if (tmpLocale == null) {
+          // updateLocale is called for creating a new locale
+          // Set abbr so it will have a name (getters return
+          // undefined otherwise).
+          config.abbr = name;
+        }
+        locale = new Locale(config);
+        locale.parentLocale = locales[name];
+        locales[name] = locale;
+      }
+
+      // backwards compat for now: also set the locale
+      getSetGlobalLocale(name);
+    } else {
+      // pass null for config to unupdate, useful for tests
+      if (locales[name] != null) {
+        if (locales[name].parentLocale != null) {
+          locales[name] = locales[name].parentLocale;
+          if (name === getSetGlobalLocale()) {
+            getSetGlobalLocale(name);
+          }
+        } else if (locales[name] != null) {
+          delete locales[name];
+        }
+      }
+    }
+    return locales[name];
+  }
+
+  // returns locale data
+  function getLocale(key) {
+    var locale;
+
+    if (key && key._locale && key._locale._abbr) {
+      key = key._locale._abbr;
+    }
+
+    if (!key) {
+      return globalLocale;
+    }
+
+    if (!isArray(key)) {
+      //short-circuit everything else
+      locale = loadLocale(key);
+      if (locale) {
+        return locale;
+      }
+      key = [key];
+    }
+
+    return chooseLocale(key);
+  }
+
+  function listLocales() {
+    return keys(locales);
+  }
+
+  function checkOverflow(m) {
+    var overflow,
+      a = m._a;
+
+    if (a && getParsingFlags(m).overflow === -2) {
+      overflow =
+        a[MONTH] < 0 || a[MONTH] > 11
+          ? MONTH
+          : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
+          ? DATE
+          : a[HOUR] < 0 ||
+          a[HOUR] > 24 ||
+          (a[HOUR] === 24 &&
+            (a[MINUTE] !== 0 ||
+              a[SECOND] !== 0 ||
+              a[MILLISECOND] !== 0))
+            ? HOUR
+            : a[MINUTE] < 0 || a[MINUTE] > 59
+              ? MINUTE
+              : a[SECOND] < 0 || a[SECOND] > 59
+                ? SECOND
+                : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
+                  ? MILLISECOND
+                  : -1;
+
+      if (
+        getParsingFlags(m)._overflowDayOfYear &&
+        (overflow < YEAR || overflow > DATE)
+      ) {
+        overflow = DATE;
+      }
+      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
+        overflow = WEEK;
+      }
+      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
+        overflow = WEEKDAY;
+      }
+
+      getParsingFlags(m).overflow = overflow;
+    }
+
+    return m;
+  }
+
+  // iso 8601 regex
+  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
+  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
+    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
+    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
+    isoDates = [
+      ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
+      ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
+      ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
+      ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
+      ['YYYY-DDD', /\d{4}-\d{3}/],
+      ['YYYY-MM', /\d{4}-\d\d/, false],
+      ['YYYYYYMMDD', /[+-]\d{10}/],
+      ['YYYYMMDD', /\d{8}/],
+      ['GGGG[W]WWE', /\d{4}W\d{3}/],
+      ['GGGG[W]WW', /\d{4}W\d{2}/, false],
+      ['YYYYDDD', /\d{7}/],
+      ['YYYYMM', /\d{6}/, false],
+      ['YYYY', /\d{4}/, false],
+    ],
+    // iso time formats and regexes
+    isoTimes = [
+      ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
+      ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
+      ['HH:mm:ss', /\d\d:\d\d:\d\d/],
+      ['HH:mm', /\d\d:\d\d/],
+      ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
+      ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
+      ['HHmmss', /\d\d\d\d\d\d/],
+      ['HHmm', /\d\d\d\d/],
+      ['HH', /\d\d/],
+    ],
+    aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
+    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
+    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
+    obsOffsets = {
+      UT: 0,
+      GMT: 0,
+      EDT: -4 * 60,
+      EST: -5 * 60,
+      CDT: -5 * 60,
+      CST: -6 * 60,
+      MDT: -6 * 60,
+      MST: -7 * 60,
+      PDT: -7 * 60,
+      PST: -8 * 60,
+    };
+
+  // date from iso format
+  function configFromISO(config) {
+    var i,
+      l,
+      string = config._i,
+      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
+      allowTime,
+      dateFormat,
+      timeFormat,
+      tzFormat;
+
+    if (match) {
+      getParsingFlags(config).iso = true;
+
+      for (i = 0, l = isoDates.length; i < l; i++) {
+        if (isoDates[i][1].exec(match[1])) {
+          dateFormat = isoDates[i][0];
+          allowTime = isoDates[i][2] !== false;
+          break;
+        }
+      }
+      if (dateFormat == null) {
+        config._isValid = false;
+        return;
+      }
+      if (match[3]) {
+        for (i = 0, l = isoTimes.length; i < l; i++) {
+          if (isoTimes[i][1].exec(match[3])) {
+            // match[2] should be 'T' or space
+            timeFormat = (match[2] || ' ') + isoTimes[i][0];
+            break;
+          }
+        }
+        if (timeFormat == null) {
+          config._isValid = false;
+          return;
+        }
+      }
+      if (!allowTime && timeFormat != null) {
+        config._isValid = false;
+        return;
+      }
+      if (match[4]) {
+        if (tzRegex.exec(match[4])) {
+          tzFormat = 'Z';
+        } else {
+          config._isValid = false;
+          return;
+        }
+      }
+      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
+      configFromStringAndFormat(config);
+    } else {
+      config._isValid = false;
+    }
+  }
+
+  function extractFromRFC2822Strings(
+    yearStr,
+    monthStr,
+    dayStr,
+    hourStr,
+    minuteStr,
+    secondStr
+  ) {
+    var result = [
+      untruncateYear(yearStr),
+      defaultLocaleMonthsShort.indexOf(monthStr),
+      parseInt(dayStr, 10),
+      parseInt(hourStr, 10),
+      parseInt(minuteStr, 10),
+    ];
+
+    if (secondStr) {
+      result.push(parseInt(secondStr, 10));
+    }
+
+    return result;
+  }
+
+  function untruncateYear(yearStr) {
+    var year = parseInt(yearStr, 10);
+    if (year <= 49) {
+      return 2000 + year;
+    } else if (year <= 999) {
+      return 1900 + year;
+    }
+    return year;
+  }
+
+  function preprocessRFC2822(s) {
+    // Remove comments and folding whitespace and replace multiple-spaces with a single space
+    return s
+      .replace(/\([^)]*\)|[\n\t]/g, ' ')
+      .replace(/(\s\s+)/g, ' ')
+      .replace(/^\s\s*/, '')
+      .replace(/\s\s*$/, '');
+  }
+
+  function checkWeekday(weekdayStr, parsedInput, config) {
+    if (weekdayStr) {
+      // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
+      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
+        weekdayActual = new Date(
+          parsedInput[0],
+          parsedInput[1],
+          parsedInput[2]
+        ).getDay();
+      if (weekdayProvided !== weekdayActual) {
+        getParsingFlags(config).weekdayMismatch = true;
+        config._isValid = false;
+        return false;
+      }
+    }
+    return true;
+  }
+
+  function calculateOffset(obsOffset, militaryOffset, numOffset) {
+    if (obsOffset) {
+      return obsOffsets[obsOffset];
+    } else if (militaryOffset) {
+      // the only allowed military tz is Z
+      return 0;
+    } else {
+      var hm = parseInt(numOffset, 10),
+        m = hm % 100,
+        h = (hm - m) / 100;
+      return h * 60 + m;
+    }
+  }
+
+  // date and time from ref 2822 format
+  function configFromRFC2822(config) {
+    var match = rfc2822.exec(preprocessRFC2822(config._i)),
+      parsedArray;
+    if (match) {
+      parsedArray = extractFromRFC2822Strings(
+        match[4],
+        match[3],
+        match[2],
+        match[5],
+        match[6],
+        match[7]
+      );
+      if (!checkWeekday(match[1], parsedArray, config)) {
+        return;
+      }
+
+      config._a = parsedArray;
+      config._tzm = calculateOffset(match[8], match[9], match[10]);
+
+      config._d = createUTCDate.apply(null, config._a);
+      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
+
+      getParsingFlags(config).rfc2822 = true;
+    } else {
+      config._isValid = false;
+    }
+  }
+
+  // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
+  function configFromString(config) {
+    var matched = aspNetJsonRegex.exec(config._i);
+    if (matched !== null) {
+      config._d = new Date(+matched[1]);
+      return;
+    }
+
+    configFromISO(config);
+    if (config._isValid === false) {
+      delete config._isValid;
+    } else {
+      return;
+    }
+
+    configFromRFC2822(config);
+    if (config._isValid === false) {
+      delete config._isValid;
+    } else {
+      return;
+    }
+
+    if (config._strict) {
+      config._isValid = false;
+    } else {
+      // Final attempt, use Input Fallback
+      hooks.createFromInputFallback(config);
+    }
+  }
+
+  hooks.createFromInputFallback = deprecate(
+    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
+    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
+    'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
+    function (config) {
+      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
+    }
+  );
+
+  // Pick the first defined of two or three arguments.
+  function defaults(a, b, c) {
+    if (a != null) {
+      return a;
+    }
+    if (b != null) {
+      return b;
+    }
+    return c;
+  }
+
+  function currentDateArray(config) {
+    // hooks is actually the exported moment object
+    var nowValue = new Date(hooks.now());
+    if (config._useUTC) {
+      return [
+        nowValue.getUTCFullYear(),
+        nowValue.getUTCMonth(),
+        nowValue.getUTCDate(),
+      ];
+    }
+    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
+  }
+
+  // convert an array to a date.
+  // the array should mirror the parameters below
+  // note: all values past the year are optional and will default to the lowest possible value.
+  // [year, month, day , hour, minute, second, millisecond]
+  function configFromArray(config) {
+    var i,
+      date,
+      input = [],
+      currentDate,
+      expectedWeekday,
+      yearToUse;
+
+    if (config._d) {
+      return;
+    }
+
+    currentDate = currentDateArray(config);
+
+    //compute day of the year from weeks and weekdays
+    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
+      dayOfYearFromWeekInfo(config);
+    }
+
+    //if the day of the year is set, figure out what it is
+    if (config._dayOfYear != null) {
+      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
+
+      if (
+        config._dayOfYear > daysInYear(yearToUse) ||
+        config._dayOfYear === 0
+      ) {
+        getParsingFlags(config)._overflowDayOfYear = true;
+      }
+
+      date = createUTCDate(yearToUse, 0, config._dayOfYear);
+      config._a[MONTH] = date.getUTCMonth();
+      config._a[DATE] = date.getUTCDate();
+    }
+
+    // Default to current date.
+    // * if no year, month, day of month are given, default to today
+    // * if day of month is given, default month and year
+    // * if month is given, default only year
+    // * if year is given, don't default anything
+    for (i = 0; i < 3 && config._a[i] == null; ++i) {
+      config._a[i] = input[i] = currentDate[i];
+    }
+
+    // Zero out whatever was not defaulted, including time
+    for (; i < 7; i++) {
+      config._a[i] = input[i] =
+        config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
+    }
+
+    // Check for 24:00:00.000
+    if (
+      config._a[HOUR] === 24 &&
+      config._a[MINUTE] === 0 &&
+      config._a[SECOND] === 0 &&
+      config._a[MILLISECOND] === 0
+    ) {
+      config._nextDay = true;
+      config._a[HOUR] = 0;
+    }
+
+    config._d = (config._useUTC ? createUTCDate : createDate).apply(
+      null,
+      input
+    );
+    expectedWeekday = config._useUTC
+      ? config._d.getUTCDay()
+      : config._d.getDay();
+
+    // Apply timezone offset from input. The actual utcOffset can be changed
+    // with parseZone.
+    if (config._tzm != null) {
+      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
+    }
+
+    if (config._nextDay) {
+      config._a[HOUR] = 24;
+    }
+
+    // check for mismatching day of week
+    if (
+      config._w &&
+      typeof config._w.d !== 'undefined' &&
+      config._w.d !== expectedWeekday
+    ) {
+      getParsingFlags(config).weekdayMismatch = true;
+    }
+  }
+
+  function dayOfYearFromWeekInfo(config) {
+    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
+
+    w = config._w;
+    if (w.GG != null || w.W != null || w.E != null) {
+      dow = 1;
+      doy = 4;
+
+      // TODO: We need to take the current isoWeekYear, but that depends on
+      // how we interpret now (local, utc, fixed offset). So create
+      // a now version of current config (take local/utc/offset flags, and
+      // create now).
+      weekYear = defaults(
+        w.GG,
+        config._a[YEAR],
+        weekOfYear(createLocal(), 1, 4).year
+      );
+      week = defaults(w.W, 1);
+      weekday = defaults(w.E, 1);
+      if (weekday < 1 || weekday > 7) {
+        weekdayOverflow = true;
+      }
+    } else {
+      dow = config._locale._week.dow;
+      doy = config._locale._week.doy;
+
+      curWeek = weekOfYear(createLocal(), dow, doy);
+
+      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
+
+      // Default to current week.
+      week = defaults(w.w, curWeek.week);
+
+      if (w.d != null) {
+        // weekday -- low day numbers are considered next week
+        weekday = w.d;
+        if (weekday < 0 || weekday > 6) {
+          weekdayOverflow = true;
+        }
+      } else if (w.e != null) {
+        // local weekday -- counting starts from beginning of week
+        weekday = w.e + dow;
+        if (w.e < 0 || w.e > 6) {
+          weekdayOverflow = true;
+        }
+      } else {
+        // default to beginning of week
+        weekday = dow;
+      }
+    }
+    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
+      getParsingFlags(config)._overflowWeeks = true;
+    } else if (weekdayOverflow != null) {
+      getParsingFlags(config)._overflowWeekday = true;
+    } else {
+      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
+      config._a[YEAR] = temp.year;
+      config._dayOfYear = temp.dayOfYear;
+    }
+  }
+
+  // constant that refers to the ISO standard
+  hooks.ISO_8601 = function () {};
+
+  // constant that refers to the RFC 2822 form
+  hooks.RFC_2822 = function () {};
+
+  // date from string and format string
+  function configFromStringAndFormat(config) {
+    // TODO: Move this to another part of the creation flow to prevent circular deps
+    if (config._f === hooks.ISO_8601) {
+      configFromISO(config);
+      return;
+    }
+    if (config._f === hooks.RFC_2822) {
+      configFromRFC2822(config);
+      return;
+    }
+    config._a = [];
+    getParsingFlags(config).empty = true;
+
+    // This array is used to make a Date, either with `new Date` or `Date.UTC`
+    var string = '' + config._i,
+      i,
+      parsedInput,
+      tokens,
+      token,
+      skipped,
+      stringLength = string.length,
+      totalParsedInputLength = 0,
+      era;
+
+    tokens =
+      expandFormat(config._f, config._locale).match(formattingTokens) || [];
+
+    for (i = 0; i < tokens.length; i++) {
+      token = tokens[i];
+      parsedInput = (string.match(getParseRegexForToken(token, config)) ||
+        [])[0];
+      if (parsedInput) {
+        skipped = string.substr(0, string.indexOf(parsedInput));
+        if (skipped.length > 0) {
+          getParsingFlags(config).unusedInput.push(skipped);
+        }
+        string = string.slice(
+          string.indexOf(parsedInput) + parsedInput.length
+        );
+        totalParsedInputLength += parsedInput.length;
+      }
+      // don't parse if it's not a known token
+      if (formatTokenFunctions[token]) {
+        if (parsedInput) {
+          getParsingFlags(config).empty = false;
+        } else {
+          getParsingFlags(config).unusedTokens.push(token);
+        }
+        addTimeToArrayFromToken(token, parsedInput, config);
+      } else if (config._strict && !parsedInput) {
+        getParsingFlags(config).unusedTokens.push(token);
+      }
+    }
+
+    // add remaining unparsed input length to the string
+    getParsingFlags(config).charsLeftOver =
+      stringLength - totalParsedInputLength;
+    if (string.length > 0) {
+      getParsingFlags(config).unusedInput.push(string);
+    }
+
+    // clear _12h flag if hour is <= 12
+    if (
+      config._a[HOUR] <= 12 &&
+      getParsingFlags(config).bigHour === true &&
+      config._a[HOUR] > 0
+    ) {
+      getParsingFlags(config).bigHour = undefined;
+    }
+
+    getParsingFlags(config).parsedDateParts = config._a.slice(0);
+    getParsingFlags(config).meridiem = config._meridiem;
+    // handle meridiem
+    config._a[HOUR] = meridiemFixWrap(
+      config._locale,
+      config._a[HOUR],
+      config._meridiem
+    );
+
+    // handle era
+    era = getParsingFlags(config).era;
+    if (era !== null) {
+      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
+    }
+
+    configFromArray(config);
+    checkOverflow(config);
+  }
+
+  function meridiemFixWrap(locale, hour, meridiem) {
+    var isPm;
+
+    if (meridiem == null) {
+      // nothing to do
+      return hour;
+    }
+    if (locale.meridiemHour != null) {
+      return locale.meridiemHour(hour, meridiem);
+    } else if (locale.isPM != null) {
+      // Fallback
+      isPm = locale.isPM(meridiem);
+      if (isPm && hour < 12) {
+        hour += 12;
+      }
+      if (!isPm && hour === 12) {
+        hour = 0;
+      }
+      return hour;
+    } else {
+      // this is not supposed to happen
+      return hour;
+    }
+  }
+
+  // date from string and array of format strings
+  function configFromStringAndArray(config) {
+    var tempConfig,
+      bestMoment,
+      scoreToBeat,
+      i,
+      currentScore,
+      validFormatFound,
+      bestFormatIsValid = false;
+
+    if (config._f.length === 0) {
+      getParsingFlags(config).invalidFormat = true;
+      config._d = new Date(NaN);
+      return;
+    }
+
+    for (i = 0; i < config._f.length; i++) {
+      currentScore = 0;
+      validFormatFound = false;
+      tempConfig = copyConfig({}, config);
+      if (config._useUTC != null) {
+        tempConfig._useUTC = config._useUTC;
+      }
+      tempConfig._f = config._f[i];
+      configFromStringAndFormat(tempConfig);
+
+      if (isValid(tempConfig)) {
+        validFormatFound = true;
+      }
+
+      // if there is any input that was not parsed add a penalty for that format
+      currentScore += getParsingFlags(tempConfig).charsLeftOver;
+
+      //or tokens
+      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
+
+      getParsingFlags(tempConfig).score = currentScore;
+
+      if (!bestFormatIsValid) {
+        if (
+          scoreToBeat == null ||
+          currentScore < scoreToBeat ||
+          validFormatFound
+        ) {
+          scoreToBeat = currentScore;
+          bestMoment = tempConfig;
+          if (validFormatFound) {
+            bestFormatIsValid = true;
+          }
+        }
+      } else {
+        if (currentScore < scoreToBeat) {
+          scoreToBeat = currentScore;
+          bestMoment = tempConfig;
+        }
+      }
+    }
+
+    extend(config, bestMoment || tempConfig);
+  }
+
+  function configFromObject(config) {
+    if (config._d) {
+      return;
+    }
+
+    var i = normalizeObjectUnits(config._i),
+      dayOrDate = i.day === undefined ? i.date : i.day;
+    config._a = map(
+      [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
+      function (obj) {
+        return obj && parseInt(obj, 10);
+      }
+    );
+
+    configFromArray(config);
+  }
+
+  function createFromConfig(config) {
+    var res = new Moment(checkOverflow(prepareConfig(config)));
+    if (res._nextDay) {
+      // Adding is smart enough around DST
+      res.add(1, 'd');
+      res._nextDay = undefined;
+    }
+
+    return res;
+  }
+
+  function prepareConfig(config) {
+    var input = config._i,
+      format = config._f;
+
+    config._locale = config._locale || getLocale(config._l);
+
+    if (input === null || (format === undefined && input === '')) {
+      return createInvalid({ nullInput: true });
+    }
+
+    if (typeof input === 'string') {
+      config._i = input = config._locale.preparse(input);
+    }
+
+    if (isMoment(input)) {
+      return new Moment(checkOverflow(input));
+    } else if (isDate(input)) {
+      config._d = input;
+    } else if (isArray(format)) {
+      configFromStringAndArray(config);
+    } else if (format) {
+      configFromStringAndFormat(config);
+    } else {
+      configFromInput(config);
+    }
+
+    if (!isValid(config)) {
+      config._d = null;
+    }
+
+    return config;
+  }
+
+  function configFromInput(config) {
+    var input = config._i;
+    if (isUndefined(input)) {
+      config._d = new Date(hooks.now());
+    } else if (isDate(input)) {
+      config._d = new Date(input.valueOf());
+    } else if (typeof input === 'string') {
+      configFromString(config);
+    } else if (isArray(input)) {
+      config._a = map(input.slice(0), function (obj) {
+        return parseInt(obj, 10);
+      });
+      configFromArray(config);
+    } else if (isObject(input)) {
+      configFromObject(config);
+    } else if (isNumber(input)) {
+      // from milliseconds
+      config._d = new Date(input);
+    } else {
+      hooks.createFromInputFallback(config);
+    }
+  }
+
+  function createLocalOrUTC(input, format, locale, strict, isUTC) {
+    var c = {};
+
+    if (format === true || format === false) {
+      strict = format;
+      format = undefined;
+    }
+
+    if (locale === true || locale === false) {
+      strict = locale;
+      locale = undefined;
+    }
+
+    if (
+      (isObject(input) && isObjectEmpty(input)) ||
+      (isArray(input) && input.length === 0)
+    ) {
+      input = undefined;
+    }
+    // object construction must be done this way.
+    // https://github.com/moment/moment/issues/1423
+    c._isAMomentObject = true;
+    c._useUTC = c._isUTC = isUTC;
+    c._l = locale;
+    c._i = input;
+    c._f = format;
+    c._strict = strict;
+
+    return createFromConfig(c);
+  }
+
+  function createLocal(input, format, locale, strict) {
+    return createLocalOrUTC(input, format, locale, strict, false);
+  }
+
+  var prototypeMin = deprecate(
+    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
+    function () {
+      var other = createLocal.apply(null, arguments);
+      if (this.isValid() && other.isValid()) {
+        return other < this ? this : other;
+      } else {
+        return createInvalid();
+      }
+    }
+    ),
+    prototypeMax = deprecate(
+      'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
+      function () {
+        var other = createLocal.apply(null, arguments);
+        if (this.isValid() && other.isValid()) {
+          return other > this ? this : other;
+        } else {
+          return createInvalid();
+        }
+      }
+    );
+
+  // Pick a moment m from moments so that m[fn](other) is true for all
+  // other. This relies on the function fn to be transitive.
+  //
+  // moments should either be an array of moment objects or an array, whose
+  // first element is an array of moment objects.
+  function pickBy(fn, moments) {
+    var res, i;
+    if (moments.length === 1 && isArray(moments[0])) {
+      moments = moments[0];
+    }
+    if (!moments.length) {
+      return createLocal();
+    }
+    res = moments[0];
+    for (i = 1; i < moments.length; ++i) {
+      if (!moments[i].isValid() || moments[i][fn](res)) {
+        res = moments[i];
+      }
+    }
+    return res;
+  }
+
+  // TODO: Use [].sort instead?
+  function min() {
+    var args = [].slice.call(arguments, 0);
+
+    return pickBy('isBefore', args);
+  }
+
+  function max() {
+    var args = [].slice.call(arguments, 0);
+
+    return pickBy('isAfter', args);
+  }
+
+  var now = function () {
+    return Date.now ? Date.now() : +new Date();
+  };
+
+  var ordering = [
+    'year',
+    'quarter',
+    'month',
+    'week',
+    'day',
+    'hour',
+    'minute',
+    'second',
+    'millisecond',
+  ];
+
+  function isDurationValid(m) {
+    var key,
+      unitHasDecimal = false,
+      i;
+    for (key in m) {
+      if (
+        hasOwnProp(m, key) &&
+        !(
+          indexOf.call(ordering, key) !== -1 &&
+          (m[key] == null || !isNaN(m[key]))
+        )
+      ) {
+        return false;
+      }
+    }
+
+    for (i = 0; i < ordering.length; ++i) {
+      if (m[ordering[i]]) {
+        if (unitHasDecimal) {
+          return false; // only allow non-integers for smallest unit
+        }
+        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
+          unitHasDecimal = true;
+        }
+      }
+    }
+
+    return true;
+  }
+
+  function isValid$1() {
+    return this._isValid;
+  }
+
+  function createInvalid$1() {
+    return createDuration(NaN);
+  }
+
+  function Duration(duration) {
+    var normalizedInput = normalizeObjectUnits(duration),
+      years = normalizedInput.year || 0,
+      quarters = normalizedInput.quarter || 0,
+      months = normalizedInput.month || 0,
+      weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
+      days = normalizedInput.day || 0,
+      hours = normalizedInput.hour || 0,
+      minutes = normalizedInput.minute || 0,
+      seconds = normalizedInput.second || 0,
+      milliseconds = normalizedInput.millisecond || 0;
+
+    this._isValid = isDurationValid(normalizedInput);
+
+    // representation for dateAddRemove
+    this._milliseconds =
+      +milliseconds +
+      seconds * 1e3 + // 1000
+      minutes * 6e4 + // 1000 * 60
+      hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
+    // Because of dateAddRemove treats 24 hours as different from a
+    // day when working around DST, we need to store them separately
+    this._days = +days + weeks * 7;
+    // It is impossible to translate months into days without knowing
+    // which months you are are talking about, so we have to store
+    // it separately.
+    this._months = +months + quarters * 3 + years * 12;
+
+    this._data = {};
+
+    this._locale = getLocale();
+
+    this._bubble();
+  }
+
+  function isDuration(obj) {
+    return obj instanceof Duration;
+  }
+
+  function absRound(number) {
+    if (number < 0) {
+      return Math.round(-1 * number) * -1;
+    } else {
+      return Math.round(number);
+    }
+  }
+
+  // compare two arrays, return the number of differences
+  function compareArrays(array1, array2, dontConvert) {
+    var len = Math.min(array1.length, array2.length),
+      lengthDiff = Math.abs(array1.length - array2.length),
+      diffs = 0,
+      i;
+    for (i = 0; i < len; i++) {
+      if (
+        (dontConvert && array1[i] !== array2[i]) ||
+        (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
+      ) {
+        diffs++;
+      }
+    }
+    return diffs + lengthDiff;
+  }
+
+  // FORMATTING
+
+  function offset(token, separator) {
+    addFormatToken(token, 0, 0, function () {
+      var offset = this.utcOffset(),
+        sign = '+';
+      if (offset < 0) {
+        offset = -offset;
+        sign = '-';
+      }
+      return (
+        sign +
+        zeroFill(~~(offset / 60), 2) +
+        separator +
+        zeroFill(~~offset % 60, 2)
+      );
+    });
+  }
+
+  offset('Z', ':');
+  offset('ZZ', '');
+
+  // PARSING
+
+  addRegexToken('Z', matchShortOffset);
+  addRegexToken('ZZ', matchShortOffset);
+  addParseToken(['Z', 'ZZ'], function (input, array, config) {
+    config._useUTC = true;
+    config._tzm = offsetFromString(matchShortOffset, input);
+  });
+
+  // HELPERS
+
+  // timezone chunker
+  // '+10:00' > ['10',  '00']
+  // '-1530'  > ['-15', '30']
+  var chunkOffset = /([\+\-]|\d\d)/gi;
+
+  function offsetFromString(matcher, string) {
+    var matches = (string || '').match(matcher),
+      chunk,
+      parts,
+      minutes;
+
+    if (matches === null) {
+      return null;
+    }
+
+    chunk = matches[matches.length - 1] || [];
+    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
+    minutes = +(parts[1] * 60) + toInt(parts[2]);
+
+    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
+  }
+
+  // Return a moment from input, that is local/utc/zone equivalent to model.
+  function cloneWithOffset(input, model) {
+    var res, diff;
+    if (model._isUTC) {
+      res = model.clone();
+      diff =
+        (isMoment(input) || isDate(input)
+          ? input.valueOf()
+          : createLocal(input).valueOf()) - res.valueOf();
+      // Use low-level api, because this fn is low-level api.
+      res._d.setTime(res._d.valueOf() + diff);
+      hooks.updateOffset(res, false);
+      return res;
+    } else {
+      return createLocal(input).local();
+    }
+  }
+
+  function getDateOffset(m) {
+    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
+    // https://github.com/moment/moment/pull/1871
+    return -Math.round(m._d.getTimezoneOffset());
+  }
+
+  // HOOKS
+
+  // This function will be called whenever a moment is mutated.
+  // It is intended to keep the offset in sync with the timezone.
+  hooks.updateOffset = function () {};
+
+  // MOMENTS
+
+  // keepLocalTime = true means only change the timezone, without
+  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
+  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
+  // +0200, so we adjust the time as needed, to be valid.
+  //
+  // Keeping the time actually adds/subtracts (one hour)
+  // from the actual represented time. That is why we call updateOffset
+  // a second time. In case it wants us to change the offset again
+  // _changeInProgress == true case, then we have to adjust, because
+  // there is no such time in the given timezone.
+  function getSetOffset(input, keepLocalTime, keepMinutes) {
+    var offset = this._offset || 0,
+      localAdjust;
+    if (!this.isValid()) {
+      return input != null ? this : NaN;
+    }
+    if (input != null) {
+      if (typeof input === 'string') {
+        input = offsetFromString(matchShortOffset, input);
+        if (input === null) {
+          return this;
+        }
+      } else if (Math.abs(input) < 16 && !keepMinutes) {
+        input = input * 60;
+      }
+      if (!this._isUTC && keepLocalTime) {
+        localAdjust = getDateOffset(this);
+      }
+      this._offset = input;
+      this._isUTC = true;
+      if (localAdjust != null) {
+        this.add(localAdjust, 'm');
+      }
+      if (offset !== input) {
+        if (!keepLocalTime || this._changeInProgress) {
+          addSubtract(
+            this,
+            createDuration(input - offset, 'm'),
+            1,
+            false
+          );
+        } else if (!this._changeInProgress) {
+          this._changeInProgress = true;
+          hooks.updateOffset(this, true);
+          this._changeInProgress = null;
+        }
+      }
+      return this;
+    } else {
+      return this._isUTC ? offset : getDateOffset(this);
+    }
+  }
+
+  function getSetZone(input, keepLocalTime) {
+    if (input != null) {
+      if (typeof input !== 'string') {
+        input = -input;
+      }
+
+      this.utcOffset(input, keepLocalTime);
+
+      return this;
+    } else {
+      return -this.utcOffset();
+    }
+  }
+
+  function setOffsetToUTC(keepLocalTime) {
+    return this.utcOffset(0, keepLocalTime);
+  }
+
+  function setOffsetToLocal(keepLocalTime) {
+    if (this._isUTC) {
+      this.utcOffset(0, keepLocalTime);
+      this._isUTC = false;
+
+      if (keepLocalTime) {
+        this.subtract(getDateOffset(this), 'm');
+      }
+    }
+    return this;
+  }
+
+  function setOffsetToParsedOffset() {
+    if (this._tzm != null) {
+      this.utcOffset(this._tzm, false, true);
+    } else if (typeof this._i === 'string') {
+      var tZone = offsetFromString(matchOffset, this._i);
+      if (tZone != null) {
+        this.utcOffset(tZone);
+      } else {
+        this.utcOffset(0, true);
+      }
+    }
+    return this;
+  }
+
+  function hasAlignedHourOffset(input) {
+    if (!this.isValid()) {
+      return false;
+    }
+    input = input ? createLocal(input).utcOffset() : 0;
+
+    return (this.utcOffset() - input) % 60 === 0;
+  }
+
+  function isDaylightSavingTime() {
+    return (
+      this.utcOffset() > this.clone().month(0).utcOffset() ||
+      this.utcOffset() > this.clone().month(5).utcOffset()
+    );
+  }
+
+  function isDaylightSavingTimeShifted() {
+    if (!isUndefined(this._isDSTShifted)) {
+      return this._isDSTShifted;
+    }
+
+    var c = {},
+      other;
+
+    copyConfig(c, this);
+    c = prepareConfig(c);
+
+    if (c._a) {
+      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
+      this._isDSTShifted =
+        this.isValid() && compareArrays(c._a, other.toArray()) > 0;
+    } else {
+      this._isDSTShifted = false;
+    }
+
+    return this._isDSTShifted;
+  }
+
+  function isLocal() {
+    return this.isValid() ? !this._isUTC : false;
+  }
+
+  function isUtcOffset() {
+    return this.isValid() ? this._isUTC : false;
+  }
+
+  function isUtc() {
+    return this.isValid() ? this._isUTC && this._offset === 0 : false;
+  }
+
+  // ASP.NET json date format regex
+  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
+    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
+    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
+    // and further modified to allow for strings containing both week and day
+    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
+
+  function createDuration(input, key) {
+    var duration = input,
+      // matching against regexp is expensive, do it on demand
+      match = null,
+      sign,
+      ret,
+      diffRes;
+
+    if (isDuration(input)) {
+      duration = {
+        ms: input._milliseconds,
+        d: input._days,
+        M: input._months,
+      };
+    } else if (isNumber(input) || !isNaN(+input)) {
+      duration = {};
+      if (key) {
+        duration[key] = +input;
+      } else {
+        duration.milliseconds = +input;
+      }
+    } else if ((match = aspNetRegex.exec(input))) {
+      sign = match[1] === '-' ? -1 : 1;
+      duration = {
+        y: 0,
+        d: toInt(match[DATE]) * sign,
+        h: toInt(match[HOUR]) * sign,
+        m: toInt(match[MINUTE]) * sign,
+        s: toInt(match[SECOND]) * sign,
+        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
+      };
+    } else if ((match = isoRegex.exec(input))) {
+      sign = match[1] === '-' ? -1 : 1;
+      duration = {
+        y: parseIso(match[2], sign),
+        M: parseIso(match[3], sign),
+        w: parseIso(match[4], sign),
+        d: parseIso(match[5], sign),
+        h: parseIso(match[6], sign),
+        m: parseIso(match[7], sign),
+        s: parseIso(match[8], sign),
+      };
+    } else if (duration == null) {
+      // checks for null or undefined
+      duration = {};
+    } else if (
+      typeof duration === 'object' &&
+      ('from' in duration || 'to' in duration)
+    ) {
+      diffRes = momentsDifference(
+        createLocal(duration.from),
+        createLocal(duration.to)
+      );
+
+      duration = {};
+      duration.ms = diffRes.milliseconds;
+      duration.M = diffRes.months;
+    }
+
+    ret = new Duration(duration);
+
+    if (isDuration(input) && hasOwnProp(input, '_locale')) {
+      ret._locale = input._locale;
+    }
+
+    if (isDuration(input) && hasOwnProp(input, '_isValid')) {
+      ret._isValid = input._isValid;
+    }
+
+    return ret;
+  }
+
+  createDuration.fn = Duration.prototype;
+  createDuration.invalid = createInvalid$1;
+
+  function parseIso(inp, sign) {
+    // We'd normally use ~~inp for this, but unfortunately it also
+    // converts floats to ints.
+    // inp may be undefined, so careful calling replace on it.
+    var res = inp && parseFloat(inp.replace(',', '.'));
+    // apply sign while we're at it
+    return (isNaN(res) ? 0 : res) * sign;
+  }
+
+  function positiveMomentsDifference(base, other) {
+    var res = {};
+
+    res.months =
+      other.month() - base.month() + (other.year() - base.year()) * 12;
+    if (base.clone().add(res.months, 'M').isAfter(other)) {
+      --res.months;
+    }
+
+    res.milliseconds = +other - +base.clone().add(res.months, 'M');
+
+    return res;
+  }
+
+  function momentsDifference(base, other) {
+    var res;
+    if (!(base.isValid() && other.isValid())) {
+      return { milliseconds: 0, months: 0 };
+    }
+
+    other = cloneWithOffset(other, base);
+    if (base.isBefore(other)) {
+      res = positiveMomentsDifference(base, other);
+    } else {
+      res = positiveMomentsDifference(other, base);
+      res.milliseconds = -res.milliseconds;
+      res.months = -res.months;
+    }
+
+    return res;
+  }
+
+  // TODO: remove 'name' arg after deprecation is removed
+  function createAdder(direction, name) {
+    return function (val, period) {
+      var dur, tmp;
+      //invert the arguments, but complain about it
+      if (period !== null && !isNaN(+period)) {
+        deprecateSimple(
+          name,
+          'moment().' +
+          name +
+          '(period, number) is deprecated. Please use moment().' +
+          name +
+          '(number, period). ' +
+          'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
+        );
+        tmp = val;
+        val = period;
+        period = tmp;
+      }
+
+      dur = createDuration(val, period);
+      addSubtract(this, dur, direction);
+      return this;
+    };
+  }
+
+  function addSubtract(mom, duration, isAdding, updateOffset) {
+    var milliseconds = duration._milliseconds,
+      days = absRound(duration._days),
+      months = absRound(duration._months);
+
+    if (!mom.isValid()) {
+      // No op
+      return;
+    }
+
+    updateOffset = updateOffset == null ? true : updateOffset;
+
+    if (months) {
+      setMonth(mom, get(mom, 'Month') + months * isAdding);
+    }
+    if (days) {
+      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
+    }
+    if (milliseconds) {
+      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
+    }
+    if (updateOffset) {
+      hooks.updateOffset(mom, days || months);
+    }
+  }
+
+  var add = createAdder(1, 'add'),
+    subtract = createAdder(-1, 'subtract');
+
+  function isString(input) {
+    return typeof input === 'string' || input instanceof String;
+  }
+
+  // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
+  function isMomentInput(input) {
+    return (
+      isMoment(input) ||
+      isDate(input) ||
+      isString(input) ||
+      isNumber(input) ||
+      isNumberOrStringArray(input) ||
+      isMomentInputObject(input) ||
+      input === null ||
+      input === undefined
+    );
+  }
+
+  function isMomentInputObject(input) {
+    var objectTest = isObject(input) && !isObjectEmpty(input),
+      propertyTest = false,
+      properties = [
+        'years',
+        'year',
+        'y',
+        'months',
+        'month',
+        'M',
+        'days',
+        'day',
+        'd',
+        'dates',
+        'date',
+        'D',
+        'hours',
+        'hour',
+        'h',
+        'minutes',
+        'minute',
+        'm',
+        'seconds',
+        'second',
+        's',
+        'milliseconds',
+        'millisecond',
+        'ms',
+      ],
+      i,
+      property;
+
+    for (i = 0; i < properties.length; i += 1) {
+      property = properties[i];
+      propertyTest = propertyTest || hasOwnProp(input, property);
+    }
+
+    return objectTest && propertyTest;
+  }
+
+  function isNumberOrStringArray(input) {
+    var arrayTest = isArray(input),
+      dataTypeTest = false;
+    if (arrayTest) {
+      dataTypeTest =
+        input.filter(function (item) {
+          return !isNumber(item) && isString(input);
+        }).length === 0;
+    }
+    return arrayTest && dataTypeTest;
+  }
+
+  function isCalendarSpec(input) {
+    var objectTest = isObject(input) && !isObjectEmpty(input),
+      propertyTest = false,
+      properties = [
+        'sameDay',
+        'nextDay',
+        'lastDay',
+        'nextWeek',
+        'lastWeek',
+        'sameElse',
+      ],
+      i,
+      property;
+
+    for (i = 0; i < properties.length; i += 1) {
+      property = properties[i];
+      propertyTest = propertyTest || hasOwnProp(input, property);
+    }
+
+    return objectTest && propertyTest;
+  }
+
+  function getCalendarFormat(myMoment, now) {
+    var diff = myMoment.diff(now, 'days', true);
+    return diff < -6
+      ? 'sameElse'
+      : diff < -1
+        ? 'lastWeek'
+        : diff < 0
+          ? 'lastDay'
+          : diff < 1
+            ? 'sameDay'
+            : diff < 2
+              ? 'nextDay'
+              : diff < 7
+                ? 'nextWeek'
+                : 'sameElse';
+  }
+
+  function calendar$1(time, formats) {
+    // Support for single parameter, formats only overload to the calendar function
+    if (arguments.length === 1) {
+      if (!arguments[0]) {
+        time = undefined;
+        formats = undefined;
+      } else if (isMomentInput(arguments[0])) {
+        time = arguments[0];
+        formats = undefined;
+      } else if (isCalendarSpec(arguments[0])) {
+        formats = arguments[0];
+        time = undefined;
+      }
+    }
+    // We want to compare the start of today, vs this.
+    // Getting start-of-today depends on whether we're local/utc/offset or not.
+    var now = time || createLocal(),
+      sod = cloneWithOffset(now, this).startOf('day'),
+      format = hooks.calendarFormat(this, sod) || 'sameElse',
+      output =
+        formats &&
+        (isFunction(formats[format])
+          ? formats[format].call(this, now)
+          : formats[format]);
+
+    return this.format(
+      output || this.localeData().calendar(format, this, createLocal(now))
+    );
+  }
+
+  function clone() {
+    return new Moment(this);
+  }
+
+  function isAfter(input, units) {
+    var localInput = isMoment(input) ? input : createLocal(input);
+    if (!(this.isValid() && localInput.isValid())) {
+      return false;
+    }
+    units = normalizeUnits(units) || 'millisecond';
+    if (units === 'millisecond') {
+      return this.valueOf() > localInput.valueOf();
+    } else {
+      return localInput.valueOf() < this.clone().startOf(units).valueOf();
+    }
+  }
+
+  function isBefore(input, units) {
+    var localInput = isMoment(input) ? input : createLocal(input);
+    if (!(this.isValid() && localInput.isValid())) {
+      return false;
+    }
+    units = normalizeUnits(units) || 'millisecond';
+    if (units === 'millisecond') {
+      return this.valueOf() < localInput.valueOf();
+    } else {
+      return this.clone().endOf(units).valueOf() < localInput.valueOf();
+    }
+  }
+
+  function isBetween(from, to, units, inclusivity) {
+    var localFrom = isMoment(from) ? from : createLocal(from),
+      localTo = isMoment(to) ? to : createLocal(to);
+    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
+      return false;
+    }
+    inclusivity = inclusivity || '()';
+    return (
+      (inclusivity[0] === '('
+        ? this.isAfter(localFrom, units)
+        : !this.isBefore(localFrom, units)) &&
+      (inclusivity[1] === ')'
+        ? this.isBefore(localTo, units)
+        : !this.isAfter(localTo, units))
+    );
+  }
+
+  function isSame(input, units) {
+    var localInput = isMoment(input) ? input : createLocal(input),
+      inputMs;
+    if (!(this.isValid() && localInput.isValid())) {
+      return false;
+    }
+    units = normalizeUnits(units) || 'millisecond';
+    if (units === 'millisecond') {
+      return this.valueOf() === localInput.valueOf();
+    } else {
+      inputMs = localInput.valueOf();
+      return (
+        this.clone().startOf(units).valueOf() <= inputMs &&
+        inputMs <= this.clone().endOf(units).valueOf()
+      );
+    }
+  }
+
+  function isSameOrAfter(input, units) {
+    return this.isSame(input, units) || this.isAfter(input, units);
+  }
+
+  function isSameOrBefore(input, units) {
+    return this.isSame(input, units) || this.isBefore(input, units);
+  }
+
+  function diff(input, units, asFloat) {
+    var that, zoneDelta, output;
+
+    if (!this.isValid()) {
+      return NaN;
+    }
+
+    that = cloneWithOffset(input, this);
+
+    if (!that.isValid()) {
+      return NaN;
+    }
+
+    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
+
+    units = normalizeUnits(units);
+
+    switch (units) {
+      case 'year':
+        output = monthDiff(this, that) / 12;
+        break;
+      case 'month':
+        output = monthDiff(this, that);
+        break;
+      case 'quarter':
+        output = monthDiff(this, that) / 3;
+        break;
+      case 'second':
+        output = (this - that) / 1e3;
+        break; // 1000
+      case 'minute':
+        output = (this - that) / 6e4;
+        break; // 1000 * 60
+      case 'hour':
+        output = (this - that) / 36e5;
+        break; // 1000 * 60 * 60
+      case 'day':
+        output = (this - that - zoneDelta) / 864e5;
+        break; // 1000 * 60 * 60 * 24, negate dst
+      case 'week':
+        output = (this - that - zoneDelta) / 6048e5;
+        break; // 1000 * 60 * 60 * 24 * 7, negate dst
+      default:
+        output = this - that;
+    }
+
+    return asFloat ? output : absFloor(output);
+  }
+
+  function monthDiff(a, b) {
+    if (a.date() < b.date()) {
+      // end-of-month calculations work correct when the start month has more
+      // days than the end month.
+      return -monthDiff(b, a);
+    }
+    // difference in months
+    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
+      // b is in (anchor - 1 month, anchor + 1 month)
+      anchor = a.clone().add(wholeMonthDiff, 'months'),
+      anchor2,
+      adjust;
+
+    if (b - anchor < 0) {
+      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
+      // linear across the month
+      adjust = (b - anchor) / (anchor - anchor2);
+    } else {
+      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
+      // linear across the month
+      adjust = (b - anchor) / (anchor2 - anchor);
+    }
+
+    //check for negative zero, return zero if negative zero
+    return -(wholeMonthDiff + adjust) || 0;
+  }
+
+  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
+  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
+
+  function toString() {
+    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
+  }
+
+  function toISOString(keepOffset) {
+    if (!this.isValid()) {
+      return null;
+    }
+    var utc = keepOffset !== true,
+      m = utc ? this.clone().utc() : this;
+    if (m.year() < 0 || m.year() > 9999) {
+      return formatMoment(
+        m,
+        utc
+          ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
+          : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
+      );
+    }
+    if (isFunction(Date.prototype.toISOString)) {
+      // native implementation is ~50x faster, use it when we can
+      if (utc) {
+        return this.toDate().toISOString();
+      } else {
+        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
+          .toISOString()
+          .replace('Z', formatMoment(m, 'Z'));
+      }
+    }
+    return formatMoment(
+      m,
+      utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
+    );
+  }
+
+  /**
+   * Return a human readable representation of a moment that can
+   * also be evaluated to get a new moment which is the same
+   *
+   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
+   */
+  function inspect() {
+    if (!this.isValid()) {
+      return 'moment.invalid(/* ' + this._i + ' */)';
+    }
+    var func = 'moment',
+      zone = '',
+      prefix,
+      year,
+      datetime,
+      suffix;
+    if (!this.isLocal()) {
+      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
+      zone = 'Z';
+    }
+    prefix = '[' + func + '("]';
+    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
+    datetime = '-MM-DD[T]HH:mm:ss.SSS';
+    suffix = zone + '[")]';
+
+    return this.format(prefix + year + datetime + suffix);
+  }
+
+  function format(inputString) {
+    if (!inputString) {
+      inputString = this.isUtc()
+        ? hooks.defaultFormatUtc
+        : hooks.defaultFormat;
+    }
+    var output = formatMoment(this, inputString);
+    return this.localeData().postformat(output);
+  }
+
+  function from(time, withoutSuffix) {
+    if (
+      this.isValid() &&
+      ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
+    ) {
+      return createDuration({ to: this, from: time })
+        .locale(this.locale())
+        .humanize(!withoutSuffix);
+    } else {
+      return this.localeData().invalidDate();
+    }
+  }
+
+  function fromNow(withoutSuffix) {
+    return this.from(createLocal(), withoutSuffix);
+  }
+
+  function to(time, withoutSuffix) {
+    if (
+      this.isValid() &&
+      ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
+    ) {
+      return createDuration({ from: this, to: time })
+        .locale(this.locale())
+        .humanize(!withoutSuffix);
+    } else {
+      return this.localeData().invalidDate();
+    }
+  }
+
+  function toNow(withoutSuffix) {
+    return this.to(createLocal(), withoutSuffix);
+  }
+
+  // If passed a locale key, it will set the locale for this
+  // instance.  Otherwise, it will return the locale configuration
+  // variables for this instance.
+  function locale(key) {
+    var newLocaleData;
+
+    if (key === undefined) {
+      return this._locale._abbr;
+    } else {
+      newLocaleData = getLocale(key);
+      if (newLocaleData != null) {
+        this._locale = newLocaleData;
+      }
+      return this;
+    }
+  }
+
+  var lang = deprecate(
+    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
+    function (key) {
+      if (key === undefined) {
+        return this.localeData();
+      } else {
+        return this.locale(key);
+      }
+    }
+  );
+
+  function localeData() {
+    return this._locale;
+  }
+
+  var MS_PER_SECOND = 1000,
+    MS_PER_MINUTE = 60 * MS_PER_SECOND,
+    MS_PER_HOUR = 60 * MS_PER_MINUTE,
+    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
+
+  // actual modulo - handles negative numbers (for dates before 1970):
+  function mod$1(dividend, divisor) {
+    return ((dividend % divisor) + divisor) % divisor;
+  }
+
+  function localStartOfDate(y, m, d) {
+    // the date constructor remaps years 0-99 to 1900-1999
+    if (y < 100 && y >= 0) {
+      // preserve leap years using a full 400 year cycle, then reset
+      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
+    } else {
+      return new Date(y, m, d).valueOf();
+    }
+  }
+
+  function utcStartOfDate(y, m, d) {
+    // Date.UTC remaps years 0-99 to 1900-1999
+    if (y < 100 && y >= 0) {
+      // preserve leap years using a full 400 year cycle, then reset
+      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
+    } else {
+      return Date.UTC(y, m, d);
+    }
+  }
+
+  function startOf(units) {
+    var time, startOfDate;
+    units = normalizeUnits(units);
+    if (units === undefined || units === 'millisecond' || !this.isValid()) {
+      return this;
+    }
+
+    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
+
+    switch (units) {
+      case 'year':
+        time = startOfDate(this.year(), 0, 1);
+        break;
+      case 'quarter':
+        time = startOfDate(
+          this.year(),
+          this.month() - (this.month() % 3),
+          1
+        );
+        break;
+      case 'month':
+        time = startOfDate(this.year(), this.month(), 1);
+        break;
+      case 'week':
+        time = startOfDate(
+          this.year(),
+          this.month(),
+          this.date() - this.weekday()
+        );
+        break;
+      case 'isoWeek':
+        time = startOfDate(
+          this.year(),
+          this.month(),
+          this.date() - (this.isoWeekday() - 1)
+        );
+        break;
+      case 'day':
+      case 'date':
+        time = startOfDate(this.year(), this.month(), this.date());
+        break;
+      case 'hour':
+        time = this._d.valueOf();
+        time -= mod$1(
+          time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
+          MS_PER_HOUR
+        );
+        break;
+      case 'minute':
+        time = this._d.valueOf();
+        time -= mod$1(time, MS_PER_MINUTE);
+        break;
+      case 'second':
+        time = this._d.valueOf();
+        time -= mod$1(time, MS_PER_SECOND);
+        break;
+    }
+
+    this._d.setTime(time);
+    hooks.updateOffset(this, true);
+    return this;
+  }
+
+  function endOf(units) {
+    var time, startOfDate;
+    units = normalizeUnits(units);
+    if (units === undefined || units === 'millisecond' || !this.isValid()) {
+      return this;
+    }
+
+    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
+
+    switch (units) {
+      case 'year':
+        time = startOfDate(this.year() + 1, 0, 1) - 1;
+        break;
+      case 'quarter':
+        time =
+          startOfDate(
+            this.year(),
+            this.month() - (this.month() % 3) + 3,
+            1
+          ) - 1;
+        break;
+      case 'month':
+        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
+        break;
+      case 'week':
+        time =
+          startOfDate(
+            this.year(),
+            this.month(),
+            this.date() - this.weekday() + 7
+          ) - 1;
+        break;
+      case 'isoWeek':
+        time =
+          startOfDate(
+            this.year(),
+            this.month(),
+            this.date() - (this.isoWeekday() - 1) + 7
+          ) - 1;
+        break;
+      case 'day':
+      case 'date':
+        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
+        break;
+      case 'hour':
+        time = this._d.valueOf();
+        time +=
+          MS_PER_HOUR -
+          mod$1(
+            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
+            MS_PER_HOUR
+          ) -
+          1;
+        break;
+      case 'minute':
+        time = this._d.valueOf();
+        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
+        break;
+      case 'second':
+        time = this._d.valueOf();
+        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
+        break;
+    }
+
+    this._d.setTime(time);
+    hooks.updateOffset(this, true);
+    return this;
+  }
+
+  function valueOf() {
+    return this._d.valueOf() - (this._offset || 0) * 60000;
+  }
+
+  function unix() {
+    return Math.floor(this.valueOf() / 1000);
+  }
+
+  function toDate() {
+    return new Date(this.valueOf());
+  }
+
+  function toArray() {
+    var m = this;
+    return [
+      m.year(),
+      m.month(),
+      m.date(),
+      m.hour(),
+      m.minute(),
+      m.second(),
+      m.millisecond(),
+    ];
+  }
+
+  function toObject() {
+    var m = this;
+    return {
+      years: m.year(),
+      months: m.month(),
+      date: m.date(),
+      hours: m.hours(),
+      minutes: m.minutes(),
+      seconds: m.seconds(),
+      milliseconds: m.milliseconds(),
+    };
+  }
+
+  function toJSON() {
+    // new Date(NaN).toJSON() === null
+    return this.isValid() ? this.toISOString() : null;
+  }
+
+  function isValid$2() {
+    return isValid(this);
+  }
+
+  function parsingFlags() {
+    return extend({}, getParsingFlags(this));
+  }
+
+  function invalidAt() {
+    return getParsingFlags(this).overflow;
+  }
+
+  function creationData() {
+    return {
+      input: this._i,
+      format: this._f,
+      locale: this._locale,
+      isUTC: this._isUTC,
+      strict: this._strict,
+    };
+  }
+
+  addFormatToken('N', 0, 0, 'eraAbbr');
+  addFormatToken('NN', 0, 0, 'eraAbbr');
+  addFormatToken('NNN', 0, 0, 'eraAbbr');
+  addFormatToken('NNNN', 0, 0, 'eraName');
+  addFormatToken('NNNNN', 0, 0, 'eraNarrow');
+
+  addFormatToken('y', ['y', 1], 'yo', 'eraYear');
+  addFormatToken('y', ['yy', 2], 0, 'eraYear');
+  addFormatToken('y', ['yyy', 3], 0, 'eraYear');
+  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
+
+  addRegexToken('N', matchEraAbbr);
+  addRegexToken('NN', matchEraAbbr);
+  addRegexToken('NNN', matchEraAbbr);
+  addRegexToken('NNNN', matchEraName);
+  addRegexToken('NNNNN', matchEraNarrow);
+
+  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
+    input,
+    array,
+    config,
+    token
+  ) {
+    var era = config._locale.erasParse(input, token, config._strict);
+    if (era) {
+      getParsingFlags(config).era = era;
+    } else {
+      getParsingFlags(config).invalidEra = input;
+    }
+  });
+
+  addRegexToken('y', matchUnsigned);
+  addRegexToken('yy', matchUnsigned);
+  addRegexToken('yyy', matchUnsigned);
+  addRegexToken('yyyy', matchUnsigned);
+  addRegexToken('yo', matchEraYearOrdinal);
+
+  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
+  addParseToken(['yo'], function (input, array, config, token) {
+    var match;
+    if (config._locale._eraYearOrdinalRegex) {
+      match = input.match(config._locale._eraYearOrdinalRegex);
+    }
+
+    if (config._locale.eraYearOrdinalParse) {
+      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
+    } else {
+      array[YEAR] = parseInt(input, 10);
+    }
+  });
+
+  function localeEras(m, format) {
+    var i,
+      l,
+      date,
+      eras = this._eras || getLocale('en')._eras;
+    for (i = 0, l = eras.length; i < l; ++i) {
+      switch (typeof eras[i].since) {
+        case 'string':
+          // truncate time
+          date = hooks(eras[i].since).startOf('day');
+          eras[i].since = date.valueOf();
+          break;
+      }
+
+      switch (typeof eras[i].until) {
+        case 'undefined':
+          eras[i].until = +Infinity;
+          break;
+        case 'string':
+          // truncate time
+          date = hooks(eras[i].until).startOf('day').valueOf();
+          eras[i].until = date.valueOf();
+          break;
+      }
+    }
+    return eras;
+  }
+
+  function localeErasParse(eraName, format, strict) {
+    var i,
+      l,
+      eras = this.eras(),
+      name,
+      abbr,
+      narrow;
+    eraName = eraName.toUpperCase();
+
+    for (i = 0, l = eras.length; i < l; ++i) {
+      name = eras[i].name.toUpperCase();
+      abbr = eras[i].abbr.toUpperCase();
+      narrow = eras[i].narrow.toUpperCase();
+
+      if (strict) {
+        switch (format) {
+          case 'N':
+          case 'NN':
+          case 'NNN':
+            if (abbr === eraName) {
+              return eras[i];
+            }
+            break;
+
+          case 'NNNN':
+            if (name === eraName) {
+              return eras[i];
+            }
+            break;
+
+          case 'NNNNN':
+            if (narrow === eraName) {
+              return eras[i];
+            }
+            break;
+        }
+      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
+        return eras[i];
+      }
+    }
+  }
+
+  function localeErasConvertYear(era, year) {
+    var dir = era.since <= era.until ? +1 : -1;
+    if (year === undefined) {
+      return hooks(era.since).year();
+    } else {
+      return hooks(era.since).year() + (year - era.offset) * dir;
+    }
+  }
+
+  function getEraName() {
+    var i,
+      l,
+      val,
+      eras = this.localeData().eras();
+    for (i = 0, l = eras.length; i < l; ++i) {
+      // truncate time
+      val = this.clone().startOf('day').valueOf();
+
+      if (eras[i].since <= val && val <= eras[i].until) {
+        return eras[i].name;
+      }
+      if (eras[i].until <= val && val <= eras[i].since) {
+        return eras[i].name;
+      }
+    }
+
+    return '';
+  }
+
+  function getEraNarrow() {
+    var i,
+      l,
+      val,
+      eras = this.localeData().eras();
+    for (i = 0, l = eras.length; i < l; ++i) {
+      // truncate time
+      val = this.clone().startOf('day').valueOf();
+
+      if (eras[i].since <= val && val <= eras[i].until) {
+        return eras[i].narrow;
+      }
+      if (eras[i].until <= val && val <= eras[i].since) {
+        return eras[i].narrow;
+      }
+    }
+
+    return '';
+  }
+
+  function getEraAbbr() {
+    var i,
+      l,
+      val,
+      eras = this.localeData().eras();
+    for (i = 0, l = eras.length; i < l; ++i) {
+      // truncate time
+      val = this.clone().startOf('day').valueOf();
+
+      if (eras[i].since <= val && val <= eras[i].until) {
+        return eras[i].abbr;
+      }
+      if (eras[i].until <= val && val <= eras[i].since) {
+        return eras[i].abbr;
+      }
+    }
+
+    return '';
+  }
+
+  function getEraYear() {
+    var i,
+      l,
+      dir,
+      val,
+      eras = this.localeData().eras();
+    for (i = 0, l = eras.length; i < l; ++i) {
+      dir = eras[i].since <= eras[i].until ? +1 : -1;
+
+      // truncate time
+      val = this.clone().startOf('day').valueOf();
+
+      if (
+        (eras[i].since <= val && val <= eras[i].until) ||
+        (eras[i].until <= val && val <= eras[i].since)
+      ) {
+        return (
+          (this.year() - hooks(eras[i].since).year()) * dir +
+          eras[i].offset
+        );
+      }
+    }
+
+    return this.year();
+  }
+
+  function erasNameRegex(isStrict) {
+    if (!hasOwnProp(this, '_erasNameRegex')) {
+      computeErasParse.call(this);
+    }
+    return isStrict ? this._erasNameRegex : this._erasRegex;
+  }
+
+  function erasAbbrRegex(isStrict) {
+    if (!hasOwnProp(this, '_erasAbbrRegex')) {
+      computeErasParse.call(this);
+    }
+    return isStrict ? this._erasAbbrRegex : this._erasRegex;
+  }
+
+  function erasNarrowRegex(isStrict) {
+    if (!hasOwnProp(this, '_erasNarrowRegex')) {
+      computeErasParse.call(this);
+    }
+    return isStrict ? this._erasNarrowRegex : this._erasRegex;
+  }
+
+  function matchEraAbbr(isStrict, locale) {
+    return locale.erasAbbrRegex(isStrict);
+  }
+
+  function matchEraName(isStrict, locale) {
+    return locale.erasNameRegex(isStrict);
+  }
+
+  function matchEraNarrow(isStrict, locale) {
+    return locale.erasNarrowRegex(isStrict);
+  }
+
+  function matchEraYearOrdinal(isStrict, locale) {
+    return locale._eraYearOrdinalRegex || matchUnsigned;
+  }
+
+  function computeErasParse() {
+    var abbrPieces = [],
+      namePieces = [],
+      narrowPieces = [],
+      mixedPieces = [],
+      i,
+      l,
+      eras = this.eras();
+
+    for (i = 0, l = eras.length; i < l; ++i) {
+      namePieces.push(regexEscape(eras[i].name));
+      abbrPieces.push(regexEscape(eras[i].abbr));
+      narrowPieces.push(regexEscape(eras[i].narrow));
+
+      mixedPieces.push(regexEscape(eras[i].name));
+      mixedPieces.push(regexEscape(eras[i].abbr));
+      mixedPieces.push(regexEscape(eras[i].narrow));
+    }
+
+    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
+    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
+    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
+    this._erasNarrowRegex = new RegExp(
+      '^(' + narrowPieces.join('|') + ')',
+      'i'
+    );
+  }
+
+  // FORMATTING
+
+  addFormatToken(0, ['gg', 2], 0, function () {
+    return this.weekYear() % 100;
+  });
+
+  addFormatToken(0, ['GG', 2], 0, function () {
+    return this.isoWeekYear() % 100;
+  });
+
+  function addWeekYearFormatToken(token, getter) {
+    addFormatToken(0, [token, token.length], 0, getter);
+  }
+
+  addWeekYearFormatToken('gggg', 'weekYear');
+  addWeekYearFormatToken('ggggg', 'weekYear');
+  addWeekYearFormatToken('GGGG', 'isoWeekYear');
+  addWeekYearFormatToken('GGGGG', 'isoWeekYear');
+
+  // ALIASES
+
+  addUnitAlias('weekYear', 'gg');
+  addUnitAlias('isoWeekYear', 'GG');
+
+  // PRIORITY
+
+  addUnitPriority('weekYear', 1);
+  addUnitPriority('isoWeekYear', 1);
+
+  // PARSING
+
+  addRegexToken('G', matchSigned);
+  addRegexToken('g', matchSigned);
+  addRegexToken('GG', match1to2, match2);
+  addRegexToken('gg', match1to2, match2);
+  addRegexToken('GGGG', match1to4, match4);
+  addRegexToken('gggg', match1to4, match4);
+  addRegexToken('GGGGG', match1to6, match6);
+  addRegexToken('ggggg', match1to6, match6);
+
+  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
+    input,
+    week,
+    config,
+    token
+  ) {
+    week[token.substr(0, 2)] = toInt(input);
+  });
+
+  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
+    week[token] = hooks.parseTwoDigitYear(input);
+  });
+
+  // MOMENTS
+
+  function getSetWeekYear(input) {
+    return getSetWeekYearHelper.call(
+      this,
+      input,
+      this.week(),
+      this.weekday(),
+      this.localeData()._week.dow,
+      this.localeData()._week.doy
+    );
+  }
+
+  function getSetISOWeekYear(input) {
+    return getSetWeekYearHelper.call(
+      this,
+      input,
+      this.isoWeek(),
+      this.isoWeekday(),
+      1,
+      4
+    );
+  }
+
+  function getISOWeeksInYear() {
+    return weeksInYear(this.year(), 1, 4);
+  }
+
+  function getISOWeeksInISOWeekYear() {
+    return weeksInYear(this.isoWeekYear(), 1, 4);
+  }
+
+  function getWeeksInYear() {
+    var weekInfo = this.localeData()._week;
+    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
+  }
+
+  function getWeeksInWeekYear() {
+    var weekInfo = this.localeData()._week;
+    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
+  }
+
+  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
+    var weeksTarget;
+    if (input == null) {
+      return weekOfYear(this, dow, doy).year;
+    } else {
+      weeksTarget = weeksInYear(input, dow, doy);
+      if (week > weeksTarget) {
+        week = weeksTarget;
+      }
+      return setWeekAll.call(this, input, week, weekday, dow, doy);
+    }
+  }
+
+  function setWeekAll(weekYear, week, weekday, dow, doy) {
+    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
+      date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
+
+    this.year(date.getUTCFullYear());
+    this.month(date.getUTCMonth());
+    this.date(date.getUTCDate());
+    return this;
+  }
+
+  // FORMATTING
+
+  addFormatToken('Q', 0, 'Qo', 'quarter');
+
+  // ALIASES
+
+  addUnitAlias('quarter', 'Q');
+
+  // PRIORITY
+
+  addUnitPriority('quarter', 7);
+
+  // PARSING
+
+  addRegexToken('Q', match1);
+  addParseToken('Q', function (input, array) {
+    array[MONTH] = (toInt(input) - 1) * 3;
+  });
+
+  // MOMENTS
+
+  function getSetQuarter(input) {
+    return input == null
+      ? Math.ceil((this.month() + 1) / 3)
+      : this.month((input - 1) * 3 + (this.month() % 3));
+  }
+
+  // FORMATTING
+
+  addFormatToken('D', ['DD', 2], 'Do', 'date');
+
+  // ALIASES
+
+  addUnitAlias('date', 'D');
+
+  // PRIORITY
+  addUnitPriority('date', 9);
+
+  // PARSING
+
+  addRegexToken('D', match1to2);
+  addRegexToken('DD', match1to2, match2);
+  addRegexToken('Do', function (isStrict, locale) {
+    // TODO: Remove "ordinalParse" fallback in next major release.
+    return isStrict
+      ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
+      : locale._dayOfMonthOrdinalParseLenient;
+  });
+
+  addParseToken(['D', 'DD'], DATE);
+  addParseToken('Do', function (input, array) {
+    array[DATE] = toInt(input.match(match1to2)[0]);
+  });
+
+  // MOMENTS
+
+  var getSetDayOfMonth = makeGetSet('Date', true);
+
+  // FORMATTING
+
+  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
+
+  // ALIASES
+
+  addUnitAlias('dayOfYear', 'DDD');
+
+  // PRIORITY
+  addUnitPriority('dayOfYear', 4);
+
+  // PARSING
+
+  addRegexToken('DDD', match1to3);
+  addRegexToken('DDDD', match3);
+  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
+    config._dayOfYear = toInt(input);
+  });
+
+  // HELPERS
+
+  // MOMENTS
+
+  function getSetDayOfYear(input) {
+    var dayOfYear =
+      Math.round(
+        (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
+      ) + 1;
+    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
+  }
+
+  // FORMATTING
+
+  addFormatToken('m', ['mm', 2], 0, 'minute');
+
+  // ALIASES
+
+  addUnitAlias('minute', 'm');
+
+  // PRIORITY
+
+  addUnitPriority('minute', 14);
+
+  // PARSING
+
+  addRegexToken('m', match1to2);
+  addRegexToken('mm', match1to2, match2);
+  addParseToken(['m', 'mm'], MINUTE);
+
+  // MOMENTS
+
+  var getSetMinute = makeGetSet('Minutes', false);
+
+  // FORMATTING
+
+  addFormatToken('s', ['ss', 2], 0, 'second');
+
+  // ALIASES
+
+  addUnitAlias('second', 's');
+
+  // PRIORITY
+
+  addUnitPriority('second', 15);
+
+  // PARSING
+
+  addRegexToken('s', match1to2);
+  addRegexToken('ss', match1to2, match2);
+  addParseToken(['s', 'ss'], SECOND);
+
+  // MOMENTS
+
+  var getSetSecond = makeGetSet('Seconds', false);
+
+  // FORMATTING
+
+  addFormatToken('S', 0, 0, function () {
+    return ~~(this.millisecond() / 100);
+  });
+
+  addFormatToken(0, ['SS', 2], 0, function () {
+    return ~~(this.millisecond() / 10);
+  });
+
+  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
+  addFormatToken(0, ['SSSS', 4], 0, function () {
+    return this.millisecond() * 10;
+  });
+  addFormatToken(0, ['SSSSS', 5], 0, function () {
+    return this.millisecond() * 100;
+  });
+  addFormatToken(0, ['SSSSSS', 6], 0, function () {
+    return this.millisecond() * 1000;
+  });
+  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
+    return this.millisecond() * 10000;
+  });
+  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
+    return this.millisecond() * 100000;
+  });
+  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
+    return this.millisecond() * 1000000;
+  });
+
+  // ALIASES
+
+  addUnitAlias('millisecond', 'ms');
+
+  // PRIORITY
+
+  addUnitPriority('millisecond', 16);
+
+  // PARSING
+
+  addRegexToken('S', match1to3, match1);
+  addRegexToken('SS', match1to3, match2);
+  addRegexToken('SSS', match1to3, match3);
+
+  var token, getSetMillisecond;
+  for (token = 'SSSS'; token.length <= 9; token += 'S') {
+    addRegexToken(token, matchUnsigned);
+  }
+
+  function parseMs(input, array) {
+    array[MILLISECOND] = toInt(('0.' + input) * 1000);
+  }
+
+  for (token = 'S'; token.length <= 9; token += 'S') {
+    addParseToken(token, parseMs);
+  }
+
+  getSetMillisecond = makeGetSet('Milliseconds', false);
+
+  // FORMATTING
+
+  addFormatToken('z', 0, 0, 'zoneAbbr');
+  addFormatToken('zz', 0, 0, 'zoneName');
+
+  // MOMENTS
+
+  function getZoneAbbr() {
+    return this._isUTC ? 'UTC' : '';
+  }
+
+  function getZoneName() {
+    return this._isUTC ? 'Coordinated Universal Time' : '';
+  }
+
+  var proto = Moment.prototype;
+
+  proto.add = add;
+  proto.calendar = calendar$1;
+  proto.clone = clone;
+  proto.diff = diff;
+  proto.endOf = endOf;
+  proto.format = format;
+  proto.from = from;
+  proto.fromNow = fromNow;
+  proto.to = to;
+  proto.toNow = toNow;
+  proto.get = stringGet;
+  proto.invalidAt = invalidAt;
+  proto.isAfter = isAfter;
+  proto.isBefore = isBefore;
+  proto.isBetween = isBetween;
+  proto.isSame = isSame;
+  proto.isSameOrAfter = isSameOrAfter;
+  proto.isSameOrBefore = isSameOrBefore;
+  proto.isValid = isValid$2;
+  proto.lang = lang;
+  proto.locale = locale;
+  proto.localeData = localeData;
+  proto.max = prototypeMax;
+  proto.min = prototypeMin;
+  proto.parsingFlags = parsingFlags;
+  proto.set = stringSet;
+  proto.startOf = startOf;
+  proto.subtract = subtract;
+  proto.toArray = toArray;
+  proto.toObject = toObject;
+  proto.toDate = toDate;
+  proto.toISOString = toISOString;
+  proto.inspect = inspect;
+  if (typeof Symbol !== 'undefined' && Symbol.for != null) {
+    proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
+      return 'Moment<' + this.format() + '>';
+    };
+  }
+  proto.toJSON = toJSON;
+  proto.toString = toString;
+  proto.unix = unix;
+  proto.valueOf = valueOf;
+  proto.creationData = creationData;
+  proto.eraName = getEraName;
+  proto.eraNarrow = getEraNarrow;
+  proto.eraAbbr = getEraAbbr;
+  proto.eraYear = getEraYear;
+  proto.year = getSetYear;
+  proto.isLeapYear = getIsLeapYear;
+  proto.weekYear = getSetWeekYear;
+  proto.isoWeekYear = getSetISOWeekYear;
+  proto.quarter = proto.quarters = getSetQuarter;
+  proto.month = getSetMonth;
+  proto.daysInMonth = getDaysInMonth;
+  proto.week = proto.weeks = getSetWeek;
+  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
+  proto.weeksInYear = getWeeksInYear;
+  proto.weeksInWeekYear = getWeeksInWeekYear;
+  proto.isoWeeksInYear = getISOWeeksInYear;
+  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
+  proto.date = getSetDayOfMonth;
+  proto.day = proto.days = getSetDayOfWeek;
+  proto.weekday = getSetLocaleDayOfWeek;
+  proto.isoWeekday = getSetISODayOfWeek;
+  proto.dayOfYear = getSetDayOfYear;
+  proto.hour = proto.hours = getSetHour;
+  proto.minute = proto.minutes = getSetMinute;
+  proto.second = proto.seconds = getSetSecond;
+  proto.millisecond = proto.milliseconds = getSetMillisecond;
+  proto.utcOffset = getSetOffset;
+  proto.utc = setOffsetToUTC;
+  proto.local = setOffsetToLocal;
+  proto.parseZone = setOffsetToParsedOffset;
+  proto.hasAlignedHourOffset = hasAlignedHourOffset;
+  proto.isDST = isDaylightSavingTime;
+  proto.isLocal = isLocal;
+  proto.isUtcOffset = isUtcOffset;
+  proto.isUtc = isUtc;
+  proto.isUTC = isUtc;
+  proto.zoneAbbr = getZoneAbbr;
+  proto.zoneName = getZoneName;
+  proto.dates = deprecate(
+    'dates accessor is deprecated. Use date instead.',
+    getSetDayOfMonth
+  );
+  proto.months = deprecate(
+    'months accessor is deprecated. Use month instead',
+    getSetMonth
+  );
+  proto.years = deprecate(
+    'years accessor is deprecated. Use year instead',
+    getSetYear
+  );
+  proto.zone = deprecate(
+    'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
+    getSetZone
+  );
+  proto.isDSTShifted = deprecate(
+    'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
+    isDaylightSavingTimeShifted
+  );
+
+  function createUnix(input) {
+    return createLocal(input * 1000);
+  }
+
+  function createInZone() {
+    return createLocal.apply(null, arguments).parseZone();
+  }
+
+  function preParsePostFormat(string) {
+    return string;
+  }
+
+  var proto$1 = Locale.prototype;
+
+  proto$1.calendar = calendar;
+  proto$1.longDateFormat = longDateFormat;
+  proto$1.invalidDate = invalidDate;
+  proto$1.ordinal = ordinal;
+  proto$1.preparse = preParsePostFormat;
+  proto$1.postformat = preParsePostFormat;
+  proto$1.relativeTime = relativeTime;
+  proto$1.pastFuture = pastFuture;
+  proto$1.set = set;
+  proto$1.eras = localeEras;
+  proto$1.erasParse = localeErasParse;
+  proto$1.erasConvertYear = localeErasConvertYear;
+  proto$1.erasAbbrRegex = erasAbbrRegex;
+  proto$1.erasNameRegex = erasNameRegex;
+  proto$1.erasNarrowRegex = erasNarrowRegex;
+
+  proto$1.months = localeMonths;
+  proto$1.monthsShort = localeMonthsShort;
+  proto$1.monthsParse = localeMonthsParse;
+  proto$1.monthsRegex = monthsRegex;
+  proto$1.monthsShortRegex = monthsShortRegex;
+  proto$1.week = localeWeek;
+  proto$1.firstDayOfYear = localeFirstDayOfYear;
+  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
+
+  proto$1.weekdays = localeWeekdays;
+  proto$1.weekdaysMin = localeWeekdaysMin;
+  proto$1.weekdaysShort = localeWeekdaysShort;
+  proto$1.weekdaysParse = localeWeekdaysParse;
+
+  proto$1.weekdaysRegex = weekdaysRegex;
+  proto$1.weekdaysShortRegex = weekdaysShortRegex;
+  proto$1.weekdaysMinRegex = weekdaysMinRegex;
+
+  proto$1.isPM = localeIsPM;
+  proto$1.meridiem = localeMeridiem;
+
+  function get$1(format, index, field, setter) {
+    var locale = getLocale(),
+      utc = createUTC().set(setter, index);
+    return locale[field](utc, format);
+  }
+
+  function listMonthsImpl(format, index, field) {
+    if (isNumber(format)) {
+      index = format;
+      format = undefined;
+    }
+
+    format = format || '';
+
+    if (index != null) {
+      return get$1(format, index, field, 'month');
+    }
+
+    var i,
+      out = [];
+    for (i = 0; i < 12; i++) {
+      out[i] = get$1(format, i, field, 'month');
+    }
+    return out;
+  }
+
+  // ()
+  // (5)
+  // (fmt, 5)
+  // (fmt)
+  // (true)
+  // (true, 5)
+  // (true, fmt, 5)
+  // (true, fmt)
+  function listWeekdaysImpl(localeSorted, format, index, field) {
+    if (typeof localeSorted === 'boolean') {
+      if (isNumber(format)) {
+        index = format;
+        format = undefined;
+      }
+
+      format = format || '';
+    } else {
+      format = localeSorted;
+      index = format;
+      localeSorted = false;
+
+      if (isNumber(format)) {
+        index = format;
+        format = undefined;
+      }
+
+      format = format || '';
+    }
+
+    var locale = getLocale(),
+      shift = localeSorted ? locale._week.dow : 0,
+      i,
+      out = [];
+
+    if (index != null) {
+      return get$1(format, (index + shift) % 7, field, 'day');
+    }
+
+    for (i = 0; i < 7; i++) {
+      out[i] = get$1(format, (i + shift) % 7, field, 'day');
+    }
+    return out;
+  }
+
+  function listMonths(format, index) {
+    return listMonthsImpl(format, index, 'months');
+  }
+
+  function listMonthsShort(format, index) {
+    return listMonthsImpl(format, index, 'monthsShort');
+  }
+
+  function listWeekdays(localeSorted, format, index) {
+    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
+  }
+
+  function listWeekdaysShort(localeSorted, format, index) {
+    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
+  }
+
+  function listWeekdaysMin(localeSorted, format, index) {
+    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
+  }
+
+  getSetGlobalLocale('en', {
+    eras: [
+      {
+        since: '0001-01-01',
+        until: +Infinity,
+        offset: 1,
+        name: 'Anno Domini',
+        narrow: 'AD',
+        abbr: 'AD',
+      },
+      {
+        since: '0000-12-31',
+        until: -Infinity,
+        offset: 1,
+        name: 'Before Christ',
+        narrow: 'BC',
+        abbr: 'BC',
+      },
+    ],
+    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
+    ordinal: function (number) {
+      var b = number % 10,
+        output =
+          toInt((number % 100) / 10) === 1
+            ? 'th'
+            : b === 1
+            ? 'st'
+            : b === 2
+              ? 'nd'
+              : b === 3
+                ? 'rd'
+                : 'th';
+      return number + output;
+    },
+  });
+
+  // Side effect imports
+
+  hooks.lang = deprecate(
+    'moment.lang is deprecated. Use moment.locale instead.',
+    getSetGlobalLocale
+  );
+  hooks.langData = deprecate(
+    'moment.langData is deprecated. Use moment.localeData instead.',
+    getLocale
+  );
+
+  var mathAbs = Math.abs;
+
+  function abs() {
+    var data = this._data;
+
+    this._milliseconds = mathAbs(this._milliseconds);
+    this._days = mathAbs(this._days);
+    this._months = mathAbs(this._months);
+
+    data.milliseconds = mathAbs(data.milliseconds);
+    data.seconds = mathAbs(data.seconds);
+    data.minutes = mathAbs(data.minutes);
+    data.hours = mathAbs(data.hours);
+    data.months = mathAbs(data.months);
+    data.years = mathAbs(data.years);
+
+    return this;
+  }
+
+  function addSubtract$1(duration, input, value, direction) {
+    var other = createDuration(input, value);
+
+    duration._milliseconds += direction * other._milliseconds;
+    duration._days += direction * other._days;
+    duration._months += direction * other._months;
+
+    return duration._bubble();
+  }
+
+  // supports only 2.0-style add(1, 's') or add(duration)
+  function add$1(input, value) {
+    return addSubtract$1(this, input, value, 1);
+  }
+
+  // supports only 2.0-style subtract(1, 's') or subtract(duration)
+  function subtract$1(input, value) {
+    return addSubtract$1(this, input, value, -1);
+  }
+
+  function absCeil(number) {
+    if (number < 0) {
+      return Math.floor(number);
+    } else {
+      return Math.ceil(number);
+    }
+  }
+
+  function bubble() {
+    var milliseconds = this._milliseconds,
+      days = this._days,
+      months = this._months,
+      data = this._data,
+      seconds,
+      minutes,
+      hours,
+      years,
+      monthsFromDays;
+
+    // if we have a mix of positive and negative values, bubble down first
+    // check: https://github.com/moment/moment/issues/2166
+    if (
+      !(
+        (milliseconds >= 0 && days >= 0 && months >= 0) ||
+        (milliseconds <= 0 && days <= 0 && months <= 0)
+      )
+    ) {
+      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
+      days = 0;
+      months = 0;
+    }
+
+    // The following code bubbles up values, see the tests for
+    // examples of what that means.
+    data.milliseconds = milliseconds % 1000;
+
+    seconds = absFloor(milliseconds / 1000);
+    data.seconds = seconds % 60;
+
+    minutes = absFloor(seconds / 60);
+    data.minutes = minutes % 60;
+
+    hours = absFloor(minutes / 60);
+    data.hours = hours % 24;
+
+    days += absFloor(hours / 24);
+
+    // convert days to months
+    monthsFromDays = absFloor(daysToMonths(days));
+    months += monthsFromDays;
+    days -= absCeil(monthsToDays(monthsFromDays));
+
+    // 12 months -> 1 year
+    years = absFloor(months / 12);
+    months %= 12;
+
+    data.days = days;
+    data.months = months;
+    data.years = years;
+
+    return this;
+  }
+
+  function daysToMonths(days) {
+    // 400 years have 146097 days (taking into account leap year rules)
+    // 400 years have 12 months === 4800
+    return (days * 4800) / 146097;
+  }
+
+  function monthsToDays(months) {
+    // the reverse of daysToMonths
+    return (months * 146097) / 4800;
+  }
+
+  function as(units) {
+    if (!this.isValid()) {
+      return NaN;
+    }
+    var days,
+      months,
+      milliseconds = this._milliseconds;
+
+    units = normalizeUnits(units);
+
+    if (units === 'month' || units === 'quarter' || units === 'year') {
+      days = this._days + milliseconds / 864e5;
+      months = this._months + daysToMonths(days);
+      switch (units) {
+        case 'month':
+          return months;
+        case 'quarter':
+          return months / 3;
+        case 'year':
+          return months / 12;
+      }
+    } else {
+      // handle milliseconds separately because of floating point math errors (issue #1867)
+      days = this._days + Math.round(monthsToDays(this._months));
+      switch (units) {
+        case 'week':
+          return days / 7 + milliseconds / 6048e5;
+        case 'day':
+          return days + milliseconds / 864e5;
+        case 'hour':
+          return days * 24 + milliseconds / 36e5;
+        case 'minute':
+          return days * 1440 + milliseconds / 6e4;
+        case 'second':
+          return days * 86400 + milliseconds / 1000;
+        // Math.floor prevents floating point math errors here
+        case 'millisecond':
+          return Math.floor(days * 864e5) + milliseconds;
+        default:
+          throw new Error('Unknown unit ' + units);
+      }
+    }
+  }
+
+  // TODO: Use this.as('ms')?
+  function valueOf$1() {
+    if (!this.isValid()) {
+      return NaN;
+    }
+    return (
+      this._milliseconds +
+      this._days * 864e5 +
+      (this._months % 12) * 2592e6 +
+      toInt(this._months / 12) * 31536e6
+    );
+  }
+
+  function makeAs(alias) {
+    return function () {
+      return this.as(alias);
+    };
+  }
+
+  var asMilliseconds = makeAs('ms'),
+    asSeconds = makeAs('s'),
+    asMinutes = makeAs('m'),
+    asHours = makeAs('h'),
+    asDays = makeAs('d'),
+    asWeeks = makeAs('w'),
+    asMonths = makeAs('M'),
+    asQuarters = makeAs('Q'),
+    asYears = makeAs('y');
+
+  function clone$1() {
+    return createDuration(this);
+  }
+
+  function get$2(units) {
+    units = normalizeUnits(units);
+    return this.isValid() ? this[units + 's']() : NaN;
+  }
+
+  function makeGetter(name) {
+    return function () {
+      return this.isValid() ? this._data[name] : NaN;
+    };
+  }
+
+  var milliseconds = makeGetter('milliseconds'),
+    seconds = makeGetter('seconds'),
+    minutes = makeGetter('minutes'),
+    hours = makeGetter('hours'),
+    days = makeGetter('days'),
+    months = makeGetter('months'),
+    years = makeGetter('years');
+
+  function weeks() {
+    return absFloor(this.days() / 7);
+  }
+
+  var round = Math.round,
+    thresholds = {
+      ss: 44, // a few seconds to seconds
+      s: 45, // seconds to minute
+      m: 45, // minutes to hour
+      h: 22, // hours to day
+      d: 26, // days to month/week
+      w: null, // weeks to month
+      M: 11, // months to year
+    };
+
+  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
+  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
+    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
+  }
+
+  function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
+    var duration = createDuration(posNegDuration).abs(),
+      seconds = round(duration.as('s')),
+      minutes = round(duration.as('m')),
+      hours = round(duration.as('h')),
+      days = round(duration.as('d')),
+      months = round(duration.as('M')),
+      weeks = round(duration.as('w')),
+      years = round(duration.as('y')),
+      a =
+        (seconds <= thresholds.ss && ['s', seconds]) ||
+        (seconds < thresholds.s && ['ss', seconds]) ||
+        (minutes <= 1 && ['m']) ||
+        (minutes < thresholds.m && ['mm', minutes]) ||
+        (hours <= 1 && ['h']) ||
+        (hours < thresholds.h && ['hh', hours]) ||
+        (days <= 1 && ['d']) ||
+        (days < thresholds.d && ['dd', days]);
+
+    if (thresholds.w != null) {
+      a =
+        a ||
+        (weeks <= 1 && ['w']) ||
+        (weeks < thresholds.w && ['ww', weeks]);
+    }
+    a = a ||
+      (months <= 1 && ['M']) ||
+      (months < thresholds.M && ['MM', months]) ||
+      (years <= 1 && ['y']) || ['yy', years];
+
+    a[2] = withoutSuffix;
+    a[3] = +posNegDuration > 0;
+    a[4] = locale;
+    return substituteTimeAgo.apply(null, a);
+  }
+
+  // This function allows you to set the rounding function for relative time strings
+  function getSetRelativeTimeRounding(roundingFunction) {
+    if (roundingFunction === undefined) {
+      return round;
+    }
+    if (typeof roundingFunction === 'function') {
+      round = roundingFunction;
+      return true;
+    }
+    return false;
+  }
+
+  // This function allows you to set a threshold for relative time strings
+  function getSetRelativeTimeThreshold(threshold, limit) {
+    if (thresholds[threshold] === undefined) {
+      return false;
+    }
+    if (limit === undefined) {
+      return thresholds[threshold];
+    }
+    thresholds[threshold] = limit;
+    if (threshold === 's') {
+      thresholds.ss = limit - 1;
+    }
+    return true;
+  }
+
+  function humanize(argWithSuffix, argThresholds) {
+    if (!this.isValid()) {
+      return this.localeData().invalidDate();
+    }
+
+    var withSuffix = false,
+      th = thresholds,
+      locale,
+      output;
+
+    if (typeof argWithSuffix === 'object') {
+      argThresholds = argWithSuffix;
+      argWithSuffix = false;
+    }
+    if (typeof argWithSuffix === 'boolean') {
+      withSuffix = argWithSuffix;
+    }
+    if (typeof argThresholds === 'object') {
+      th = Object.assign({}, thresholds, argThresholds);
+      if (argThresholds.s != null && argThresholds.ss == null) {
+        th.ss = argThresholds.s - 1;
+      }
+    }
+
+    locale = this.localeData();
+    output = relativeTime$1(this, !withSuffix, th, locale);
+
+    if (withSuffix) {
+      output = locale.pastFuture(+this, output);
+    }
+
+    return locale.postformat(output);
+  }
+
+  var abs$1 = Math.abs;
+
+  function sign(x) {
+    return (x > 0) - (x < 0) || +x;
+  }
+
+  function toISOString$1() {
+    // for ISO strings we do not use the normal bubbling rules:
+    //  * milliseconds bubble up until they become hours
+    //  * days do not bubble at all
+    //  * months bubble up until they become years
+    // This is because there is no context-free conversion between hours and days
+    // (think of clock changes)
+    // and also not between days and months (28-31 days per month)
+    if (!this.isValid()) {
+      return this.localeData().invalidDate();
+    }
+
+    var seconds = abs$1(this._milliseconds) / 1000,
+      days = abs$1(this._days),
+      months = abs$1(this._months),
+      minutes,
+      hours,
+      years,
+      s,
+      total = this.asSeconds(),
+      totalSign,
+      ymSign,
+      daysSign,
+      hmsSign;
+
+    if (!total) {
+      // this is the same as C#'s (Noda) and python (isodate)...
+      // but not other JS (goog.date)
+      return 'P0D';
+    }
+
+    // 3600 seconds -> 60 minutes -> 1 hour
+    minutes = absFloor(seconds / 60);
+    hours = absFloor(minutes / 60);
+    seconds %= 60;
+    minutes %= 60;
+
+    // 12 months -> 1 year
+    years = absFloor(months / 12);
+    months %= 12;
+
+    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
+    s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
+
+    totalSign = total < 0 ? '-' : '';
+    ymSign = sign(this._months) !== sign(total) ? '-' : '';
+    daysSign = sign(this._days) !== sign(total) ? '-' : '';
+    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
+
+    return (
+      totalSign +
+      'P' +
+      (years ? ymSign + years + 'Y' : '') +
+      (months ? ymSign + months + 'M' : '') +
+      (days ? daysSign + days + 'D' : '') +
+      (hours || minutes || seconds ? 'T' : '') +
+      (hours ? hmsSign + hours + 'H' : '') +
+      (minutes ? hmsSign + minutes + 'M' : '') +
+      (seconds ? hmsSign + s + 'S' : '')
+    );
+  }
+
+  var proto$2 = Duration.prototype;
+
+  proto$2.isValid = isValid$1;
+  proto$2.abs = abs;
+  proto$2.add = add$1;
+  proto$2.subtract = subtract$1;
+  proto$2.as = as;
+  proto$2.asMilliseconds = asMilliseconds;
+  proto$2.asSeconds = asSeconds;
+  proto$2.asMinutes = asMinutes;
+  proto$2.asHours = asHours;
+  proto$2.asDays = asDays;
+  proto$2.asWeeks = asWeeks;
+  proto$2.asMonths = asMonths;
+  proto$2.asQuarters = asQuarters;
+  proto$2.asYears = asYears;
+  proto$2.valueOf = valueOf$1;
+  proto$2._bubble = bubble;
+  proto$2.clone = clone$1;
+  proto$2.get = get$2;
+  proto$2.milliseconds = milliseconds;
+  proto$2.seconds = seconds;
+  proto$2.minutes = minutes;
+  proto$2.hours = hours;
+  proto$2.days = days;
+  proto$2.weeks = weeks;
+  proto$2.months = months;
+  proto$2.years = years;
+  proto$2.humanize = humanize;
+  proto$2.toISOString = toISOString$1;
+  proto$2.toString = toISOString$1;
+  proto$2.toJSON = toISOString$1;
+  proto$2.locale = locale;
+  proto$2.localeData = localeData;
+
+  proto$2.toIsoString = deprecate(
+    'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
+    toISOString$1
+  );
+  proto$2.lang = lang;
+
+  // FORMATTING
+
+  addFormatToken('X', 0, 0, 'unix');
+  addFormatToken('x', 0, 0, 'valueOf');
+
+  // PARSING
+
+  addRegexToken('x', matchSigned);
+  addRegexToken('X', matchTimestamp);
+  addParseToken('X', function (input, array, config) {
+    config._d = new Date(parseFloat(input) * 1000);
+  });
+  addParseToken('x', function (input, array, config) {
+    config._d = new Date(toInt(input));
+  });
+
+  //! moment.js
+
+  hooks.version = '2.29.1';
+
+  setHookCallback(createLocal);
+
+  hooks.fn = proto;
+  hooks.min = min;
+  hooks.max = max;
+  hooks.now = now;
+  hooks.utc = createUTC;
+  hooks.unix = createUnix;
+  hooks.months = listMonths;
+  hooks.isDate = isDate;
+  hooks.locale = getSetGlobalLocale;
+  hooks.invalid = createInvalid;
+  hooks.duration = createDuration;
+  hooks.isMoment = isMoment;
+  hooks.weekdays = listWeekdays;
+  hooks.parseZone = createInZone;
+  hooks.localeData = getLocale;
+  hooks.isDuration = isDuration;
+  hooks.monthsShort = listMonthsShort;
+  hooks.weekdaysMin = listWeekdaysMin;
+  hooks.defineLocale = defineLocale;
+  hooks.updateLocale = updateLocale;
+  hooks.locales = listLocales;
+  hooks.weekdaysShort = listWeekdaysShort;
+  hooks.normalizeUnits = normalizeUnits;
+  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
+  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
+  hooks.calendarFormat = getCalendarFormat;
+  hooks.prototype = proto;
+
+  // currently HTML5 input type only supports 24-hour formats
+  hooks.HTML5_FMT = {
+    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
+    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
+    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
+    DATE: 'YYYY-MM-DD', // <input type="date" />
+    TIME: 'HH:mm', // <input type="time" />
+    TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
+    TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
+    WEEK: 'GGGG-[W]WW', // <input type="week" />
+    MONTH: 'YYYY-MM', // <input type="month" />
+  };
+
+  return hooks;
+
+})));
diff --git a/pkg/http-server/assets/webhook-scan-logs.css b/pkg/http-server/assets/webhook-scan-logs.css
new file mode 100644
index 0000000..5e701fb
--- /dev/null
+++ b/pkg/http-server/assets/webhook-scan-logs.css
@@ -0,0 +1,33 @@
+ul {
+  list-style: none;
+  margin-left: 16px;
+  padding: 0;
+}
+
+.jsontree_child-nodes {
+  margin-left: 16px;
+  padding-left: 16px;
+}
+
+* {
+  box-sizing: border-box;
+}
+
+.table-sm td, .table-sm th {
+  padding: 10px;
+}
+
+.review-status.warn {
+  color: #e28d43;
+  font-weight: bold;
+}
+
+.review-status.rejected {
+  color: #e24343;
+  font-weight: bold;
+}
+
+.review-status.allowed {
+  color: #43e268;
+  font-weight: bold;
+}
diff --git a/pkg/http-server/assets/webhook-scan-logs.js b/pkg/http-server/assets/webhook-scan-logs.js
new file mode 100644
index 0000000..8655332
--- /dev/null
+++ b/pkg/http-server/assets/webhook-scan-logs.js
@@ -0,0 +1,44 @@
+// Replace all json-objects elements to be a JSON tree
+let jsonElements = document.getElementsByClassName("json-object")
+for (var i = 0; i < jsonElements.length; i++) {
+  let element = jsonElements[i]
+  if (element.innerText.length < 1) {
+    continue
+  }
+
+  let data = JSON.parse(element.innerText);
+  element.innerText = ""
+
+  jsonTree.create(data, element);
+}
+
+// Replace all time-object elements to be in the 'DD/MM/YYYY hh:mm:ss A' format of moment.js
+let timeElements = document.getElementsByClassName("time-object")
+for (var i = 0; i < timeElements.length; i++) {
+  let element = timeElements[i]
+  let elapsedTimeUntilNow = Date.now() - new Date(element.innerText)
+  if (elapsedTimeUntilNow / 1000 < 120) {
+    // In case elapsed less than 2 minutes, show "A few seconds ago"
+    element.innerText = moment(element.innerText).fromNow()
+  }
+  else {
+    element.innerText = moment(element.innerText).format('DD/MM/YYYY hh:mm:ss A')
+  }
+}
+
+// Change the colors of the review status
+let statusElements = document.getElementsByClassName("review-status")
+for (var i = 0; i < statusElements.length; i++) {
+  let element = statusElements[i]
+  switch (element.innerText) {
+    case "Allowed":
+      element.classList.add("allowed")
+      break
+    case "Rejected":
+      element.classList.add("rejected")
+      break
+    default:
+      element.classList.add("warn")
+      break
+  }
+}
diff --git a/pkg/http-server/constants.go b/pkg/http-server/constants.go
index 2226cf4..cb7e4ea 100644
--- a/pkg/http-server/constants.go
+++ b/pkg/http-server/constants.go
@@ -20,6 +20,9 @@ const (
 	// GatewayDefaultPort - default port at which the http server listens
 	GatewayDefaultPort = "9010"
 
+	// GatewayDefaultPort - default port at which the https server listens
+	TLSGatewayDefaultPort = "9443"
+
 	// APIVersion - default api version for REST endpoints
 	APIVersion = "v1"
 )
diff --git a/pkg/http-server/handler.go b/pkg/http-server/handler.go
index eb86e5a..e165d25 100644
--- a/pkg/http-server/handler.go
+++ b/pkg/http-server/handler.go
@@ -19,9 +19,12 @@ package httpserver
 // APIHandler struct for http api server
 type APIHandler struct {
 	test bool
+	configFile string
 }
 
 // NewAPIHandler returns a new APIHandler{}
-func NewAPIHandler() *APIHandler {
-	return &APIHandler{}
+func NewAPIHandler(configFile string) *APIHandler {
+	return &APIHandler{
+		configFile: configFile,
+	}
 }
diff --git a/pkg/http-server/handler_test.go b/pkg/http-server/handler_test.go
index 15c926e..d4d88c1 100644
--- a/pkg/http-server/handler_test.go
+++ b/pkg/http-server/handler_test.go
@@ -8,8 +8,10 @@ import (
 func TestNewAPIHandler(t *testing.T) {
 	t.Run("new API gateway", func(t *testing.T) {
 		var (
-			want = APIHandler{}
-			got  = NewAPIHandler()
+			want = APIHandler{
+				configFile: "",
+			}
+			got  = NewAPIHandler("")
 		)
 		if !reflect.DeepEqual(*got, want) {
 			t.Errorf("got: '%v', want: '%v'", *got, want)
diff --git a/pkg/http-server/health_test.go b/pkg/http-server/health_test.go
index 08b92f8..2a447ea 100644
--- a/pkg/http-server/health_test.go
+++ b/pkg/http-server/health_test.go
@@ -8,7 +8,7 @@ import (
 
 func TestHealth(t *testing.T) {
 
-	handler := NewAPIHandler()
+	handler := NewAPIHandler("")
 
 	t.Run("test health api", func(t *testing.T) {
 		var (
diff --git a/pkg/http-server/k8s_testdata/config-deny-category.toml b/pkg/http-server/k8s_testdata/config-deny-category.toml
new file mode 100644
index 0000000..b3d4204
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/config-deny-category.toml
@@ -0,0 +1,5 @@
+[k8s-deny-rules]
+  denied-categories = [
+      "Identity and Access Management",
+      "Network Security",
+  ]
diff --git a/pkg/http-server/k8s_testdata/config-deny-high.toml b/pkg/http-server/k8s_testdata/config-deny-high.toml
new file mode 100644
index 0000000..5046654
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/config-deny-high.toml
@@ -0,0 +1,5 @@
+[severity]
+level = "medium"
+
+[k8s-deny-rules]
+  denied-severity = "high"
diff --git a/pkg/http-server/k8s_testdata/config-deny-non-existing-category.toml b/pkg/http-server/k8s_testdata/config-deny-non-existing-category.toml
new file mode 100644
index 0000000..d38bc48
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/config-deny-non-existing-category.toml
@@ -0,0 +1,8 @@
+[severity]
+level = "medium"
+
+[k8s-deny-rules]
+  denied-categories = [
+      "Hola",
+      "Invalid",
+  ]
diff --git a/pkg/http-server/k8s_testdata/config-medium-severity.toml b/pkg/http-server/k8s_testdata/config-medium-severity.toml
new file mode 100644
index 0000000..17b1aed
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/config-medium-severity.toml
@@ -0,0 +1,2 @@
+[severity]
+level = "medium"
diff --git a/pkg/http-server/k8s_testdata/config-specific-rule.toml b/pkg/http-server/k8s_testdata/config-specific-rule.toml
new file mode 100644
index 0000000..ad35bd7
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/config-specific-rule.toml
@@ -0,0 +1,5 @@
+[rules]
+    scan-rules = [
+        "AWS.S3Bucket.DS.High.1043",
+        "accurics.kubernetes.IAM.107"
+    ]
diff --git a/pkg/http-server/k8s_testdata/empty.json b/pkg/http-server/k8s_testdata/empty.json
new file mode 100644
index 0000000..e69de29
diff --git a/pkg/http-server/k8s_testdata/empty_object.json b/pkg/http-server/k8s_testdata/empty_object.json
new file mode 100644
index 0000000..fb4f3ba
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/empty_object.json
@@ -0,0 +1,7 @@
+{
+  "apiVersion": "admission.k8s.io/v1",
+  "kind": "AdmissionReview",
+  "request": {
+    "uid": "705ab4f5-6393-11e8-b7cc-42010a800002"
+  }
+}
diff --git a/pkg/http-server/k8s_testdata/invalid.json b/pkg/http-server/k8s_testdata/invalid.json
new file mode 100644
index 0000000..f9ff3aa
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/invalid.json
@@ -0,0 +1 @@
+some invalid tf file
diff --git a/pkg/http-server/k8s_testdata/risky_testconfig.json b/pkg/http-server/k8s_testdata/risky_testconfig.json
new file mode 100644
index 0000000..3b1f42d
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/risky_testconfig.json
@@ -0,0 +1,27 @@
+{
+  "apiVersion":"admission.k8s.io/v1",
+  "kind":"AdmissionReview",
+  "request":{
+    "uid":"705ab4f5-6393-11e8-b7cc-42010a800002",
+    "object":
+    {
+      "apiVersion": "v1",
+      "kind": "Pod",
+      "metadata": {
+        "name": "root-run-unset"
+      },
+      "spec": {
+        "containers": [
+          {
+            "name": "busybox",
+            "image": "busybox",
+            "securityContext": {
+              "allowPrivilegeEscalation": false,
+              "readOnlyRootFilesystem": true
+            }
+          }
+        ]
+      }
+    }
+  }
+}
diff --git a/pkg/http-server/k8s_testdata/testconfig.json b/pkg/http-server/k8s_testdata/testconfig.json
new file mode 100644
index 0000000..6e3bc1a
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testconfig.json
@@ -0,0 +1,27 @@
+{
+  "apiVersion": "admission.k8s.io/v1",
+  "kind": "AdmissionReview",
+  "request": {
+    "uid": "705ab4f5-6393-11e8-b7cc-42010a800002",
+    "object": {
+      "apiVersion": "v1",
+      "kind": "Service",
+      "metadata": {
+        "creationTimestamp": "2021-02-16T19:16:01Z",
+        "labels": {
+          "run": "nginx"
+        },
+        "name": "nginx",
+        "namespace": "default",
+        "resourceVersion": "17561",
+        "selfLink": "/api/v1/namespaces/default/pods/nginx",
+        "uid": "7a269efe-d951-49b6-a3af-e1a265cb9efe"
+      },
+      "spec": {
+        "containers": [
+        ]
+      }
+    },
+    "operation": "CREATE"
+  }
+}
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-CA-PO-H-0165.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-CA-PO-H-0165.json
new file mode 100755
index 0000000..24409fb
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-CA-PO-H-0165.json
@@ -0,0 +1,21 @@
+{
+    "name": "privilegeEscalationCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "false",
+        "arg1": "cpu",
+        "arg2": "limits",
+        "name": "privilegeEscalationCheck",
+        "not_allowed": "true",
+        "param": "allowPrivilegeEscalation",
+        "param1": "securityContext",
+        "prefix": "",
+        "suffix": "",
+        "value": "true"
+    },
+    "severity": "HIGH",
+    "description": "Containers Should Not Run with AllowPrivilegeEscalation",
+    "reference_id": "AC-K8-CA-PO-H-0165",
+    "category": "Cloud Assets Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0176.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0176.json
new file mode 100755
index 0000000..d0bff54
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0176.json
@@ -0,0 +1,14 @@
+{
+    "name": "kubeDashboardEnabled",
+    "file": "kubeDashboardEnabled.rego",
+    "template_args": {
+        "name": "kubeDashboardEnabled",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Ensure Kubernetes Dashboard Is Not Deployed",
+    "reference_id": "AC-K8-DS-PO-M-0176",
+    "category": "Data Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0177.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0177.json
new file mode 100755
index 0000000..d8a40cc
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-DS-PO-M-0177.json
@@ -0,0 +1,14 @@
+{
+    "name": "tillerDeployed",
+    "file": "tillerDeployed.rego",
+    "template_args": {
+        "name": "tillerDeployed",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Ensure That Tiller (Helm V2) Is Not Deployed",
+    "reference_id": "AC-K8-DS-PO-M-0177",
+    "category": "Data Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0106.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0106.json
new file mode 100755
index 0000000..d07858d
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0106.json
@@ -0,0 +1,14 @@
+{
+    "name": "priviledgedContainersEnabled",
+    "file": "priviledgedContainersEnabled.rego",
+    "template_args": {
+        "name": "priviledgedContainersEnabled",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Minimize the admission of privileged containers",
+    "reference_id": "AC-K8-IA-PO-H-0106",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0137.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0137.json
new file mode 100755
index 0000000..71f74c3
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0137.json
@@ -0,0 +1,14 @@
+{
+    "name": "disallowedSysCalls",
+    "file": "disallowedSysCalls.rego",
+    "template_args": {
+        "name": "disallowedSysCalls",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Allowing the pod to make system level calls provide access to host/node sensitive information",
+    "reference_id": "AC-K8-IA-PO-H-0137",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0138.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0138.json
new file mode 100755
index 0000000..16cfd6d
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0138.json
@@ -0,0 +1,14 @@
+{
+    "name": "allowedHostPath",
+    "file": "allowedHostPath.rego",
+    "template_args": {
+        "name": "allowedHostPath",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Allowing hostPaths to mount to Pod arise the probability of getting access to the node's filesystem",
+    "reference_id": "AC-K8-IA-PO-H-0138",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0168.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0168.json
new file mode 100755
index 0000000..f7c9d54
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-H-0168.json
@@ -0,0 +1,21 @@
+{
+    "name": "runAsNonRootCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "false",
+        "arg1": "cpu",
+        "arg2": "limits",
+        "name": "runAsNonRootCheck",
+        "not_allowed": "true",
+        "param": "runAsNonRoot",
+        "param1": "securityContext",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "HIGH",
+    "description": "Minimize Admission of Root Containers",
+    "reference_id": "AC-K8-IA-PO-H-0168",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0105.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0105.json
new file mode 100755
index 0000000..6f9be71
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0105.json
@@ -0,0 +1,14 @@
+{
+    "name": "autoMountTokenEnabled",
+    "file": "autoMountTokenEnabled.rego",
+    "template_args": {
+        "name": "autoMountTokenEnabled",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Ensure that Service Account Tokens are only mounted where necessary",
+    "reference_id": "AC-K8-IA-PO-M-0105",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0135.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0135.json
new file mode 100755
index 0000000..d7befdd
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0135.json
@@ -0,0 +1,14 @@
+{
+    "name": "appArmorProfile",
+    "file": "appArmorProfile.rego",
+    "template_args": {
+        "name": "appArmorProfile",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "AppArmor profile not set to default or custom profile will make the container vulnerable to kernel level threats",
+    "reference_id": "AC-K8-IA-PO-M-0135",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0139.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0139.json
new file mode 100755
index 0000000..5a22d3f
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0139.json
@@ -0,0 +1,14 @@
+{
+    "name": "allowedProcMount",
+    "file": "allowedProcMount.rego",
+    "template_args": {
+        "name": "allowedProcMount",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Unmasking the procMount will allow more information than is necessary to the program running in the containers spawned by k8s",
+    "reference_id": "AC-K8-IA-PO-M-0139",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0140.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0140.json
new file mode 100755
index 0000000..10fad68
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0140.json
@@ -0,0 +1,21 @@
+{
+    "name": "readOnlyFileSystem",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "false",
+        "arg1": "limits",
+        "arg2": "cpu",
+        "name": "readOnlyFileSystem",
+        "not_allowed": "true",
+        "param": "readOnlyRootFilesystem",
+        "param1": "securityContext",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "MEDIUM",
+    "description": "Container images with readOnlyRootFileSystem set as false mounts the container root file system with write permissions",
+    "reference_id": "AC-K8-IA-PO-M-0140",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0141.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0141.json
new file mode 100755
index 0000000..5293c73
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0141.json
@@ -0,0 +1,14 @@
+{
+    "name": "secCompProfile",
+    "file": "secCompProfile.rego",
+    "template_args": {
+        "name": "secCompProfile",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Default seccomp profile not enabled will make the container to make non-essential system calls",
+    "reference_id": "AC-K8-IA-PO-M-0141",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0143.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0143.json
new file mode 100755
index 0000000..07843f8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0143.json
@@ -0,0 +1,22 @@
+{
+    "name": "allowedVolumes",
+    "file": "allowedVolumes.rego",
+    "template_args": {
+        "name": "allowedVolumes",
+        "prefix": "",
+        "secure_volumes": [
+            "configMap",
+            "emptyDir",
+            "projected",
+            "secret",
+            "downwardAPI",
+            "persistentVolumeClaim"
+        ],
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Some volume types mount the host file system paths to the pod or container, thus increasing the chance of escaping the container to access the host",
+    "reference_id": "AC-K8-IA-PO-M-0143",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0162.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0162.json
new file mode 100755
index 0000000..a98195d
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PO-M-0162.json
@@ -0,0 +1,16 @@
+{
+    "name": "falseHostPID",
+    "file": "specBoolCheck.rego",
+    "template_args": {
+        "name": "falseHostPID",
+        "param": "hostPID",
+        "prefix": "",
+        "suffix": "",
+        "value": "true"
+    },
+    "severity": "MEDIUM",
+    "description": "Containers Should Not Share Host Process ID Namespace",
+    "reference_id": "AC-K8-IA-PO-M-0162",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PS-M-0112.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PS-M-0112.json
new file mode 100755
index 0000000..11f59e9
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-IA-PS-M-0112.json
@@ -0,0 +1,15 @@
+{
+    "name": "netRawCapabilityUsed",
+    "file": "capabilityUsed.rego",
+    "template_args": {
+        "attribute": "requiredDropCapabilities",
+        "name": "netRawCapabilityUsed",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Minimize the admission of containers with the NET_RAW capability",
+    "reference_id": "AC-K8-IA-PS-M-0112",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0117.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0117.json
new file mode 100755
index 0000000..23c8d90
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0117.json
@@ -0,0 +1,14 @@
+{
+    "name": "secretsAsEnvVariables",
+    "file": "secretsAsEnvVariables.rego",
+    "template_args": {
+        "name": "secretsAsEnvVariables",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Prefer using secrets as files over secrets as environment variables",
+    "reference_id": "AC-K8-NS-PO-H-0117",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0170.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0170.json
new file mode 100755
index 0000000..b211361
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-H-0170.json
@@ -0,0 +1,14 @@
+{
+    "name": "capSysAdminUsed",
+    "file": "capSysAdminUsed.rego",
+    "template_args": {
+        "name": "capSysAdminUsed",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Do Not Use CAP_SYS_ADMIN Linux Capability",
+    "reference_id": "AC-K8-NS-PO-H-0170",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0122.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0122.json
new file mode 100755
index 0000000..43ba243
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0122.json
@@ -0,0 +1,14 @@
+{
+    "name": "securityContextUsed",
+    "file": "securityContextUsed.rego",
+    "template_args": {
+        "name": "securityContextUsed",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Apply Security Context to Your Pods and Containers",
+    "reference_id": "AC-K8-NS-PO-M-0122",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0133.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0133.json
new file mode 100755
index 0000000..804a12e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0133.json
@@ -0,0 +1,14 @@
+{
+    "name": "imageWithoutDigest",
+    "file": "imageWithoutDigest.rego",
+    "template_args": {
+        "name": "imageWithoutDigest",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Image without digest affects the integrity principle of image security",
+    "reference_id": "AC-K8-NS-PO-M-0133",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0163.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0163.json
new file mode 100755
index 0000000..e96b364
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0163.json
@@ -0,0 +1,16 @@
+{
+    "name": "falseHostIPC",
+    "file": "specBoolCheck.rego",
+    "template_args": {
+        "name": "falseHostIPC",
+        "param": "hostIPC",
+        "prefix": "",
+        "suffix": "",
+        "value": "true"
+    },
+    "severity": "MEDIUM",
+    "description": "Containers Should Not Share Host IPC Namespace",
+    "reference_id": "AC-K8-NS-PO-M-0163",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0164.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0164.json
new file mode 100755
index 0000000..5c893ce
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0164.json
@@ -0,0 +1,16 @@
+{
+    "name": "falseHostNetwork",
+    "file": "specBoolCheck.rego",
+    "template_args": {
+        "name": "falseHostNetwork",
+        "param": "hostNetwork",
+        "prefix": "",
+        "suffix": "",
+        "value": "true"
+    },
+    "severity": "MEDIUM",
+    "description": "Containers Should Not Share the Host Network Namespace",
+    "reference_id": "AC-K8-NS-PO-M-0164",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0171.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0171.json
new file mode 100755
index 0000000..df493d8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0171.json
@@ -0,0 +1,17 @@
+{
+    "name": "dontConnectDockerSock",
+    "file": "dockerSockCheck.rego",
+    "template_args": {
+        "attrib": "spec.volumes[_].hostPath",
+        "name": "dontConnectDockerSock",
+        "param": "path",
+        "prefix": "",
+        "suffix": "",
+        "value": "/var/run/docker"
+    },
+    "severity": "MEDIUM",
+    "description": "Restrict Mounting Docker Socket in a Container",
+    "reference_id": "AC-K8-NS-PO-M-0171",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0182.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0182.json
new file mode 100755
index 0000000..2243106
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-NS-PO-M-0182.json
@@ -0,0 +1,14 @@
+{
+    "name": "containersAsHighUID",
+    "file": "containersAsHighUID.rego",
+    "template_args": {
+        "name": "containersAsHighUID",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Containers Should Run as a High UID to Avoid Host Conflict",
+    "reference_id": "AC-K8-NS-PO-M-0182",
+    "category": "Network Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0034.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0034.json
new file mode 100755
index 0000000..6340d31
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0034.json
@@ -0,0 +1,19 @@
+{
+    "name": "alwaysPullImages",
+    "file": "commandCheck.rego",
+    "template_args": {
+        "argument": "--enable-admission-plugins",
+        "name": "alwaysPullImages",
+        "negation": "",
+        "optional": "",
+        "param": "AlwaysPullImages",
+        "prefix": "",
+        "presence": "not",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "AlwaysPullImages plugin is not set",
+    "reference_id": "AC-K8-OE-PK-M-0034",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0155.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0155.json
new file mode 100755
index 0000000..aebef86
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0155.json
@@ -0,0 +1,21 @@
+{
+    "name": "CpuRequestsCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "true",
+        "arg1": "requests",
+        "arg2": "cpu",
+        "name": "CpuRequestsCheck",
+        "not_allowed": "false",
+        "param": "resources",
+        "param1": "resources",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "Medium",
+    "description": "CPU Request Not Set in config file.",
+    "reference_id": "AC-K8-OE-PK-M-0155",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0156.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0156.json
new file mode 100755
index 0000000..c74835c
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0156.json
@@ -0,0 +1,21 @@
+{
+    "name": "CpulimitsCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "true",
+        "arg1": "limits",
+        "arg2": "cpu",
+        "name": "CpulimitsCheck",
+        "not_allowed": "false",
+        "param": "limits",
+        "param1": "resources",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "Medium",
+    "description": "CPU Limits Not Set in config file.",
+    "reference_id": "AC-K8-OE-PK-M-0156",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0157.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0157.json
new file mode 100755
index 0000000..691b588
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0157.json
@@ -0,0 +1,21 @@
+{
+    "name": "MemoryRequestsCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "true",
+        "arg1": "requests",
+        "arg2": "memory",
+        "name": "MemoryRequestsCheck",
+        "not_allowed": "false",
+        "param": "resources",
+        "param1": "resources",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "Medium",
+    "description": "Memory Request Not Set in config file.",
+    "reference_id": "AC-K8-OE-PK-M-0157",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0158.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0158.json
new file mode 100755
index 0000000..7ab678c
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PK-M-0158.json
@@ -0,0 +1,21 @@
+{
+    "name": "MemorylimitsCheck",
+    "file": "securityContextCheck.rego",
+    "template_args": {
+        "allowed": "true",
+        "arg1": "limits",
+        "arg2": "memory",
+        "name": "MemorylimitsCheck",
+        "not_allowed": "false",
+        "param": "limits",
+        "param1": "resources",
+        "prefix": "",
+        "suffix": "",
+        "value": "false"
+    },
+    "severity": "Medium",
+    "description": "Memory Limits Not Set in config file.",
+    "reference_id": "AC-K8-OE-PK-M-0158",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0129.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0129.json
new file mode 100755
index 0000000..9ce0938
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0129.json
@@ -0,0 +1,16 @@
+{
+    "name": "nolivenessProbe",
+    "file": "probeCheck.rego",
+    "template_args": {
+        "argument": "livenessProbe",
+        "argumentTF": "liveness_probe",
+        "name": "nolivenessProbe",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "LOW",
+    "description": "No liveness probe will ensure there is no recovery in case of unexpected errors",
+    "reference_id": "AC-K8-OE-PO-L-0129",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0130.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0130.json
new file mode 100755
index 0000000..a0e4058
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0130.json
@@ -0,0 +1,16 @@
+{
+    "name": "noReadinessProbe",
+    "file": "probeCheck.rego",
+    "template_args": {
+        "argument": "readinessProbe",
+        "argumentTF": "readiness_probe",
+        "name": "noReadinessProbe",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "LOW",
+    "description": "No readiness probe will affect automatic recovery in case of unexpected errors",
+    "reference_id": "AC-K8-OE-PO-L-0130",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0134.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0134.json
new file mode 100755
index 0000000..83eec4e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-L-0134.json
@@ -0,0 +1,14 @@
+{
+    "name": "imageWithLatestTag",
+    "file": "imageWithLatestTag.rego",
+    "template_args": {
+        "name": "imageWithLatestTag",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "LOW",
+    "description": "No tag or container image with :Latest tag makes difficult to rollback and track",
+    "reference_id": "AC-K8-OE-PO-L-0134",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-M-0166.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-M-0166.json
new file mode 100755
index 0000000..6e0c8fd
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/AC-K8-OE-PO-M-0166.json
@@ -0,0 +1,14 @@
+{
+    "name": "otherNamespace",
+    "file": "otherNamespace.rego",
+    "template_args": {
+        "name": "otherNamespace",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Default Namespace Should Not be Used",
+    "reference_id": "AC-K8-OE-PO-M-0166",
+    "category": "Operational Efficiency",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedHostPath.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedHostPath.rego
new file mode 100755
index 0000000..e7d8463
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedHostPath.rego
@@ -0,0 +1,107 @@
+### this policy depends on the parameters specified by the user/client. Here we are considering that no hostPath are allowed###
+package accurics
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    vols := pod.config.spec.volumes[_]
+    parameters := {}
+    has_field(vols, "hostPath")
+    allowedPaths := get_allowed_paths(parameters)
+    input_hostpath_violation(allowedPaths, vols)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    vols := kind.config.spec.template.spec.volumes[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    has_field(vols, "hostPath")
+    allowedPaths := get_allowed_paths(parameters)
+    input_hostpath_violation(allowedPaths, vols)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    vols := cron_job.config.spec.jobTemplate.spec.template.spec.volumes[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    has_field(vols, "hostPath")
+    allowedPaths := get_allowed_paths(parameters)
+    input_hostpath_violation(allowedPaths, vols)
+}
+
+#function for all KINDs
+has_field(object, field) = true {
+    object[field]
+}
+
+#now allowed paths are null, this function will run##
+get_allowed_paths(params) = out {
+    not params.allowedHostPath == "undefined"
+    out = []
+}
+
+input_hostpath_violation(allowedPaths, volume) {
+    allowedPaths == []
+}
+
+### below functions are for violation when user has specified the hostPath, for testing uncomment the parameter array of objects at top####
+
+get_allowed_paths(params) = out {
+    out = params.allowedHostPath
+}
+
+input_hostpath_violation(allowedPaths, volume) {
+    not input_hostpath_allowed(allowedPaths, volume)
+}
+
+input_hostpath_allowed(allowedPaths, volume) {
+    allowedHostPath := allowedPaths[_]
+    path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
+    not allowedHostPath.readOnly == true
+}
+
+input_hostpath_allowed(allowedPaths, volume) {
+    allowedHostPath := allowedPaths[_]
+    path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
+    allowedHostPath.readOnly
+    not writeable_input_volume_mounts(volume.name)
+}
+
+writeable_input_volume_mounts(volume_name) {
+	containers := input.kubernetes_pod[_].config.spec.containers[_]
+    mount := containers.volumeMounts[_]
+    mount.name == volume_name
+    not mount.readOnly
+}
+
+path_matches(prefix, path) {
+    a := split(trim(prefix, "/"), "/")
+    b := split(trim(path, "/"), "/")
+    prefix_matches(a, b)
+}
+
+prefix_matches(a, b) {
+    count(a) <= count(b)
+    not any_not_equal_upto(a, b, count(a))
+}
+
+any_not_equal_upto(a, b, n) {
+    a[i] != b[i]
+    i < n
+}
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedProcMount.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedProcMount.rego
new file mode 100755
index 0000000..d8d6e62
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedProcMount.rego
@@ -0,0 +1,126 @@
+package accurics
+
+#rule for pod_security_policy
+{{.prefix}}{{.name}}{{.suffix}}[psp.id] {
+    psp := input.kubernetes_pod_security_policy[_]
+    psp.config.spec.allowProcMountTypes != "Default"
+}
+
+#rule for pod_security_policy terraform
+{{.prefix}}{{.name}}{{.suffix}}[psp.id] {
+    psp := input.kubernetes_pod_security_policy[_]
+    psp.config.spec.allow_proc_mount_types != "Default"
+}
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    parameters := {}
+    container := pod.config.spec.containers[_]
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    parameters := {}
+    container := pod.config.spec.initContainers[_]
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    #parameters := {  'allowedHostPath' :[{ 'readOnly': true, 'pathPrefix': '/foo' }] }
+    parameters := {}
+    container.securityContext.procMount
+    allowedProcMount := get_allowed_proc_mount(parameters)
+    not input_proc_mount_type_allowed(allowedProcMount, container)
+}
+
+###this will get satisfied as no parameters are provided, thus checking with the baseline configuration which is checking that the procmount is default####
+get_allowed_proc_mount(params) = out {
+    not params.procMount
+    out = "default"
+}
+
+get_allowed_proc_mount(params) = out {
+    not valid_proc_mount(params.procMount)
+    out = "default"
+}
+
+get_allowed_proc_mount(params) = out {
+    out = lower(params.procMount)
+}
+
+valid_proc_mount(str) {
+    lower(str) == "default"
+}
+
+valid_proc_mount(str) {
+    lower(str) == "unmasked"
+}
+
+input_proc_mount_type_allowed(allowedProcMount, c) {
+    allowedProcMount == "default"
+    lower(c.securityContext.procMount) == "default"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedVolumes.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedVolumes.rego
new file mode 100755
index 0000000..cef0f21
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowedVolumes.rego
@@ -0,0 +1,58 @@
+package accurics
+
+####fixed the minimum set of allowed volumes, this may change as per the user####
+
+#rule for pod_security_policy
+{{.prefix}}{{.name}}{{.suffix}}[psp.id] {
+    psp := input.kubernetes_pod_security_policy[_]
+    secure_volumes := [{{range .secure_volumes}}{{- printf "%q" . }},{{end}}]
+    volume_field := psp.config.spec.volumes[_]
+    not input_volume_type_allowed(volume_field, secure_volumes)
+}
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    secure_volumes := [{{range .secure_volumes}}{{- printf "%q" . }},{{end}}]
+    volume_fields := {x | pod.config.spec.volumes[_][x]; x != "name"}
+    field := volume_fields[_]
+    not input_volume_type_allowed(field, secure_volumes)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    secure_volumes := [{{range .secure_volumes}}{{- printf "%q" . }},{{end}}]
+    volume_fields := {x | kind.config.spec.template.spec.volumes[_][x]; x != "name"}
+    field := volume_fields[_]
+    not input_volume_type_allowed(field, secure_volumes)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    secure_volumes := [{{range .secure_volumes}}{{- printf "%q" . }},{{end}}]
+    volume_fields := {x | cron_job.config.spec.jobTemplate.spec.template.spec.volumes[_][x]; x != "name"}
+    field := volume_fields[_]
+    not input_volume_type_allowed(field, secure_volumes)
+}
+
+input_volume_type_allowed(field, secure_volumes) {
+    secure_volumes[_] == "*"
+}
+
+input_volume_type_allowed(field, secure_volumes) {
+    field == secure_volumes[_]
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.73.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.73.json
new file mode 100755
index 0000000..3a5ba1b
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.73.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.73",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.74.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.74.json
new file mode 100755
index 0000000..860d3a3
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.74.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.74",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.75.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.75.json
new file mode 100755
index 0000000..a873dc5
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.75.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_deployment",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.75",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.76.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.76.json
new file mode 100755
index 0000000..497e12d
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.76.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.76",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.77.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.77.json
new file mode 100755
index 0000000..72f9f69
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.77.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.77",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.78.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.78.json
new file mode 100755
index 0000000..2ec1d9e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.78.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.78",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.79.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.79.json
new file mode 100755
index 0000000..0becff4
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.79.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.79",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.80.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.80.json
new file mode 100755
index 0000000..6c54f99
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.80.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.80",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.81.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.81.json
new file mode 100755
index 0000000..8e8aebd
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.81.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.81",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.82.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.82.json
new file mode 100755
index 0000000..9d06ffb
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.82.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.82",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.83.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.83.json
new file mode 100755
index 0000000..0259e02
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.83.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_deployment",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.83",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.84.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.84.json
new file mode 100755
index 0000000..646842e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.84.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.84",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.85.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.85.json
new file mode 100755
index 0000000..59f98d1
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.85.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.85",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.86.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.86.json
new file mode 100755
index 0000000..32ae92f
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.86.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.86",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.87.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.87.json
new file mode 100755
index 0000000..b82fb11
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.87.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.87",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.88.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.88.json
new file mode 100755
index 0000000..33f7d06
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/accurics.kubernetes.IAM.88.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerHasAllowedCapabilities",
+    "file": "containerHasAllowedCapabilities.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerHasAllowedCapabilities",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Pod has extra capabilities allowed",
+    "reference_id": "accurics.kubernetes.IAM.88",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/containerHasAllowedCapabilities.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/containerHasAllowedCapabilities.rego
new file mode 100644
index 0000000..bfe42d7
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/allowed_capabilities/containerHasAllowedCapabilities.rego
@@ -0,0 +1,119 @@
+package accurics
+
+# Checks if any extra capabilities are added
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+  {{- template "spec" . }}
+  count(spec.allowedCapabilities) > 0
+}
+
+# Note, no TF-equivalent
+
+{{- if eq .is_init true}}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+  {{- template "initContainersSecurityContext" .}}
+  count(initContainersSecurityContext.capabilities.add) > 0
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+  {{- template "initContainersSecurityContextTF" .}}
+  count(initContainersSecurityContextTF.capabilities.add) > 0
+}
+
+{{- else }}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+  {{- template "containersSecurityContext" .}}
+  count(containersSecurityContext.capabilities.add) > 0
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+  {{- template "containersSecurityContextTF" .}}
+  count(containersSecurityContextTF.capabilities.add) > 0
+}
+
+{{- end }}
+
+
+##################################
+### Template definitions below ###
+##################################
+{{- define "api" }}
+    api = input.{{.resource_type}}[_]
+{{- end}}
+
+# resolves path to the spec key
+{{- define "spec" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    spec = api.config.spec.jobTemplate.spec.template.spec
+    {{- else }}
+    spec = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the spec key for terraform-defined k8s resources
+{{- define "specTF" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    specTF = api.config.spec.job_template.spec.template.spec
+    {{- else }}
+    specTF = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the containers list
+{{- define "containers" }}
+    {{- template "spec" . }}
+    containers = spec.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context
+{{- define "containersSecurityContext" }}
+    {{- template "containers" . }}
+    containersSecurityContext = containers.securityContext
+{{- end }}
+
+# resolves path to the containers list for terraform-defined k8s resources
+{{- define "containersTF" }}
+    {{- template "specTF" . }}
+    containersTF = specTF.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context for terraform-defined k8s resources
+{{- define "containersSecurityContextTF" }}
+    {{- template "containersTF" . }}
+    containersSecurityContextTF = containersTF.security_context
+{{- end }}
+
+# resolves path to the initContainers list
+{{- define "initContainers" }}
+    {{- template "spec" . }}
+    initContainers = spec.initContainers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context
+{{- define "initContainersSecurityContext" }}
+    {{- template "initContainers" . }}
+    initContainersSecurityContext = initContainers.securityContext
+{{- end }}
+
+# resolves path to the initContainers list for terraform-defined k8s resources
+{{- define "initContainersTF" }}
+    {{- template "specTF" . }}
+    initContainersTF = specTF.init_containers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context for terraform-defined k8s resources
+{{- define "initContainersSecurityContextTF" }}
+    {{- template "initContainersTF" . }}
+    initContainersSecurityContextTF = initContainersTF.security_context
+{{- end }}
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/appArmorProfile.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/appArmorProfile.rego
new file mode 100755
index 0000000..7be8687
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/appArmorProfile.rego
@@ -0,0 +1,108 @@
+package accurics
+
+#rule for pod security policy, will be valid for terraform pod_security_policy
+{{.prefix}}{{.name}}{{.suffix}}[psp.id] {
+    psp := input.kubernetes_pod_security_policy[_]
+    psp.config.metadata.annotations["apparmor.security.beta.kubernetes.io/defaultProfileName"] != "runtime/default"
+}
+
+#rule for pod, covers containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    not input_apparmor_allowed(container.name, pod.config.metadata)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.initContainers[_]
+    not input_apparmor_allowed(container.name, pod.config.metadata)
+}
+
+#terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.init_containers[_]
+    not input_apparmor_allowed(container.name, pod.config.metadata)
+}
+
+##rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller covers containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    not input_apparmor_allowed(container.name, kind.config.spec.template.metadata)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    not input_apparmor_allowed(container.name, kind.config.spec.template.metadata)
+}
+
+#terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.init_containers[_]
+    not input_apparmor_allowed(container.name, kind.config.spec.template.metadata)
+}
+
+#rule for cron_job, covers containers
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    not input_apparmor_allowed(container.name, cron_job.config.spec.jobTemplate.spec.template.metadata)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    not input_apparmor_allowed(container.name, cron_job.config.spec.jobTemplate.spec.template.metadata)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.init_containers[_]
+    not input_apparmor_allowed(container.name, cron_job.config.spec.jobTemplate.spec.template.metadata)
+}
+
+#function for all Kinds
+input_apparmor_allowed(containerName, metadata) {
+    metadata.annotations[key] == "runtime/default"
+    key == sprintf("container.apparmor.security.beta.kubernetes.io/%v", [containerName])
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/autoMountTokenEnabled.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/autoMountTokenEnabled.rego
new file mode 100755
index 0000000..248878b
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/autoMountTokenEnabled.rego
@@ -0,0 +1,33 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    pod.config.spec.automountServiceAccountToken == true
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_service_account[_]
+    pod.config.automountServiceAccountToken == true
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    pod.config.spec.template.spec.automountServiceAccountToken == true
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    pod.config.spec.jobTemplate.spec.template.spec.automountServiceAccountToken == true
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capSysAdminUsed.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capSysAdminUsed.rego
new file mode 100755
index 0000000..d8d1ae4
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capSysAdminUsed.rego
@@ -0,0 +1,69 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    container.securityContext.capabilities.add == "-SYS_ADMIN"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    initcontainer := pod.config.spec.initContainers[_]
+    initcontainer.securityContext.capabilities.add == "-SYS_ADMIN"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    container := pod.config.spec.jobTemplate.spec.template.spec.containers[_]
+    container.securityContext.capabilities.add == "-SYS_ADMIN"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    initcontainer := pod.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    initcontainer.securityContext.capabilities.add == "-SYS_ADMIN"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    containerCheck(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    initContainerCheck(pod.config.spec.template.spec)
+}
+
+initContainerCheck(spec) {
+    container := spec.initContainers[_]
+    container.securityContext.capabilities.add == "-SYS_ADMIN"
+}
+
+containerCheck(spec) {
+    container := spec.containers[_]
+    container.securityContext.capabilities.add == "-SYS_ADMIN"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capabilityUsed.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capabilityUsed.rego
new file mode 100755
index 0000000..9920b38
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/capabilityUsed.rego
@@ -0,0 +1,74 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod_security_policy[_]
+    pod.config.spec.{{.attribute}} != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    container.{{.attribute}} != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    initcontainer := pod.config.spec.initContainers[_]
+    initcontainer.{{.attribute}} != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    container := pod.config.spec.jobTemplate.spec.template.spec.containers[_]
+    container.{{.attribute}} != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    initcontainer := pod.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    initcontainer.{{.attribute}} != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    containerCheck(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    initContainerCheck(pod.config.spec.template.spec)
+}
+
+initContainerCheck(spec) {
+    container := spec.initContainers[_]
+    container.{{.attribute}} != []
+}
+
+containerCheck(spec) {
+    container := spec.containers[_]
+    container.{{.attribute}} != []
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/commandCheck.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/commandCheck.rego
new file mode 100755
index 0000000..07c315a
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/commandCheck.rego
@@ -0,0 +1,19 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod_kubeapi.id] {
+    pod_kubeapi := input.kubernetes_pod[_]
+    cmds := pod_kubeapi.config.spec.containers[_].command
+    {{.negation}} check(cmds)
+}
+
+check(cmds) {
+    cmd := cmds[_]
+    startswith(cmd, "{{.argument}}")
+    {{.presence}} contains(cmd, "{{.param}}")
+    {{.optional}}
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    cmds := pod.config.spec.containers[_].imagePullPolicy != "Always"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.105.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.105.json
new file mode 100755
index 0000000..56545ab
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.105.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.105",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.106.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.106.json
new file mode 100755
index 0000000..4d97801
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.106.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.106",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.108.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.108.json
new file mode 100755
index 0000000..ce27d4b
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.108.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.108",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.109.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.109.json
new file mode 100755
index 0000000..b740200
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.109.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.109",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.110.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.110.json
new file mode 100755
index 0000000..19489a0
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.110.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.110",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.111.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.111.json
new file mode 100755
index 0000000..d4a8f55
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.111.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.111",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.112.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.112.json
new file mode 100755
index 0000000..a18dc1c
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.112.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.112",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.113.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.113.json
new file mode 100755
index 0000000..d1cdd09
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.113.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.113",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.114.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.114.json
new file mode 100755
index 0000000..64b9de3
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.114.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.114",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.115.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.115.json
new file mode 100755
index 0000000..2f573f8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.115.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_deployment",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.115",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.116.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.116.json
new file mode 100755
index 0000000..0f80098
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.116.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.116",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.117.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.117.json
new file mode 100755
index 0000000..9e420b8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.117.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.117",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.118.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.118.json
new file mode 100755
index 0000000..17d4116
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.118.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.118",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.119.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.119.json
new file mode 100755
index 0000000..076a492
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.119.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.119",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.120.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.120.json
new file mode 100755
index 0000000..e5c922b
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/accurics.kubernetes.IAM.120.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerResourcesNotDefined",
+    "file": "containerResourcesNotDefined.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerResourcesNotDefined",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Container does not have resource limitations defined",
+    "reference_id": "accurics.kubernetes.IAM.120",
+    "category": "Identity and Access Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/containerResourcesNotDefined.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/containerResourcesNotDefined.rego
new file mode 100644
index 0000000..b073034
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_resources_not_defined/containerResourcesNotDefined.rego
@@ -0,0 +1,111 @@
+package accurics
+
+{{- if eq .is_init true}}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "initContainers" . }}
+    not initContainers.resources
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "initContainersTF" . }}
+    not initContainersTF.resources
+}
+
+{{- else }}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "containers" . }}
+    not containers.resources
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "containersTF" . }}
+    not containersTF.resources
+}
+
+{{- end }}
+
+
+##################################
+### Template definitions below ###
+##################################
+{{- define "api" }}
+    api = input.{{.resource_type}}[_]
+{{- end}}
+
+# resolves path to the spec key
+{{- define "spec" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    spec = api.config.spec.jobTemplate.spec.template.spec
+    {{- else }}
+    spec = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the spec key for terraform-defined k8s resources
+{{- define "specTF" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    specTF = api.config.spec.job_template.spec.template.spec
+    {{- else }}
+    specTF = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the containers list
+{{- define "containers" }}
+    {{- template "spec" . }}
+    containers = spec.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context
+{{- define "containersSecurityContext" }}
+    {{- template "containers" . }}
+    containersSecurityContext = containers.securityContext
+{{- end }}
+
+# resolves path to the containers list for terraform-defined k8s resources
+{{- define "containersTF" }}
+    {{- template "specTF" . }}
+    containersTF = specTF.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context for terraform-defined k8s resources
+{{- define "containersSecurityContextTF" }}
+    {{- template "containersTF" . }}
+    containersSecurityContextTF = containersTF.security_context
+{{- end }}
+
+# resolves path to the initContainers list
+{{- define "initContainers" }}
+    {{- template "spec" . }}
+    initContainers = spec.initContainers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context
+{{- define "initContainersSecurityContext" }}
+    {{- template "initContainers" . }}
+    initContainersSecurityContext = initContainers.securityContext
+{{- end }}
+
+# resolves path to the initContainers list for terraform-defined k8s resources
+{{- define "initContainersTF" }}
+    {{- template "specTF" . }}
+    initContainersTF = specTF.init_containers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context for terraform-defined k8s resources
+{{- define "initContainersSecurityContextTF" }}
+    {{- template "initContainersTF" . }}
+    initContainersSecurityContextTF = initContainersTF.security_context
+{{- end }}
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.57.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.57.json
new file mode 100755
index 0000000..7962ef7
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.57.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.57",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.58.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.58.json
new file mode 100755
index 0000000..f8f70ea
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.58.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.58",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.59.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.59.json
new file mode 100755
index 0000000..739c621
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.59.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_deployment",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.59",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.60.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.60.json
new file mode 100755
index 0000000..f8a42a8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.60.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.60",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.61.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.61.json
new file mode 100755
index 0000000..fc7091e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.61.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.61",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.62.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.62.json
new file mode 100755
index 0000000..3fc461f
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.62.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.62",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.63.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.63.json
new file mode 100755
index 0000000..59662b3
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.63.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.63",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.64.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.64.json
new file mode 100755
index 0000000..13cb5dc
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.64.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": false,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.64",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.65.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.65.json
new file mode 100755
index 0000000..00ec55c
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.65.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_cron_job",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.65",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.66.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.66.json
new file mode 100755
index 0000000..0f4a3d5
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.66.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_daemonset",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.66",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.67.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.67.json
new file mode 100755
index 0000000..42cd868
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.67.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_deployment",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.67",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.68.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.68.json
new file mode 100755
index 0000000..d023923
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.68.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_job",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.68",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.69.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.69.json
new file mode 100755
index 0000000..c522de8
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.69.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_pod",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.69",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.70.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.70.json
new file mode 100755
index 0000000..45c9cb9
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.70.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_replicaset",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.70",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.71.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.71.json
new file mode 100755
index 0000000..4bbbdd2
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.71.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_replication_controller",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.71",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.72.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.72.json
new file mode 100755
index 0000000..88fc00e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/accurics.kubernetes.EKM.72.json
@@ -0,0 +1,16 @@
+{
+    "name": "containerUsesSecretsInEnvironmentVar",
+    "file": "containerUsesSecretsInEnvironmentVar.rego",
+    "template_args": {
+        "is_init": true,
+        "name": "containerUsesSecretsInEnvironmentVar",
+        "prefix": "",
+        "resource_type": "kubernetes_stateful_set",
+        "suffix": ""
+    },
+    "severity": "HIGH",
+    "description": "Container uses secrets in environment variables",
+    "reference_id": "accurics.kubernetes.EKM.72",
+    "category": "Encryption and Key Management",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/containerUsesSecretsInEnvironmentVar.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/containerUsesSecretsInEnvironmentVar.rego
new file mode 100644
index 0000000..86c10e3
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/container_uses_secrets_in_env/containerUsesSecretsInEnvironmentVar.rego
@@ -0,0 +1,115 @@
+package accurics
+
+{{- if eq .is_init true}}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "initContainers" .}}
+    envVars := initContainers.env[_]
+    envVars.valueFrom.secretKeyRef
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "initContainersTF" .}}
+    envVars := initContainersTF.env[_]
+    envVars.valueFrom.secretKeyRef
+}
+
+{{- else }}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "containers" .}}
+    envVars := containers.env[_]
+    envVars.valueFrom.secretKeyRef
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[api.id] {
+    {{- template "containersTF" .}}
+    envVars := containersTF.env[_]
+    envVars.valueFrom.secretKeyRef
+}
+
+{{- end }}
+
+
+##################################
+### Template definitions below ###
+##################################
+{{- define "api" }}
+    api = input.{{.resource_type}}[_]
+{{- end}}
+
+# resolves path to the spec key
+{{- define "spec" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    spec = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    spec = api.config.spec.jobTemplate.spec.template.spec
+    {{- else }}
+    spec = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the spec key for terraform-defined k8s resources
+{{- define "specTF" }}
+    {{- template "api" . }}
+    {{- if eq .resource_type "kubernetes_pod" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_pod_security_policy" }}
+    specTF = api.config.spec
+    {{- else if eq .resource_type "kubernetes_cron_job" }}
+    specTF = api.config.spec.job_template.spec.template.spec
+    {{- else }}
+    specTF = api.config.spec.template.spec
+    {{- end }}
+{{- end }}
+
+# resolves path to the containers list
+{{- define "containers" }}
+    {{- template "spec" . }}
+    containers = spec.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context
+{{- define "containersSecurityContext" }}
+    {{- template "containers" . }}
+    containersSecurityContext = containers.securityContext
+{{- end }}
+
+# resolves path to the containers list for terraform-defined k8s resources
+{{- define "containersTF" }}
+    {{- template "specTF" . }}
+    containersTF = specTF.containers[_]
+{{- end }}
+
+# resolves path to the containers' security context for terraform-defined k8s resources
+{{- define "containersSecurityContextTF" }}
+    {{- template "containersTF" . }}
+    containersSecurityContextTF = containersTF.security_context
+{{- end }}
+
+# resolves path to the initContainers list
+{{- define "initContainers" }}
+    {{- template "spec" . }}
+    initContainers = spec.initContainers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context
+{{- define "initContainersSecurityContext" }}
+    {{- template "initContainers" . }}
+    initContainersSecurityContext = initContainers.securityContext
+{{- end }}
+
+# resolves path to the initContainers list for terraform-defined k8s resources
+{{- define "initContainersTF" }}
+    {{- template "specTF" . }}
+    initContainersTF = specTF.init_containers[_]
+{{- end }}
+
+# resolves path to the initContainers' security context for terraform-defined k8s resources
+{{- define "initContainersSecurityContextTF" }}
+    {{- template "initContainersTF" . }}
+    initContainersSecurityContextTF = initContainersTF.security_context
+{{- end }}
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/containersAsHighUID.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/containersAsHighUID.rego
new file mode 100755
index 0000000..6d6e8e6
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/containersAsHighUID.rego
@@ -0,0 +1,102 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    pod.config.spec.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    container.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    initcontainer := pod.config.spec.initContainers[_]
+    initcontainer.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    pod.config.spec.jobTemplate.spec.template.spec.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    container := pod.config.spec.jobTemplate.spec.template.spec.containers[_]
+    container.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    initcontainer := pod.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    initcontainer.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod_security_policy[_]
+    ranges := pod.config.spec.runAsUser.ranges[_]
+    ranges.min < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    pod.config.spec.template.spec.securityContext.runAsUser < 1000
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkContainer(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkInitContainer(pod.config.spec.template.spec)
+}
+
+checkInitContainer(spec) {
+    containers := spec.initContainers[_]
+    containers.securityContext.runAsUser < 1000
+}
+
+checkContainer(spec) {
+    containers := spec.containers[_]
+    containers.securityContext.runAsUser < 1000
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowedSysCalls.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowedSysCalls.rego
new file mode 100755
index 0000000..f918cc2
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowedSysCalls.rego
@@ -0,0 +1,51 @@
+### this pollicy depends on the parameters specified by the user/client. Here we are considering that no kernel level syscalls are allowed###
+package accurics
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    forbiddenSysctls = ["kernel.*"]
+    sysctl := pod.config.spec.securityContext.sysctls[_].name
+    forbidden_sysctl(sysctl, forbiddenSysctls)
+}
+
+##rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    forbiddenSysctls = ["kernel.*"]
+    sysctl := kind.config.spec.template.spec.securityContext.sysctls[_].name
+    forbidden_sysctl(sysctl, forbiddenSysctls)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    forbiddenSysctls = ["kernel.*"]
+    sysctl := cron_job.config.spec.jobTemplate.spec.template.spec.securityContext.sysctls[_].name
+    forbidden_sysctl(sysctl, forbiddenSysctls)
+}
+
+# if all syscalls are forbidden
+forbidden_sysctl(sysctl, arg) {
+    arg[_] == "*"
+}
+
+forbidden_sysctl(sysctl, arg) {
+    arg[_] == sysctl
+}
+
+forbidden_sysctl(sysctl, arg) {
+    startswith(sysctl, trim(arg[_], "*"))
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/AC-K8-DS-PO-M-0143.json b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/AC-K8-DS-PO-M-0143.json
new file mode 100644
index 0000000..10000a6
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/AC-K8-DS-PO-M-0143.json
@@ -0,0 +1,14 @@
+{
+    "name": "disAllowedVolumes",
+    "file": "disAllowedVolumes.rego",
+    "template_args": {
+        "name": "disAllowedVolumes",
+        "prefix": "",
+        "suffix": ""
+    },
+    "severity": "MEDIUM",
+    "description": "Vulnerable to CVE-2020-8555 (affected version of kube-controller-manager: v1.18.0, v1.17.0 - v1.17.4, v1.16.0 - v1.16.8,< v1.15.11",
+    "reference_id": "AC-K8-DS-PO-M-0143",
+    "category": "Data Security",
+    "version": 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/disAllowedVolumes.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/disAllowedVolumes.rego
new file mode 100644
index 0000000..706bbaf
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/disallowed_volumes/disAllowedVolumes.rego
@@ -0,0 +1,52 @@
+package accurics
+
+#rule for pod_security_policy
+{{.prefix}}{{.name}}{{.suffix}}[psp.id] {
+    psp := input.kubernetes_pod_security_policy[_]
+    affected_volumes := ["glusterfs", "quobyte", "storageos", "scaleIO"]
+    volume_type := psp.config.spec.volumes[_]
+    volNotAllowed(volume_type, affected_volumes)
+}
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    affected_volumes := ["glusterfs", "quobyte", "storageos", "scaleIO"]
+    volume_types := {x | pod.config.spec.volumes[_][x]; x != "name"}
+    vol:= volume_types[_]
+    volNotAllowed(vol, affected_volumes)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    affected_volumes := ["glusterfs", "quobyte", "storageos", "scaleIO"]
+    volume_types := {x | kind.config.spec.template.spec.volumes[_][x]; x != "name"}
+    vol:= volume_types[_]
+    volNotAllowed(vol, affected_volumes)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    affected_volumes := ["glusterfs", "quobyte", "storageos", "scaleIO"]
+    volume_types := {x | cron_job.config.spec.jobTemplate.spec.template.spec.volumes[_][x]; x != "name"}
+    vol:= volume_types[_]
+    volNotAllowed(vol, affected_volumes)
+}
+
+volNotAllowed(field, affected_volumes) {
+    field == affected_volumes[_]
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/dockerSockCheck.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/dockerSockCheck.rego
new file mode 100755
index 0000000..890439e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/dockerSockCheck.rego
@@ -0,0 +1,35 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    vol := pod.config.spec.jobTemplate.spec.template.spec.volumes[_]
+    socketPathCheck(vol.hostPath.path)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    vol := pod.config.spec.volumes[_]
+    socketPathCheck(vol.hostPath.path)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    vol := pod.config.spec.template.spec.volumes[_]
+    socketPathCheck(vol.hostPath.path)
+}
+
+socketPathCheck(attrib) {
+    contains(attrib, "/var/run/docker")
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithLatestTag.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithLatestTag.rego
new file mode 100755
index 0000000..de75e61
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithLatestTag.rego
@@ -0,0 +1,196 @@
+package accurics
+
+#rule for pod, covers containers, initContainers, terraform, init_containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.initContainers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.initContainers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.init_containers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.init_containers[_]
+    checkForPodNoTag(container)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller covers containers, initContainers, terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.init_containers[_]
+    checkForPodLatest(container)
+    }
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.init_containers[_]
+    checkForPodNoTag(container)
+}
+
+#rule for cron_job, covers containers, initContainers, terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.init_containers[_]
+    checkForPodLatest(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    checkForPodNoTag(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.init_containers[_]
+    checkForPodNoTag(container)
+}
+
+#check function for All KINDs
+checkForPodLatest(arg) {
+    img_split := split(arg.image, ":")
+    tag := img_split[count(img_split) - 1]
+    tag == "latest"
+}
+
+checkForPodNoTag(argument) {
+    img_split := split(argument.image, ":")
+    count(img_split) == 1
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithoutDigest.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithoutDigest.rego
new file mode 100755
index 0000000..6cf92e6
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/imageWithoutDigest.rego
@@ -0,0 +1,105 @@
+package accurics
+
+#rule for pod, same will satisfy terraform pod, covers containers, initContainers, and terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+#rule for init containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.initContainers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+#rule for terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.init_containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+#rule for deployment, daemonset, job, replica_set, replication_controller, stateful_set covers containers, initContainers, terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.init_containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+#rule for cron_job, covers containers, initContainers, terraform init_containers
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.init_containers[_]
+    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
+    not all(satisfied)
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/kubeDashboardEnabled.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/kubeDashboardEnabled.rego
new file mode 100755
index 0000000..d9746d1
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/kubeDashboardEnabled.rego
@@ -0,0 +1,6 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    pod.config.metadata.labels.app == "kubernetes-dashboard"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/otherNamespace.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/otherNamespace.rego
new file mode 100755
index 0000000..7ce3427
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/otherNamespace.rego
@@ -0,0 +1,20 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_cron_job", "undefined"),
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_pod", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    pod.config.metadata.namespace == "default"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/priviledgedContainersEnabled.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/priviledgedContainersEnabled.rego
new file mode 100755
index 0000000..148651e
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/priviledgedContainersEnabled.rego
@@ -0,0 +1,11 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    pod.config.spec.privileged == true
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod_security_policy[_]
+    pod.config.spec.privileged == true
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/probeCheck.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/probeCheck.rego
new file mode 100755
index 0000000..19eaf1a
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/probeCheck.rego
@@ -0,0 +1,68 @@
+#liveenessprobe and readinessprobe are not applicable for init containers.
+package accurics
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    not container["{{.argument}}"]
+}
+
+#rule for pod terraform
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    not container["{{.argumentTF}}"]
+}
+
+#rule for deployment, daemonset, job, replica_Set, replication_controller, stateful_set
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    not container["{{.argument}}"]
+}
+
+#rule for terraform deployment, daemonset, job, replica_Set, replication_controller, stateful_set
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    not container["{{.argumentTF}}"]
+}
+
+#rule for cronjob
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    not container["{{.argument}}"]
+}
+
+#rule for terraform cronjob
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    not container["{{.argumentTF}}"]
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secCompProfile.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secCompProfile.rego
new file mode 100755
index 0000000..f4bd21a
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secCompProfile.rego
@@ -0,0 +1,153 @@
+package accurics
+
+#rule for pod, pod_security_policy covers containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_pod", "undefined"),
+        object.get(input, "kubernetes_pod_security_policy", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    not input_container_allowed(kind.config.metadata)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller covers containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    not input_container_allowed(kind.config.spec.template.metadata)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    not input_container_allowed(cron_job.config.spec.jobTemplate.spec.template.metadata)
+}
+
+input_container_allowed(metadata) {
+    metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == "runtime/default"
+}
+
+input_container_allowed(metadata) {
+    metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == "docker/default"
+}
+
+  ####Kubernetes v1.19 or later########
+
+#rule for pod covers containers and checks field seccompProfile at container security context which is found at spec.containers.
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    not check_seccomp(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.initContainers[_]
+    not check_seccomp(container)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller covers containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.containers[_]
+    not check_seccomp(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    container := kind.config.spec.template.spec.initContainers[_]
+    not check_seccomp(container)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.containers[_]
+    not check_seccomp(container)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    container := cron_job.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    not check_seccomp(container)
+}
+
+##rule to check seccompProfile at PodSecurityContext which is found at PodSpec##
+
+#rule for pod
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    not check_seccomp(pod.config.spec)
+}
+
+#rule for deployment, daemonset, job, replica_set, stateful_set, replication_controller covers containers
+{{.prefix}}{{.name}}{{.suffix}}[kind.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    kind := item[_]
+    not check_seccomp(kind.config.spec.template.spec)
+}
+
+#rule for cron_job
+{{.prefix}}{{.name}}{{.suffix}}[cron_job.id] {
+    cron_job := input.kubernetes_cron_job[_]
+    not check_seccomp(cron_job.config.spec.jobTemplate.spec.template.spec)
+}
+
+#function for all Kinds and scenarios
+check_seccomp(container) {
+    container.securityContext.seccompProfile.type == "RuntimeDefault"
+}
+
+check_seccomp(container) {
+    container.securityContext.seccompProfile.type == "DockerDefault"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secretsAsEnvVariables.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secretsAsEnvVariables.rego
new file mode 100755
index 0000000..780bb45
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/secretsAsEnvVariables.rego
@@ -0,0 +1,75 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    containers := pod.config.spec.containers[_]
+    env := containers.env[_]
+    env.valueFrom != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_pod[_]
+    initcontainer := pod.config.spec.initContainers[_]
+    env := initcontainer.env[_]
+    env.valueFrom != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    containers := pod.config.spec.jobTemplate.spec.template.spec.containers[_]
+    env := containers.env[_]
+    env.valueFrom != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+	pod := input.kubernetes_cron_job[_]
+    initcontainer := pod.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    env := initcontainer.env[_]
+    env.valueFrom != []
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkContainer(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkInitContainer(pod.config.spec.template.spec)
+}
+
+checkInitContainer(spec) {
+    containers := spec.initContainers[_]
+    env := containers.env[_]
+    env.valueFrom != []
+}
+
+checkContainer(spec) {
+    containers := spec.containers[_]
+    env := containers.env[_]
+    env.valueFrom != []
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextCheck.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextCheck.rego
new file mode 100755
index 0000000..f76c539
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextCheck.rego
@@ -0,0 +1,76 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    checkCorrectAttribute(pod.config.spec.jobTemplate.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkCorrectAttribute(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    checkCorrectAttribute(pod.config.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod_security_policy[_]
+    podSecurityCheck(pod.config.spec)
+}
+
+checkCorrectAttribute(spec) {
+    container := spec.containers[_]
+    containerSecurityCheck(container)
+}
+
+checkCorrectAttribute(spec) {
+    container := spec.initContainers[_]
+    containerSecurityCheck(container)
+}
+
+checkCorrectAttribute(spec) {
+    secContext := spec.securityContext
+    podSecurityCheck(secContext)
+}
+
+containerSecurityCheck(container) {
+	{{.not_allowed}}
+    container.{{.param1}}.{{.param}} == {{.value}}
+}
+
+containerSecurityCheck(container) {
+    object.get(container, "{{.param1}}", "undefined") == "undefined"
+}
+
+containerSecurityCheck(container) {
+    not container.{{.param1}}.{{.param}}
+}
+
+containerSecurityCheck(container) {
+	{{.allowed}}
+    not container.{{.param1}}.{{.arg1}}.{{.arg2}}
+}
+
+podSecurityCheck(secContext) {
+	{{.not_allowed}}
+    secContext.{{.param}} == {{.value}}
+}
+
+podSecurityCheck(secContext) {
+	{{.not_allowed}}
+    object.get(secContext, "{{.param}}", "undefined") == "undefined"
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextUsed.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextUsed.rego
new file mode 100755
index 0000000..5d24387
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/securityContextUsed.rego
@@ -0,0 +1,103 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    container := pod.config.spec.containers[_]
+    not container.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    initcontainer := pod.config.spec.initContainers[_]
+    not initcontainer.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    not pod.config.spec.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    container := pod.config.spec.jobTemplate.spec.template.spec.containers[_]
+    not container.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    initcontainer := pod.config.spec.jobTemplate.spec.template.spec.initContainers[_]
+    not initcontainer.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    not pod.config.spec.jobTemplate.spec.template.spec.securityContext
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined"),
+        object.get(input, "kubernetes_cron_job", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkPod(pod)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined"),
+        object.get(input, "kubernetes_cron_job", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkInitContainer(pod.config.spec.template.spec)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined"),
+        object.get(input, "kubernetes_cron_job", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkContainer(pod.config.spec.template.spec)
+}
+
+checkContainer(spec) {
+    containers := spec.containers[_]
+    not containers.securityContext
+}
+
+checkInitContainer(spec) {
+    containers := spec.initContainers[_]
+    not containers.securityContext
+}
+
+checkPod(pod) {
+    not pod.config.spec.template.spec.securityContext
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/specBoolCheck.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/specBoolCheck.rego
new file mode 100755
index 0000000..5794487
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/specBoolCheck.rego
@@ -0,0 +1,36 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    attribute := pod.config.spec.jobTemplate.spec.template.spec
+    boolCheck(attribute)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    attribute := pod.config.spec
+    boolCheck(attribute)
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    attribute := pod.config.spec.template.spec
+
+    boolCheck(attribute)
+}
+
+boolCheck(attribute) {
+    attribute.{{.param}} == {{.value}}
+}
\ No newline at end of file
diff --git a/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/tillerDeployed.rego b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/tillerDeployed.rego
new file mode 100755
index 0000000..f4b90f2
--- /dev/null
+++ b/pkg/http-server/k8s_testdata/testpolicies/kubernetes_pod/tillerDeployed.rego
@@ -0,0 +1,35 @@
+package accurics
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_pod[_]
+    pod.config.metadata.labels.app == "helm"
+    pod.config.metadata.labels.name == "tiller"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    pod := input.kubernetes_cron_job[_]
+    pod.config.spec.jobTemplate.spec.template.metadata.labels.app == "helm"
+    pod.config.spec.jobTemplate.spec.template.metadata.labels.name == "tiller"
+}
+
+{{.prefix}}{{.name}}{{.suffix}}[pod.id] {
+    item_list := [
+        object.get(input, "kubernetes_daemonset", "undefined"),
+        object.get(input, "kubernetes_deployment", "undefined"),
+        object.get(input, "kubernetes_job", "undefined"),
+        object.get(input, "kubernetes_replica_set", "undefined"),
+        object.get(input, "kubernetes_replication_controller", "undefined"),
+        object.get(input, "kubernetes_stateful_set", "undefined")
+    ]
+
+    item = item_list[_]
+    item != "undefined"
+
+    pod := item[_]
+    checkPod(pod)
+}
+
+checkPod(pod) {
+    pod.config.spec.template.metadata.labels.app == "helm"
+    pod.config.spec.template.metadata.labels.name == "tiller"
+}
\ No newline at end of file
diff --git a/pkg/http-server/routes.go b/pkg/http-server/routes.go
index 400e990..c7e86ae 100644
--- a/pkg/http-server/routes.go
+++ b/pkg/http-server/routes.go
@@ -29,13 +29,19 @@ type Route struct {
 
 // Routes returns a slice of routes of API endpoints to be registered with
 // http server
-func (g *APIServer) Routes() []*Route {
-	h := NewAPIHandler()
+func (g *APIServer) Routes(configFile string) []*Route {
+	h := NewAPIHandler(configFile)
 	routes := []*Route{
 		{verb: "GET", path: "/health", fn: h.Health},
 		{verb: "POST", path: versionedPath("/{iac}/{iacVersion}/{cloud}/local/file/scan"), fn: h.scanFile},
 		{verb: "POST", path: versionedPath("/{iac}/{iacVersion}/{cloud}/remote/dir/scan"), fn: h.scanRemoteRepo},
+
+		// K8s Webhook Routes
+		{verb: "GET", path: "/k8s/webhooks/{apiKey}/logs", fn: h.getLogs},
+		{verb: "GET", path: "/k8s/webhooks/{apiKey}/logs/{uid}", fn: h.getLogByUID},
+		{verb: "POST", path: versionedPath("/k8s/webhooks/{apiKey}/scan"), fn: h.scanIncomingWebhook},
 	}
+
 	return routes
 }
 
diff --git a/pkg/http-server/routes_test.go b/pkg/http-server/routes_test.go
index 06d3dad..3e20588 100644
--- a/pkg/http-server/routes_test.go
+++ b/pkg/http-server/routes_test.go
@@ -8,7 +8,7 @@ func TestRoutes(t *testing.T) {
 	t.Run("health route check", func(t *testing.T) {
 		var (
 			server = NewAPIServer()
-			got    = server.Routes()
+			got    = server.Routes("")
 			passed = false
 		)
 
diff --git a/pkg/http-server/server.go b/pkg/http-server/server.go
index 68529d8..275bafc 100644
--- a/pkg/http-server/server.go
+++ b/pkg/http-server/server.go
@@ -17,7 +17,8 @@
 package httpserver
 
 // APIServer struct for http api server
-type APIServer struct{}
+type APIServer struct{
+}
 
 // NewAPIServer returns a new APIServer{}
 func NewAPIServer() *APIServer {
diff --git a/pkg/http-server/start.go b/pkg/http-server/start.go
index 8075389..aa4c6bb 100644
--- a/pkg/http-server/start.go
+++ b/pkg/http-server/start.go
@@ -28,19 +28,19 @@ import (
 )
 
 // Start initializes api routes and starts http server
-func Start() {
+func Start(configFile string, certFile string, privateKeyFile string) {
 	// create a new API server
 	server := NewAPIServer()
 
 	// get all routes
-	routes := server.Routes()
+	routes := server.Routes(configFile)
 
 	// register routes and start the http server
-	server.start(routes)
+	server.start(routes, certFile, privateKeyFile)
 }
 
 // start http server
-func (g *APIServer) start(routes []*Route) {
+func (g *APIServer) start(routes []*Route, certFile string, privateKeyFile string) {
 
 	var (
 		err    error
@@ -56,19 +56,36 @@ func (g *APIServer) start(routes []*Route) {
 		router.Methods(v.verb).Path(v.path).HandlerFunc(v.fn)
 	}
 
+	// Add a route for all static templates / assets. Currently used for the Webhook logs views
+	// go/terrascan/asset is the path where the assets files are located inside the docker container
+	router.PathPrefix("/assets/").Handler(http.StripPrefix("/assets/", http.FileServer(http.Dir("/go/terrascan/assets"))))
+
+	var port = GatewayDefaultPort
+
+	// In case a certificate file is specified, we run the server with a different port
+	if certFile != "" {
+		port = TLSGatewayDefaultPort
+	}
+
 	// start http server
 	server := &http.Server{
-		Addr:    ":" + GatewayDefaultPort,
+		Addr:    ":" + port,
 		Handler: router,
 	}
 
 	go func() {
-		err = server.ListenAndServe()
+		var err error
+		if certFile != "" {
+			// In case a certificate file is specified, the server support TLS
+			err = server.ListenAndServeTLS(certFile, privateKeyFile)
+		} else {
+			err = server.ListenAndServe()
+		}
 		if err != nil && err != http.ErrServerClosed {
 			logger.Fatal(err)
 		}
 	}()
-	logger.Infof("http server listening at port %v", GatewayDefaultPort)
+	logger.Infof("http server listening at port %v", port)
 
 	// Wait for interrupt signal to gracefully shutdown the server
 	quit := make(chan os.Signal, 1)
diff --git a/pkg/http-server/templates/index.html b/pkg/http-server/templates/index.html
new file mode 100644
index 0000000..43b0bd9
--- /dev/null
+++ b/pkg/http-server/templates/index.html
@@ -0,0 +1,34 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <title>K8s Admission Review Logs</title>
+    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
+    <link rel="stylesheet" href="/assets/jsonTree.css">
+    <link rel="stylesheet" href="/assets/webhook-scan-logs.css">
+  </head>
+  <body>
+      <table class="table table-sm" style="table-layout: fixed;">
+        <thead class="thead-light">
+        <tr>
+          <th scope="col" style="width: 256px" >Time</th>
+          <th scope="col" style="width: 200px">Status</th>
+          <th scope="col" style="width: 50%">Request</th>
+          <th scope="col" style="width: 50%">Reasoning</th>
+        </tr>
+        </thead>
+        <tbody>
+        {{range .}}
+        <tr>
+          <td class="review-time"><a href={{.LogUrl}} class="time-object" target="_blank">{{.CreatedAt}}</a></td>
+          <td class="review-status">{{.Status}}</td>
+          <td class="review-request json-object ">{{.Request}}</td>
+          <td class="review-reasoning json-object ">{{.Reasoning}}</td>
+        </tr>
+        {{end}}
+        </tbody>
+      </table>
+      <script type="text/javascript" src="/assets/jsonTree.js"></script>
+      <script type="text/javascript" src="/assets/moment.js"></script>
+      <script type="text/javascript" src="/assets/webhook-scan-logs.js"></script>
+  </body>
+</html>
diff --git a/pkg/http-server/templates/show.html b/pkg/http-server/templates/show.html
new file mode 100644
index 0000000..7b36330
--- /dev/null
+++ b/pkg/http-server/templates/show.html
@@ -0,0 +1,40 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <title>K8s Admission Review Logs</title>
+  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
+  <link rel="stylesheet" href="/assets/jsonTree.css">
+  <link rel="stylesheet" href="/assets/webhook-scan-logs.css">
+</head>
+<body>
+<main class="jumbotron">
+  <table class="table table-sm" style="table-layout: fixed;">
+    <tbody>
+    <tr>
+      <th scope="col" style="width: 256px">UID</th>
+      <th scope="col">{{.UID}}</th>
+    </tr>
+    <tr>
+      <th scope="col">Status</th>
+      <th scope="col" class="review-status">{{.Status}}</th>
+    </tr>
+    <tr>
+      <th scope="col">Request</th>
+      <th class="json-object" scope="col">{{.Request}}</th>
+    </tr>
+    <tr>
+      <th scope="col">Violations Summary</th>
+      <th class="json-object" scope="col">{{.Violations}}</th>
+    </tr>
+    <tr>
+      <th scope="col">Deniable Violations</th>
+      <th class="json-object" scope="col">{{.DeniableViolations}}</th>
+    </tr>
+    </tbody>
+  </table>
+</main>
+<script type="text/javascript" src="/assets/jsonTree.js"></script>
+<script type="text/javascript" src="/assets/moment.js"></script>
+<script type="text/javascript" src="/assets/webhook-scan-logs.js"></script>
+</body>
+</html>
diff --git a/pkg/http-server/webhook-deny-rule-matcher.go b/pkg/http-server/webhook-deny-rule-matcher.go
new file mode 100644
index 0000000..4becf0b
--- /dev/null
+++ b/pkg/http-server/webhook-deny-rule-matcher.go
@@ -0,0 +1,35 @@
+package httpserver
+
+import (
+	"github.com/accurics/terrascan/pkg/config"
+	"github.com/accurics/terrascan/pkg/results"
+	"github.com/accurics/terrascan/pkg/utils"
+)
+
+type webhookDenyRuleMatcher struct {
+}
+
+// This class should check if one of the violations found is relevant for the specified K8s deny rules
+func (g *webhookDenyRuleMatcher) match(violation results.Violation, denyRules config.K8sDenyRules) bool {
+	if &denyRules == nil {
+		return false
+	}
+
+	// Currently we support:
+	// 1. A minimum severity level
+	// 2. A category list
+	// In case one of the conditions is met, we return true. (We perform an OR between the rules)
+	if len(denyRules.DeniedSeverity) > 0 && utils.CheckSeverity(violation.Severity, denyRules.DeniedSeverity) {
+		return true
+	}
+
+	if denyRules.Categories != nil {
+		for _, category := range denyRules.Categories {
+			if category == violation.Category {
+				return true
+			}
+		}
+	}
+
+	return false
+}
diff --git a/pkg/http-server/webhook-deny-rule-matcher_test.go b/pkg/http-server/webhook-deny-rule-matcher_test.go
new file mode 100644
index 0000000..8f0e165
--- /dev/null
+++ b/pkg/http-server/webhook-deny-rule-matcher_test.go
@@ -0,0 +1,98 @@
+package httpserver
+
+import (
+	"github.com/accurics/terrascan/pkg/config"
+	"github.com/accurics/terrascan/pkg/results"
+	"testing"
+)
+
+func TestDenyRuleMatcher(t *testing.T) {
+	testMediumSeverity := "MEDIUM"
+	testCategory := "Identity and Access Management"
+	testRuleName := "My Amazing Rule"
+
+	table := []struct {
+		name			   string
+		ruleSeverity       string
+		ruleCategory       string
+		ruleName      	   string
+		k8sDenyRules	   config.K8sDenyRules
+		expectedResult 	   bool
+	}{
+		{
+			name: "no deny rules",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			expectedResult: false,
+		},
+		{
+			name: "matched severity",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ DeniedSeverity: testMediumSeverity },
+			expectedResult: true,
+		},
+
+		{
+			name: "lower severity",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ DeniedSeverity: "LOW" },
+			expectedResult: true,
+		},
+		{
+			name: "higher severity",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ DeniedSeverity: "High" },
+			expectedResult: false,
+		},
+		{
+			name: "not matching category",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ Categories: []string { "WRONG!" } },
+			expectedResult: false,
+		},
+
+		{
+			name: "matching category",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ Categories: []string { "WRONG!", testCategory } },
+			expectedResult: true,
+		},
+		{
+			name: "incorrect severity by matching category",
+			ruleSeverity: testMediumSeverity,
+			ruleCategory: testCategory,
+			ruleName: testRuleName,
+			k8sDenyRules: config.K8sDenyRules{ Categories: []string { "WRONG!", testCategory }, DeniedSeverity: "HIGH" },
+			expectedResult: true,
+		},
+	}
+
+	var denyRuleMatcher = webhookDenyRuleMatcher{}
+
+	for _, tt := range table {
+		t.Run(tt.name, func(t *testing.T) {
+
+			violation := results.Violation{
+				RuleName: tt.ruleName,
+				Severity: tt.ruleSeverity,
+				Category: tt.ruleCategory,
+			}
+
+			result := denyRuleMatcher.match(violation, tt.k8sDenyRules)
+			if result != tt.expectedResult {
+				t.Errorf("Expected: %v, Got: %v", tt.expectedResult, result)
+			}
+		})
+	}
+}
diff --git a/pkg/http-server/webhook-scan-logger.go b/pkg/http-server/webhook-scan-logger.go
new file mode 100644
index 0000000..cbec83b
--- /dev/null
+++ b/pkg/http-server/webhook-scan-logger.go
@@ -0,0 +1,197 @@
+package httpserver
+
+import (
+	"database/sql"
+	"go.uber.org/zap"
+	"os"
+	"time"
+)
+
+type WebhookScanLogger struct {
+	test bool
+}
+
+type webhookScanLog struct {
+	UID string
+	Request string
+	Allowed bool
+	ViolationsSummary string
+	DeniableViolations string
+	CreatedAt time.Time
+}
+
+// The file name where the DB is stored. Currently we use an SQLite DB
+var dbFileName = "k8s-admission-review-logs.db"
+
+func (g *WebhookScanLogger) log(webhookScanLog webhookScanLog) error {
+	// Insert a new Log record to the DB
+
+	db, err := g.getDbHandler()
+	if err != nil {
+		return err
+	}
+	defer db.Close()
+
+	insertLogSQL := `INSERT INTO logs(uid, request, allowed, violations_summary, deniable_violations, created_at)
+					 VALUES (?, ?, ?, ?, ?, ?)`
+
+	statement, err := db.Prepare(insertLogSQL)
+	if err != nil {
+		zap.S().Errorf("failed preparing SQL statement. error: '%v'", err)
+		return err
+	}
+	_, err = statement.Exec(webhookScanLog.UID,
+							webhookScanLog.Request,
+							webhookScanLog.Allowed,
+							webhookScanLog.ViolationsSummary,
+							webhookScanLog.DeniableViolations,
+							webhookScanLog.CreatedAt)
+	if err != nil {
+		zap.S().Errorf("failed to insert a new log. error: '%v'", err)
+		return err
+	}
+
+	return nil
+}
+
+func (g *WebhookScanLogger) fetchLogs() ([]webhookScanLog, error) {
+	// Fetch the entire logs in the DB, ordered by created_at DESC (the most updated will be at the top)
+
+	db, err := g.getDbHandler()
+	if err != nil {
+		return nil, err
+	}
+	defer db.Close()
+
+	row, err := db.Query("SELECT * FROM logs ORDER BY created_at DESC")
+	if err != nil {
+		zap.S().Errorf("failed query logs table. error: '%v'", err)
+		return nil, err
+	}
+
+	var result []webhookScanLog
+	defer row.Close()
+	for row.Next() {
+		var id int
+		var uid string
+		var request string
+		var allowed bool
+		var violationsSummary string
+		var deniableViolations string
+		var createdAt time.Time
+		row.Scan(&id, &uid, &request, &allowed, &violationsSummary, &deniableViolations, &createdAt)
+
+		result = append(result, webhookScanLog {
+			UID: uid,
+			Request: request,
+			Allowed: allowed,
+			ViolationsSummary: violationsSummary,
+			DeniableViolations: deniableViolations,
+			CreatedAt: createdAt,
+		})
+	}
+
+	return result, nil
+}
+
+func (g *WebhookScanLogger) fetchLogById(logUID string) (*webhookScanLog, error) {
+	// Fetch a specific log by its request UID
+
+	db, err := g.getDbHandler()
+	if err != nil {
+		return nil, err
+	}
+	defer db.Close()
+
+	row, err := db.Query("SELECT * FROM logs WHERE uid=?", logUID)
+	if err != nil {
+		zap.S().Errorf("failed query logs table. error: '%v'", err)
+		return nil, err
+	}
+	defer row.Close()
+
+	for row.Next() {
+		var id int
+		var uid string
+		var request string
+		var allowed bool
+		var violationsSummary string
+		var deniableViolations string
+		var createdAt time.Time
+		row.Scan(&id, &uid, &request, &allowed, &violationsSummary, &deniableViolations, &createdAt)
+
+		return &webhookScanLog {
+			UID: uid,
+			Request: request,
+			Allowed: allowed,
+			ViolationsSummary: violationsSummary,
+			DeniableViolations: deniableViolations,
+			CreatedAt: createdAt,
+		}, nil
+	}
+
+	return &webhookScanLog{}, nil
+}
+
+func (g *WebhookScanLogger) initDBIfNeeded() error {
+	// Check where the SQL file exists. If it does do nothing. Otherwise, create the DB file and the Logs table.
+	if _, err := os.Stat(g.dbFilePath()); os.IsNotExist(err) {
+		file, err := os.Create(g.dbFilePath())
+		if err != nil {
+			zap.S().Errorf("failed create db file. error: '%v'", err)
+			return err
+		}
+		file.Close()
+
+		db, err := sql.Open("sqlite3", g.dbFilePath())
+		if err != nil {
+			zap.S().Errorf("failed to open sql file. error: '%v'", err)
+			return err
+		}
+		defer db.Close()
+
+		createLogsTableSQL := `CREATE TABLE logs (
+													"id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
+													"uid" TEXT UNIQUE,
+													"request" TEXT,
+													"allowed" INTEGER,
+													"violations_summary" TEXT,
+													"deniable_violations" TEXT,
+													"created_at" DATETIME
+												  );`
+		statement, err := db.Prepare(createLogsTableSQL)
+		if err != nil {
+			zap.S().Errorf("failed to create logs table. error: '%v'", err)
+			return err
+		}
+		statement.Exec()
+	}
+
+	return nil
+}
+
+func (g*WebhookScanLogger) getDbHandler() (*sql.DB, error) {
+	g.initDBIfNeeded()
+
+	db, err := sql.Open("sqlite3", g.dbFilePath())
+	if err != nil {
+		zap.S().Errorf("failed to open sql file. error: '%v'", err)
+	}
+
+	return db, err
+}
+
+
+func (g *WebhookScanLogger) dbFilePath() string {
+	if g.test {
+		return "./" + dbFileName
+	} else {
+		// This is where the DB file should be located in the container (It is going to be saved in the host machine volume)
+		return "/data/k8s-admission-review-logs.db"
+	}
+}
+
+// Used for Tests only - clear the DB file after the tests are done
+func (g *WebhookScanLogger) clearDbFilePath() {
+	os.Remove(g.dbFilePath())
+}
diff --git a/pkg/http-server/webhook-scan-logger_test.go b/pkg/http-server/webhook-scan-logger_test.go
new file mode 100644
index 0000000..518c0ae
--- /dev/null
+++ b/pkg/http-server/webhook-scan-logger_test.go
@@ -0,0 +1,77 @@
+package httpserver
+
+import (
+	"testing"
+	"time"
+)
+func TestLogs(t *testing.T) {
+	t.Run("Log a new webhook scan", func(t *testing.T) {
+		var logger = WebhookScanLogger{
+			test: true,
+		}
+		defer logger.clearDbFilePath()
+
+		fetchedLogs, err := logger.fetchLogs()
+		if len(fetchedLogs) > 0 {
+			t.Errorf("At the beginning no logs should exist. Got: '%v'", len(fetchedLogs))
+		}
+
+		if err != nil {
+			t.Errorf("Got error")
+		}
+
+		var log = webhookScanLog{
+			UID: "myUID",
+			Request: "MyRequest",
+			CreatedAt: time.Now(),
+			Allowed: true,
+			DeniableViolations: "MyViolations",
+			ViolationsSummary: "ViolationsSummary",
+		}
+
+		logger.log(log)
+
+		fetchedLogs, err = logger.fetchLogs()
+		if err != nil {
+			t.Errorf("Got error")
+		}
+
+		if len(fetchedLogs) != 1 {
+			t.Errorf("A new log should be returned. Got: '%v' logs", len(fetchedLogs))
+		}
+
+		myFetchLog, err := logger.fetchLogById(log.UID)
+		if err != nil {
+			t.Errorf("Got error")
+		}
+
+		if len(myFetchLog.UID) < 1 {
+			t.Errorf("Log with ID: '%v' is not returned by fetchLogById", log.UID)
+		}
+
+		if myFetchLog.UID != log.UID {
+			t.Errorf("Wrong UID. Expected '%v', Got: '%v'", log.UID, myFetchLog.UID)
+
+		}
+
+		if myFetchLog.Allowed != log.Allowed {
+			t.Errorf("Wrong Allowed. Expected '%v', Got: '%v'", log.Allowed, myFetchLog.Allowed)
+		}
+
+		if myFetchLog.ViolationsSummary != log.ViolationsSummary {
+			t.Errorf("Wrong ViolationsSummary. Expected '%v', Got: '%v'", log.ViolationsSummary, myFetchLog.ViolationsSummary)
+		}
+
+		if myFetchLog.Request != log.Request {
+			t.Errorf("Wrong Request. Expected '%v', Got: '%v'", log.Request, myFetchLog.Request)
+		}
+
+		if myFetchLog.DeniableViolations != log.DeniableViolations {
+			t.Errorf("Wrong DeniableViolations. Expected '%v', Got: '%v'", log.DeniableViolations, myFetchLog.DeniableViolations)
+		}
+
+		if myFetchLog.CreatedAt.Unix() != log.CreatedAt.Unix() {
+			t.Errorf("Wrong CreatedAt. Expected '%v', Got: '%v'", log.CreatedAt, myFetchLog.CreatedAt)
+		}
+	})
+}
diff --git a/pkg/http-server/webhook-scan-logs.go b/pkg/http-server/webhook-scan-logs.go
new file mode 100644
index 0000000..f99e80c
--- /dev/null
+++ b/pkg/http-server/webhook-scan-logs.go
@@ -0,0 +1,242 @@
+/*
+    Copyright (C) 2020 Accurics, Inc.
+
+	Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+		http://www.apache.org/licenses/LICENSE-2.0
+
+	Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+package httpserver
+
+import (
+	"encoding/json"
+	"fmt"
+	"github.com/accurics/terrascan/pkg/results"
+	"github.com/gorilla/mux"
+	_ "github.com/mattn/go-sqlite3"
+	"go.uber.org/zap"
+	"html/template"
+	"net/http"
+	"time"
+)
+
+type webhookDisplayedViolation struct {
+	RuleName string `json:"rule_name"`
+	Category string `json:"category"`
+	Description string `json:"description"`
+	Severity string `json:"severity"`
+}
+
+type webhookDisplayedReview struct {
+	Request webhookDisplayedRequest `json:"request"`
+}
+
+type webhookDisplayedRequest struct {
+	Operation string `json:"operation"`
+	Object map[string]interface{} `json:"object"`
+}
+
+type webhookDisplayedIndexScanLog struct {
+	CreatedAt time.Time
+	LogUrl string
+	Status string
+	Request string
+	Reasoning string
+}
+
+type webhookDisplayedShowLog struct {
+	CreatedAt time.Time
+	UID string
+	Status string
+	Request string
+	Violations string
+	DeniableViolations string
+}
+
+func (g *APIHandler) getLogs(w http.ResponseWriter, r *http.Request) {
+	// Return an HTML page including all the logs history
+
+	params := mux.Vars(r)
+
+	apiKey := params["apiKey"]
+	if !g.validateAuthorization(apiKey, w) {
+		return
+	}
+
+	logger := WebhookScanLogger{
+		test: g.test,
+	}
+
+	// The templates are saved in the docker in this location
+	t, _ := template.ParseFiles("/go/terrascan/index.html")
+
+	logs, err := logger.fetchLogs()
+	if err != nil {
+		errMsg := fmt.Sprintf("error reading logs from DB: '%v'", err)
+		zap.S().Error(errMsg)
+		apiErrorResponse(w, errMsg, http.StatusInternalServerError)
+		return
+	}
+
+	var logsData []webhookDisplayedIndexScanLog
+	for _, log := range logs {
+		logsData = append(logsData, webhookDisplayedIndexScanLog{
+			CreatedAt: log.CreatedAt,
+			Status: g.getLogStatus(log),
+			LogUrl: g.getLogPath(r.Host, apiKey, log.UID),
+			Reasoning: g.getLogReasoning(log),
+			Request: g.getLogRequest(log),
+		})
+	}
+
+	t.Execute(w, logsData)
+}
+
+func (g *APIHandler) getLogByUID(w http.ResponseWriter, r *http.Request) {
+	// Return an HTML page including the selected log
+
+	params := mux.Vars(r)
+
+	if !g.validateAuthorization(params["apiKey"], w) {
+		return
+	}
+
+	var uid = params["uid"]
+	if len(uid) < 1 {
+		apiErrorResponse(w, "Log UID is missing", http.StatusBadRequest)
+		return
+	}
+
+	logger := WebhookScanLogger{
+		test: g.test,
+	}
+
+	log, err := logger.fetchLogById(uid)
+	if err != nil {
+		errMsg := fmt.Sprintf("error reading logs from DB: '%v'", err)
+		zap.S().Error(errMsg)
+		apiErrorResponse(w, errMsg, http.StatusInternalServerError)
+		return
+	}
+
+	if len(log.UID) < 1 {
+		apiErrorResponse(w, "Log is not found", http.StatusNotFound)
+		return
+	}
+
+	displayedScanLog := webhookDisplayedShowLog{
+		UID: log.UID,
+		CreatedAt: log.CreatedAt,
+		Status: g.getLogStatus(*log),
+		Request: log.Request,
+		Violations: log.ViolationsSummary,
+		DeniableViolations: log.DeniableViolations,
+	}
+
+	t, _ := template.ParseFiles("/go/terrascan/show.html")
+
+	t.Execute(w, displayedScanLog)
+}
+
+func (g *APIHandler) getLogPath(host string, apiKey string, logUID string) string {
+	// Use this as the link to show the a specific log
+	return fmt.Sprintf("https://%v/k8s/webhooks/%v/logs/%v", host,  apiKey, logUID)
+}
+
+func (g *APIHandler)getLogStatus(log webhookScanLog) string {
+	// Calculate a log status:
+	// 1. !Allowed -> Rejected
+	// 2. Allowed -> if there are violations -> Allowed with Warnings. Otherwise -> Allowed
+	if !log.Allowed {
+		return "Rejected"
+	}
+
+	var violationStore results.ViolationStore
+	err := json.Unmarshal([]byte(log.ViolationsSummary), &violationStore)
+	if err != nil {
+		zap.S().Errorf("Failed to ..")
+	}
+
+	if len(violationStore.Violations) > 0 {
+		return "Allowed with warnings"
+	}
+
+	return "Allowed"
+}
+
+func (g *APIHandler)getLogReasoning(log webhookScanLog) string {
+	// Reasoning:
+	// - In case the request is denied (rejected), show the violations that cause the denial.
+	// - Otherwise, if there are violations, show the full violations list was found
+	// - Otherwise, reasoning is empty
+
+	var violations []*results.Violation
+	if !log.Allowed {
+		err := json.Unmarshal([]byte(log.DeniableViolations), &violations)
+		if err != nil {
+			zap.S().Errorf("Failed to deserialize deniable violations summary. Error: %v", err.Error())
+			return ""
+		}
+	} else {
+		var violationStore results.ViolationStore
+		err := json.Unmarshal([]byte(log.ViolationsSummary), &violationStore)
+		if err != nil {
+			zap.S().Errorf("Failed to deserialize violations summary. Error: %v", err.Error())
+			return ""
+		}
+
+		violations = violationStore.Violations
+	}
+
+	var result []webhookDisplayedViolation
+
+	if len(violations) < 1 {
+		return ""
+	} else {
+		for _, v := range violations {
+			result = append(result, webhookDisplayedViolation{
+				Category: v.Category,
+				Description: v.Description,
+				RuleName: v.RuleName,
+				Severity: v.Severity,
+			})
+		}
+
+		encoded, err := json.Marshal(result)
+		if err != nil {
+			zap.S().Errorf("failed to serialize violations: '%v'", err)
+			return ""
+		}
+
+		return string(encoded)
+	}
+
+	return ""
+}
+
+func (g *APIHandler)getLogRequest(log webhookScanLog) string {
+	var review webhookDisplayedReview
+
+	err := json.Unmarshal([]byte(log.Request), &review)
+
+	if err != nil {
+		zap.S().Errorf("Failed to deserialize request. Error: %v", err.Error())
+		return "{}"
+	}
+
+	result, err := json.Marshal(review.Request)
+	if err != nil {
+		zap.S().Errorf("Failed to serialize request. Error: %v", err.Error())
+		return "{}"
+	}
+
+	return  string(result)
+}
diff --git a/pkg/http-server/webhook-scan.go b/pkg/http-server/webhook-scan.go
new file mode 100644
index 0000000..bca2cc9
--- /dev/null
+++ b/pkg/http-server/webhook-scan.go
@@ -0,0 +1,297 @@
+/*
+    Copyright (C) 2020 Accurics, Inc.
+
+	Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+		http://www.apache.org/licenses/LICENSE-2.0
+
+	Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+package httpserver
+
+import (
+	"encoding/json"
+	"fmt"
+	"github.com/accurics/terrascan/pkg/config"
+	"github.com/accurics/terrascan/pkg/results"
+	"github.com/accurics/terrascan/pkg/runtime"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	runtimeK8s "k8s.io/apimachinery/pkg/runtime"
+
+	"k8s.io/apimachinery/pkg/runtime/serializer"
+
+	"github.com/gorilla/mux"
+	"go.uber.org/zap"
+	"io/ioutil"
+	v1 "k8s.io/api/admission/v1"
+	"net/http"
+	"os"
+	"time"
+)
+
+func (g *APIHandler) scanIncomingWebhook(w http.ResponseWriter, r *http.Request) {
+	currentTime := time.Now()
+
+	params := mux.Vars(r)
+	apiKey := params["apiKey"]
+
+	// Validate if authorized (API key is specified and matched the server one (saved in an environment variable)
+	if !g.validateAuthorization(apiKey, w) {
+		return
+	}
+
+	// Read the request into byte array
+	bytesRequestAdmissionReview, err := ioutil.ReadAll(r.Body)
+	if err != nil {
+		msg := fmt.Sprintf("Failed to read admission review: '%v'", err)
+		apiErrorResponse(w, msg, http.StatusBadRequest)
+		return
+	}
+
+	zap.S().Debugf("scanning configuration webhook request: %+v", string(bytesRequestAdmissionReview))
+
+	// Unmarshal the byte array into a v1.AdmissionReview object
+	requestedAdmissionReview, err := g.deserializeAdmissionReviewRequest(bytesRequestAdmissionReview)
+	if err != nil {
+		apiErrorResponse(w, err.Error(), http.StatusBadRequest)
+		return
+	}
+
+	// In case the object is nil => an operation of DELETE happened, just return 'allow' since there is nothing to check
+	if len(requestedAdmissionReview.Request.Object.Raw) < 1 {
+		g.sendResponseAdmissionReview(w, *requestedAdmissionReview, true, nil, "")
+		return
+	}
+
+	// Save the object into a temp file for the policy engines
+	tempFile, err := g.writeObjectToTempFile(requestedAdmissionReview.Request.Object.Raw)
+	defer os.Remove(tempFile.Name())
+	if err != nil {
+		apiErrorResponse(w, err.Error(), http.StatusInternalServerError)
+		return
+	}
+
+	// Run the policy engines
+	output, err := g.executeEngines(*tempFile)
+	if err != nil {
+		apiErrorResponse(w, err.Error(), http.StatusInternalServerError)
+		return
+	}
+
+	// Calculate if there are anydeny violations
+	denyViolations, err := g.getDenyViolations(*output)
+	allowed := len(denyViolations) < 1
+	logPath := g.getLogPath(r.Host, apiKey, string(requestedAdmissionReview.Request.UID))
+
+	// Log the request in the DB
+	err = g.logWebhook(*output, string(requestedAdmissionReview.Request.UID), bytesRequestAdmissionReview, denyViolations,currentTime, allowed)
+	if err != nil {
+		apiErrorResponse(w, err.Error(), http.StatusInternalServerError)
+		return
+	}
+
+	// Send the correct response according to the result
+	g.sendResponseAdmissionReview(w, *requestedAdmissionReview, allowed, output, logPath)
+}
+
+func (g *APIHandler) validateAuthorization(apiKey string, w http.ResponseWriter) bool {
+	if len(apiKey) < 1 {
+		msg := "apiKey is missing"
+		zap.S().Error(msg)
+		apiErrorResponse(w, msg, http.StatusBadRequest)
+		return false
+	}
+
+	savedApiKey := os.Getenv("K8S_WEBHOOK_API_KEY")
+	if len(savedApiKey) < 1 {
+		msg := "K8S_WEBHOOK_API_KEY environment variable MUST be declared"
+		zap.S().Error(msg)
+		apiErrorResponse(w, msg, http.StatusInternalServerError)
+		return false
+	}
+
+	if apiKey != savedApiKey {
+		msg := "Invalid apiKey"
+		zap.S().Error(msg)
+		apiErrorResponse(w, msg, http.StatusUnauthorized)
+		return false
+	}
+
+	return true
+}
+
+func (g *APIHandler) getDeniedViolations(violations results.ViolationStore, denyRules config.K8sDenyRules) []*results.Violation {
+	// Check whether one of the violations matches the deny violations configuration
+
+	var denyViolations []*results.Violation
+
+	denyRuleMatcher := webhookDenyRuleMatcher{}
+
+	for _, violation := range violations.Violations {
+		if denyRuleMatcher.match(*violation, denyRules) {
+			denyViolations = append(denyViolations, violation)
+		}
+	}
+
+	return denyViolations
+}
+
+func (g *APIHandler) writeObjectToTempFile(objectBytes []byte) (*os.File, error) {
+	tempFile, err := ioutil.TempFile("", "terrascan-*.json")
+	if err != nil {
+		zap.S().Errorf("failed to create temp file: '%v'", err)
+		return nil, err
+	}
+
+	zap.S().Debugf("created temp config file at '%s'", tempFile.Name())
+
+	_, err = tempFile.Write(objectBytes)
+	if err != nil {
+		zap.S().Errorf("failed to write object to temp file: '%v'", err)
+		return nil, err
+	}
+
+	return tempFile, nil
+}
+
+func (g *APIHandler) executeEngines(tempFile os.File) (*runtime.Output, error)  {
+	var executor *runtime.Executor
+	var err error
+	if g.test {
+		executor, err = runtime.NewExecutor("k8s", "v1", []string { "k8s" },
+			tempFile.Name(), "", g.configFile, []string{"./k8s_testdata/testpolicies"}, []string{}, []string{}, "")
+	} else {
+		executor, err = runtime.NewExecutor("k8s", "v1", []string { "k8s" },
+			tempFile.Name(), "", g.configFile, []string{}, []string{}, []string{}, "")
+	}
+
+	if err != nil {
+		zap.S().Errorf("failed to create runtime executer: '%v'", err)
+		return nil, err
+	}
+
+	result, err := executor.Execute()
+	if err != nil {
+		zap.S().Error("failed to scan resource object. error: '%v'", err)
+		return nil, err
+	}
+
+	return &result, nil
+}
+
+func (g *APIHandler) getDenyViolations(output runtime.Output) ([]*results.Violation, error) {
+	// Calcualte the deny violations according to the configuration specified in the config file
+	configReader, err := config.NewTerrascanConfigReader(g.configFile)
+	if err != nil {
+		zap.S().Errorf("error loading config file: '%v'", err)
+		return nil, err
+	}
+
+	denyViolations := g.getDeniedViolations(*output.Violations.ViolationStore, configReader.GetK8sDenyRules())
+
+	return denyViolations, nil
+}
+
+func (g *APIHandler) sendResponseAdmissionReview(w http.ResponseWriter,
+												 requestedAdmissionReview v1.AdmissionReview,
+												 allowed bool,
+												 output *runtime.Output,
+												 logPath string,) {
+	responseAdmissionReview := &v1.AdmissionReview{}
+	responseAdmissionReview.SetGroupVersionKind(requestedAdmissionReview.GroupVersionKind())
+
+	responseAdmissionReview.Response = &v1.AdmissionResponse{
+		UID: requestedAdmissionReview.Request.UID,
+		Allowed: allowed,
+	}
+
+	if output != nil {
+		// Means we ran the engines and we have results
+		if allowed {
+			if len(output.Violations.ViolationStore.Violations) > 0 {
+				// In case there are no denial violations, just return the log URL as a warning
+				responseAdmissionReview.Response.Warnings = []string{logPath}
+			}
+		} else {
+			// In case the request was denied, return 403 and the log URL as an error message
+			responseAdmissionReview.Response.Result = &metav1.Status{Message: logPath, Code: 403}
+		}
+	}
+
+	respBytes, err := json.Marshal(responseAdmissionReview)
+	if err != nil {
+		msg := fmt.Sprintf("failed to serialize admission review response: %v", err)
+		zap.S().Error(msg)
+		apiErrorResponse(w, msg, http.StatusInternalServerError)
+	}
+
+	zap.S().Debugf("Response result: %+v", string(respBytes))
+
+	apiResponse(w, string(respBytes), http.StatusOK)
+}
+
+func (g *APIHandler) logWebhook(output runtime.Output,
+								uid string,
+								bytesAdmissionReview []byte,
+								denyViolations []*results.Violation,
+								currentTime time.Time,
+								allowed bool) error {
+	var deniedViolationsEncoded string
+
+	if len(denyViolations) < 1 {
+		deniedViolationsEncoded = ""
+	} else {
+		d, _ := json.Marshal(denyViolations)
+		deniedViolationsEncoded = string(d)
+	}
+
+	encodedViolationsSummary, _ := json.Marshal(output.Violations.ViolationStore)
+
+	logger := WebhookScanLogger{
+		test: g.test,
+	}
+
+	err := logger.log(webhookScanLog {
+		UID: uid,
+		Request: string(bytesAdmissionReview),
+		Allowed: allowed,
+		DeniableViolations: deniedViolationsEncoded,
+		ViolationsSummary: string(encodedViolationsSummary),
+		CreatedAt: currentTime,
+	})
+	if err != nil {
+		zap.S().Error("error logging scan result: '%v'", err)
+		return err
+	}
+
+	return nil
+}
+
+func (g *APIHandler) deserializeAdmissionReviewRequest(bytesAdmissionReview []byte) (*v1.AdmissionReview, error) {
+	var scheme = runtimeK8s.NewScheme()
+	v1.AddToScheme(scheme)
+
+	var codecs = serializer.NewCodecFactory(scheme)
+	deserializer := codecs.UniversalDeserializer()
+
+	obj, _, err := deserializer.Decode(bytesAdmissionReview, nil, nil)
+	if err != nil {
+		zap.S().Errorf("Request could not be decoded: %v", err)
+		return nil , err
+	}
+
+	requestedAdmissionReview, ok := obj.(*v1.AdmissionReview)
+	if !ok {
+		zap.S().Errorf("Failed to deserialize request body to v1.AdmissionReview. Obj: %v", obj)
+		return nil , err
+	}
+
+	return requestedAdmissionReview, nil
+}
diff --git a/pkg/http-server/webhook-scan_test.go b/pkg/http-server/webhook-scan_test.go
new file mode 100644
index 0000000..7431359
--- /dev/null
+++ b/pkg/http-server/webhook-scan_test.go
@@ -0,0 +1,244 @@
+package httpserver
+
+import (
+	"bytes"
+	"encoding/json"
+	"fmt"
+	"github.com/gorilla/mux"
+	"io/ioutil"
+	v1 "k8s.io/api/admission/v1"
+	"net/http"
+	"net/http/httptest"
+	"os"
+	"testing"
+)
+
+func TestUWebhooks(t *testing.T) {
+	testFilePath := "./k8s_testdata/testconfig.json"
+	testApiKey := "Test-API-KEY"
+	testEnvApiKey := "Test-API-KEY"
+	testConfigFile := ""
+
+	table := []struct {
+		name string
+		contentRequestPath string
+		apiKey string
+		envApiKey string
+		wantStatus int
+		configFile string
+		warnings bool
+		allowed bool
+		statusCode int32
+		statusMessage bool
+	}{
+		{
+			name: "missing api key",
+			contentRequestPath: testFilePath,
+			apiKey: "",
+			envApiKey: testEnvApiKey,
+			wantStatus: http.StatusBadRequest,
+			configFile: testConfigFile,
+		},
+		{
+			name: "missing K8S_WEBHOOK_API_KEY",
+			contentRequestPath: testFilePath,
+			apiKey: testApiKey,
+			envApiKey: "",
+			wantStatus: http.StatusInternalServerError,
+			configFile: testConfigFile,
+		},
+		{
+			name: "invalid api key",
+			contentRequestPath: testFilePath,
+			apiKey: testApiKey,
+			envApiKey: "Invalid API KEY",
+			wantStatus: http.StatusUnauthorized,
+			configFile: testConfigFile,
+		},
+		{
+			name: "invalid api key",
+			contentRequestPath: testFilePath,
+			apiKey: testApiKey,
+			envApiKey: "Invalid API KEY",
+			wantStatus: http.StatusUnauthorized,
+			configFile: testConfigFile,
+		},
+		{
+			name:       "invalid request json content",
+			contentRequestPath: "./k8s_testdata/invalid.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			wantStatus: http.StatusBadRequest,
+			configFile: testConfigFile,
+		},
+		{
+			name:       "empty request json content",
+			contentRequestPath: "./k8s_testdata/empty.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			wantStatus: http.StatusBadRequest,
+			configFile: testConfigFile,
+		},
+		{
+			name:       "request with empty object",
+			contentRequestPath: "./k8s_testdata/empty_object.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			wantStatus: http.StatusOK,
+			configFile: testConfigFile,
+			warnings: false,
+			allowed: true,
+		},
+		{
+			name:      "safe request object",
+			contentRequestPath: testFilePath,
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			wantStatus: http.StatusOK,
+			configFile: testConfigFile,
+			warnings: false,
+			allowed: true,
+		},
+		{
+			name:      "risky request object without config",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: testConfigFile,
+			warnings: true,
+			allowed: true,
+			wantStatus: http.StatusOK,
+		},
+		{
+			name:      "risky request object with config that make it safe",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: "./k8s_testdata/config-specific-rule.toml",
+			warnings: false,
+			allowed: true,
+			wantStatus: http.StatusOK,
+		},
+		{
+			name:      "risky request object with config that just removes some of the violations",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: "./k8s_testdata/config-medium-severity.toml",
+			warnings: true,
+			allowed: true,
+			wantStatus: http.StatusOK,
+		},
+		{
+			name:  "risky request object with denied severity",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: "./k8s_testdata/config-deny-high.toml",
+			warnings: false,
+			allowed: false,
+			statusCode: 403,
+			statusMessage: true,
+			wantStatus: http.StatusOK,
+		},
+		{
+			name:  "risky request object with denied categories",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: "./k8s_testdata/config-deny-category.toml",
+			warnings: false,
+			allowed: false,
+			statusCode: 403,
+			statusMessage: true,
+			wantStatus: http.StatusOK,
+		},
+		{
+			name:  "risky request object with denied categories that does not exist",
+			contentRequestPath: "./k8s_testdata/risky_testconfig.json",
+			apiKey: 	testApiKey,
+			envApiKey: testEnvApiKey,
+			configFile: "./k8s_testdata/config-deny-non-existing-category.toml",
+			warnings: true,
+			allowed: true,
+			wantStatus: http.StatusOK,
+		},
+	}
+
+	for _, tt := range table {
+		t.Run(tt.name, func(t *testing.T) {
+			os.Setenv("K8S_WEBHOOK_API_KEY", tt.envApiKey)
+
+			// test file to upload
+			path := tt.contentRequestPath
+			jsonFile, err := os.Open(path)
+			if err != nil {
+				t.Error(err)
+				return
+			}
+			defer jsonFile.Close()
+			logger := WebhookScanLogger{
+				test: true,
+			}
+			defer logger.clearDbFilePath()
+
+			byteValue, _ := ioutil.ReadAll(jsonFile)
+
+			var admissionRequest v1.AdmissionReview
+			json.Unmarshal(byteValue, &admissionRequest)
+
+			var url string
+			if len(tt.apiKey) > 0 {
+				url = fmt.Sprintf("/v1/k8s/webhooks/%v/scan", tt.apiKey)
+			} else {
+				url = fmt.Sprintf("/v1/k8s/webhooks/scan")
+			}
+
+			req := httptest.NewRequest("POST", url, bytes.NewReader(byteValue))
+			req.Header.Set("Content-Type", "application/json")
+			req = mux.SetURLVars(req, map[string]string{
+				"apiKey":        tt.apiKey,
+			})
+			res := httptest.NewRecorder()
+			// new api handler
+			h := &APIHandler{test: true, configFile: tt.configFile }
+			h.scanIncomingWebhook(res, req)
+
+			if res.Code != tt.wantStatus {
+				t.Errorf("incorrect status code, got: '%v', want: '%v', error: '%v'", res.Code, tt.wantStatus, res.Body)
+			}
+
+			var response v1.AdmissionReview
+			_ = json.Unmarshal(res.Body.Bytes(), &response)
+
+			if res.Code == http.StatusOK {
+				if tt.warnings && response.Response.Warnings == nil {
+					t.Errorf("Expected warnings but received None")
+				}
+
+				if tt.allowed != response.Response.Allowed {
+					t.Errorf("Mismach in allowed. Got: %v, expected: %v", response.Response.Allowed, tt.allowed)
+				}
+
+				if tt.statusCode != 0 && tt.statusCode != response.Response.Result.Code {
+					t.Errorf("Mismach Statud code Got: %v, expected: %v", response.Response.Result.Code, tt.statusCode)
+				}
+
+				if tt.warnings || tt.statusMessage {
+					var logPath string
+					if tt.warnings {
+						logPath = response.Response.Warnings[0]
+					} else if tt.statusMessage {
+						logPath = response.Response.Result.Message
+					}
+
+					expectedLogPath := fmt.Sprintf("https://%v/k8s/webhooks/%v/logs/705ab4f5-6393-11e8-b7cc-42010a800002", req.Host, tt.envApiKey)
+
+					if logPath !=  expectedLogPath {
+						t.Errorf("Mismach Log path. Got: %v, expected: %v", logPath, expectedLogPath)
+					}
+				}
+			}
+		})
+	}
+}
diff --git a/pkg/initialize/run.go b/pkg/initialize/run.go
index cec6f36..30472e0 100644
--- a/pkg/initialize/run.go
+++ b/pkg/initialize/run.go
@@ -51,7 +51,7 @@ func Run(isScanCmd bool) error {
 		return err
 	}
 
-	zap.S().Debug("intialized successfully")
+	zap.S().Debug("initialized successfully")
 	return nil
 }
 
diff --git a/pkg/runtime/executor_test.go b/pkg/runtime/executor_test.go
index 79cb7d5..8cfb576 100644
--- a/pkg/runtime/executor_test.go
+++ b/pkg/runtime/executor_test.go
@@ -1,12 +1,9 @@
 /*
     Copyright (C) 2020 Accurics, Inc.
-
 	Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
-
 		http://www.apache.org/licenses/LICENSE-2.0
-
 	Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
diff --git a/pkg/runtime/testdata/scan-skip-rules-low-severity.toml b/pkg/runtime/testdata/scan-skip-rules-low-severity.toml
index 3f4d71b..5dadbf9 100644
--- a/pkg/runtime/testdata/scan-skip-rules-low-severity.toml
+++ b/pkg/runtime/testdata/scan-skip-rules-low-severity.toml
@@ -11,4 +11,4 @@
     ]
 
 [severity]
-level = "low"
\ No newline at end of file
+level = "low"
-- 
2.24.3 (Apple Git-128)

